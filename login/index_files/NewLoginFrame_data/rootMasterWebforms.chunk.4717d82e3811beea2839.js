(window.webpackJsonp=window.webpackJsonp||[]).push([["rootMasterWebforms","asyncJobPicker","btBuilderSearchDropdown","headerScriptsGlobal"],{"./css/masterPage/rootMasterStyles.scss":function(e,n,t){},"./jscript/AsyncJobPicker.js":function(e,n,t){var r,a,o;t("./jscript/shared-filter-viewmodel.js");t("./jscript/Components/Common/bt-result-filters.scss"),window.JobPickerPubSubKeys={JobClicked:"jp_1",JobClickPrePostback:"jp_2",JobCountChanged:"jp_3",JobPickerReady:"jp_4",JobPickerLoadComplete:"jp_5",JobPickerInitialized:"jp_6"},window.AsyncJobPickerHelper=(o=ko.observable(),{Initialize:function(e){r=e,ko.postbox.publish(window.JobPickerPubSubKeys.JobPickerInitialized)},jobPickerExists:function(){return 0<$("#reactJobPickerPlaceholder").length},getSelectedJobId:function(){return AsyncJobPickerHelper.jobPickerExists()?(o(),r.selectedJobId):btJScriptGlobals.getOwnerJobId},GetJobName:function(e){var n="";return n=r.selectedJobId===Global.Enums.Jobsites.JobIdTypes.AllJobs?"Viewing All Listed Jobs":r.selectedJobId===Global.Enums.Jobsites.JobIdTypes.GlobalJob?"General":r.selectedJobId<0?"":r.jobs.find(function(e){return e.jobId===r.selectedJobId}).jobName,e?n:" - ("+n+")"},GetJobCount:function(){return this.jobPickerExists()?r.jobs.length:0},GetSelectedJob:function(){if(r.selectedJobId===Global.Enums.Jobsites.JobIdTypes.NoJobs)return{jobId:Global.Enums.Jobsites.JobIdTypes.NoJobs,count:0,jobIconType:JobPickerIcons.None,accountingEnabled:!1,accountingEnabledImageSrc:"",accountingEnabledImageSrcHoverMsg:"",isCalendarOffline:!0};var n=r.jobs.find(function(e){return e.jobId===r.selectedJobId});return{jobName:n.jobName,accountingEnabled:n.accountingEnabled,hasEmail:!0===n.hasEmail,setHasEmail:function(e){n.hasEmail=e},includeAllowances:!0===n.includeAllowances,street:n.jobInfo?n.jobInfo.street:n.street,isCalendarOffline:n.isCalendarOffline,dateOpened:n.dateOpened,ownerName:n.jobInfo?n.jobInfo.ownerName:n.ownerName,jobId:n.jobId,builderId:n.builderId}},GetJobsList:function(){return r.jobs.filter(function(e){return 0!==e.jobId}).map(function(e){return{jobId:e.jobId,builderId:e.builderId,jobName:e.jobName,includeAllowances:e.includeAllowances}})},GetJobPickerData:function(){var e={templatesOnly:r.templatesOnly,selectedBuilder:{builderId:r.builderId},allJobsSelected:0===r.selectedJobId};return e[Global.PageData.AsyncJobPickerPageData.JobChangePostbackControlId]="",e},setSelectedJobId:function(e,n){a&&window.JobPickerBridge.setSelectedJobId(e,n)},getSelectedJobIdList:function(){return AsyncJobPickerHelper.jobPickerExists()?r.selectedJobId!==Global.Enums.Jobsites.JobIdTypes.AllJobs?r.selectedJobId:r.jobs.map(function(e){return e.jobId}).join(","):btJScriptGlobals.getOwnerJobId},refreshJobPickerAndPage:function(e,n){this.jobPickerExists()&&(n?window.location.href=window.location.href:window.JobPickerBridge.refreshJobPicker(r.selectMode))},refreshPicker:function(e){r.selectMode=e,window.JobPickerBridge.refreshJobPicker(e)},SelectAllListedJobVM:function(){a&&window.JobPickerBridge.setSelectedJobId(0)},GetSelectedBuilderId:function(){return parseInt(r.builderId)},GetSelectedJobsForSubs:function(){if(r.selectedJobId===Global.Enums.Jobsites.JobIdTypes.AllJobs)return r.jobs.filter(function(e){return 0<e.jobId}).map(function(e){return{id:e.jobId,name:e.jobName}});var e=r.jobs.find(function(e){return e.jobId===r.selectedJobId});return[{id:e.jobId,name:e.jobName}]},pushUpdateToJobPicker:function(){o.notifySubscribers(),a&&window.JobPickerBridge.pushState(r)},getCurrentState:function(){return r},triggerJobUpdate:function(e){var n=r.selectedJobId;r.selectedJobId=e.jobId,o.notifySubscribers(),ko.postbox.publish(JobPickerPubSubKeys.JobClicked,{jobId:e.jobId,jobName:e.jobName,builderId:e.builderId,isCalendarOffline:e.isCalendarOffline,dateOpened:e.dateOpened,includeAllowances:e.includeAllowances});var t=new window.JobClickCallbackArgs({selectedJobId:e.jobId,allJobsSelected:0===e.jobId,jobCount:r.jobs.length,previousSelectedJobId:"number"==typeof n?n:0,reloadPage:void 0});window.ko.postbox.publish(JobPickerPubSubKeys.JobClickPrePostback,t),t.reloadPage&&(window.location.href=window.location.href),void 0!==t.postbackOverride&&(t.shouldPostback=t.postbackOverride),t.shouldPostback&&btMaster.doPostback(r.jobChangePostbackControlId,""),this.pushUpdateToJobPicker()},setComponentReady:function(){a=!0},getComponentReady:function(){return a},loadComplete:function(e){var n;r.jobs=e.jobs,r.selectedJobId=e.selectedJobId,this.pushUpdateToJobPicker(),n=-1===e.selectedJobId?{jobName:"Pick a Job"}:r.jobs.find(function(e){return e.jobId===r.selectedJobId}),ko.postbox.publish(window.JobPickerPubSubKeys.JobPickerReady,{selectedJobId:r.selectedJobId,selectedJobName:n?n.jobName:""})},updateJobs:function(e){r.jobs=e.jobs,r.selectedJobId=e.selectedJobId},getFilterEncryptedQueryString:function(){return r?r.filterEncryptedQueryString:$("#hidEncryptedJobsQS").val()},setTemplateMode:function(e){r.templatesOnly=e,this.pushUpdateToJobPicker()},triggerPostback:function(){btMaster.ShowProcessingSpinnerForPostbacks(),QSHandler.SyncQueryStringParams(),btMaster.doPostback(r.jobChangePostbackControlId,"")}}),window.JobPickerDisplayModes={NONE:0,MINIMAL:1,JOBSITES:2,CALENDAR:3,EMAIL:4,CHANGEORDER:5,PHOTOS:6,DOCUMENTS:7,OPTIONS:8,WARRANTY:9,SELECTIONS:10,CUSTOM:11,PurchaseOrder:12,BIDS:13,TODOS:14,DAILYLOGS:15,MESSAGES:16,BUDGET:17,TIMECLOCK:18,SURVEY:19,VIDEOS:20,OWNERPAYMENTS:21},window.JobSortOptions={Alphabetic:1,CloseDate:2},window.JobPickerIcons={None:0,House:1,HouseClosed:2,HouseTemplate:3,HouseTemplateClosed:4,Template:5,SelectAll:6,PrintMiniBW:7,OwnerActivated:8,OwnerActivationPendingWithId:9,OwnerActivationPendingWithoutId:10,OwnerNotActivated:11,GlobalDocs:12,Table:13,GlobalJob:14,Custom:15},window.JobClickCallbackArgs=function(e){var n=this;n.shouldPostback=!0,n[Global.PageData.AsyncJobPickerPageData.SelectedJobId]=e.selectedJobId||0,n.allJobsSelected=e.allJobsSelected,n.jobCount=e.jobCount,n.previousSelectedJobId=e.previousSelectedJobId||null},window.JobCountCallbackArgs=function(e){this.jobId=e.jobId||Global.Enums.Jobsites.JobIdTypes.NoJobs,this.delta=e.delta||0}},"./jscript/bt-numeric.js":function(e,l,n){"use strict";var s=n("./jscript/number-format.js"),d=null;l.Init=function(e,n,t,r,a,o,i){(d=new s.NumberFormatInfo).NegativeSign=e,d.NumberDecimalDigits=n,d.NumberDecimalSeparator=t,d.NumberGroupSeparator=r,d.NumberGroupSizes=a,d.NumberNegativePattern=o,d.CurrencySymbol=i,"undefined"!=typeof $&&$("body").trigger("btNumeric.Init")},l.CreateNumberFormatInfo=function(e){var n=new s.NumberFormatInfo;return n.NegativeSign=d.NegativeSign,n.NumberDecimalDigits=null!=e?e:d.NumberDecimalDigits,n.NumberDecimalSeparator=d.NumberDecimalSeparator,n.NumberGroupSeparator=d.NumberGroupSeparator,n.NumberGroupSizes=d.NumberGroupSizes,n.NumberNegativePattern=d.NumberNegativePattern,n.CurrencySymbol=d.CurrencySymbol,n},l.TryParse=function(e,n,t){if(null==e||null==e)return"";if("number"==typeof e)return e;e=e.toString().replace(d.CurrencySymbol,"");var r=l.CreateNumberFormatInfo(t);if("₹"===d.CurrencySymbol||"৳"===d.CurrencySymbol){var a=new RegExp(r.NumberGroupSeparator,"g");e=e.replace(a,"")}0===e.indexOf("(")&&e.indexOf(")")===e.length-1&&0!==r.NumberNegativePattern&&(e="-"+e.substring(1,e.length-1));var o=new s.NumberFormatter(r),i=e;return null!=i&&(i=i.trim()),o.TryParse(i,n)},l.ToString=function(e,n,t,r){if(isNaN(e))return e.toString();var a=l.CreateNumberFormatInfo(n);!0===t&&(a.NumberNegativePattern=0);var o=new s.NumberFormatter(a);return o.ToString(Number(e).toFixed(o.FormatInfo.NumberDecimalDigits),r)},l.RemoveTrailingZeros=function(e,n){var t=(e=e.toString()).indexOf(d.NumberDecimalSeparator);if(-1===t)return e;for(var r=e.substring(t+1),a=0;a<n-r.length;a++)e+="0";var o=new RegExp("(\\"+d.NumberDecimalSeparator+"\\d{"+n+"})0+$");return e.replace(o,"$1")},l.IsValidNumber=function(e,n){var t=l.TryParse(n.Value);n.IsValid=null!=t},l.IsValidNumber4DecimalPlaces=function(e,n){l.IsValidNumber(e,n),n.IsValid&&0<=n.Value.indexOf(d.NumberDecimalSeparator)&&(n.IsValid=n.Value.split(d.NumberDecimalSeparator)[1].length<=4)},l.IsValidNumber2DecimalPlaces=function(e,n){l.IsValidNumber(e,n),n.IsValid&&0<=n.Value.indexOf(d.NumberDecimalSeparator)&&(n.IsValid=n.Value.split(d.NumberDecimalSeparator)[1].length<=2)},l.IsValidNumberAndWholeNumber=function(e,n){l.IsValidNumber(e,n),n.IsValid&&(n.IsValid=l.IsValidWholeNumber(n.Value))},l.IsValidWholeNumber=function(e){var n=l.TryParse(e);return null!==n&&""!==n&&"number"==typeof n&&n%1==0},l.IsValidCurrency=function(e){var n=l.TryParse(e),t=null!==n&&""!==n;if(t&&!(t&&"number"==typeof e&&e%1==0)){var r=e.split(l.GetNumberDecimalSeparator());1<r.length&&(t=r[r.length-1].length<=l.GetNumberDecimalDigits())}return t},l.IsGreaterThanEqual=function(e,n){var t=l.TryParse(n.Value),r=l.TryParse($(e).data("compare"));null!==r&&""!==r?null==t||null==r?n.isValid=!1:n.IsValid=r<=t:n.IsValid=!0},l.IsLessThanEqual=function(e,n){var t=l.TryParse(n.Value),r=l.TryParse($(e).data("compare"));n.IsValid=null===r||""===r||null!=t&&null!=r&&t<=r},l.IsEqual=function(e,n){var t=l.TryParse(n.Value),r=l.TryParse($(e).data("compare"));n.IsValid=null!=t&&null!=r&&t==r},l.IsZeroOrGreater=function(e,n){var t=l.TryParse(n.Value);n.IsValid=null==t||""==t||0<=t},l.GetNumberDecimalDigits=function(){return d.NumberDecimalDigits},l.GetNumberDecimalSeparator=function(){return d.NumberDecimalSeparator},l.GetNumberGroupSeparator=function(){return d.NumberGroupSeparator},l.GetNumberGroupSizes=function(){return d.NumberGroupSizes},l.GetNegativeSign=function(){return d.NegativeSign},l.GetNumberNegativePattern=function(){return d.NumberNegativePattern},l.RoundNumberTwoDecimals=function(e){return Number(Math.round(e+"e2")+"e-2")},l.GetNumberOfDecimalDigits=function(e,n){return"number"==typeof e&&(e=this.toString(e)),-1===e.indexOf(n)?0:e.split(n)[1].length}},"./jscript/headerScripts_Global.js":function(module,exports,__webpack_require__){function _regeneratorRuntime(){"use strict";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function(){return i};var i={},e=Object.prototype,c=e.hasOwnProperty,u=Object.defineProperty||function(e,n,t){e[n]=t.value},n="function"==typeof Symbol?Symbol:{},a=n.iterator||"@@iterator",t=n.asyncIterator||"@@asyncIterator",r=n.toStringTag||"@@toStringTag";function o(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{o({},"")}catch(e){o=function(e,n,t){return e[n]=t}}function l(e,n,t,r){var o,i,l,s,a=n&&n.prototype instanceof g?n:g,d=Object.create(a.prototype),c=new C(r||[]);return u(d,"_invoke",{value:(o=e,i=t,l=c,s="suspendedStart",function(e,n){if("executing"===s)throw new Error("Generator is already running");if("completed"===s){if("throw"===e)throw n;return T()}for(l.method=e,l.arg=n;;){var t=l.delegate;if(t){var r=k(t,l);if(r){if(r===m)continue;return r}}if("next"===l.method)l.sent=l._sent=l.arg;else if("throw"===l.method){if("suspendedStart"===s)throw s="completed",l.arg;l.dispatchException(l.arg)}else"return"===l.method&&l.abrupt("return",l.arg);s="executing";var a=p(o,i,l);if("normal"===a.type){if(s=l.done?"completed":"suspendedYield",a.arg===m)continue;return{value:a.arg,done:l.done}}"throw"===a.type&&(s="completed",l.method="throw",l.arg=a.arg)}})}),d}function p(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}i.wrap=l;var m={};function g(){}function s(){}function d(){}var b={};o(b,a,function(){return this});var f=Object.getPrototypeOf,h=f&&f(f(S([])));h&&h!==e&&c.call(h,a)&&(b=h);var v=d.prototype=g.prototype=Object.create(b);function w(e){["next","throw","return"].forEach(function(n){o(e,n,function(e){return this._invoke(n,e)})})}function y(s,d){var n;u(this,"_invoke",{value:function(t,r){function e(){return new d(function(e,n){!function n(e,t,r,a){var o=p(s[e],s,t);if("throw"!==o.type){var i=o.arg,l=i.value;return l&&"object"==_typeof(l)&&c.call(l,"__await")?d.resolve(l.__await).then(function(e){n("next",e,r,a)},function(e){n("throw",e,r,a)}):d.resolve(l).then(function(e){i.value=e,r(i)},function(e){return n("throw",e,r,a)})}a(o.arg)}(t,r,e,n)})}return n=n?n.then(e,e):e()}})}function k(e,n){var t=n.method,r=e.iterator[t];if(void 0===r)return n.delegate=null,"throw"===t&&e.iterator.return&&(n.method="return",n.arg=void 0,k(e,n),"throw"===n.method)||"return"!==t&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+t+"' method")),m;var a=p(r,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,m;var o=a.arg;return o?o.done?(n[e.resultName]=o.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,m):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function I(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function D(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function C(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(I,this),this.reset(!0)}function S(n){if(n){var e=n[a];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var t=-1,r=function e(){for(;++t<n.length;)if(c.call(n,t))return e.value=n[t],e.done=!1,e;return e.value=void 0,e.done=!0,e};return r.next=r}}return{next:T}}function T(){return{value:void 0,done:!0}}return u(v,"constructor",{value:s.prototype=d,configurable:!0}),u(d,"constructor",{value:s,configurable:!0}),s.displayName=o(d,r,"GeneratorFunction"),i.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===s||"GeneratorFunction"===(n.displayName||n.name))},i.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,d):(e.__proto__=d,o(e,r,"GeneratorFunction")),e.prototype=Object.create(v),e},i.awrap=function(e){return{__await:e}},w(y.prototype),o(y.prototype,t,function(){return this}),i.AsyncIterator=y,i.async=function(e,n,t,r,a){void 0===a&&(a=Promise);var o=new y(l(e,n,t,r),a);return i.isGeneratorFunction(n)?o:o.next().then(function(e){return e.done?e.value:o.next()})},w(v),o(v,r,"Generator"),o(v,a,function(){return this}),o(v,"toString",function(){return"[object Generator]"}),i.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},i.values=S,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(D),!e)for(var n in this)"t"===n.charAt(0)&&c.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function e(e,n){return o.type="throw",o.arg=t,r.next=e,n&&(r.method="next",r.arg=void 0),!!n}for(var n=this.tryEntries.length-1;0<=n;--n){var a=this.tryEntries[n],o=a.completion;if("root"===a.tryLoc)return e("end");if(a.tryLoc<=this.prev){var i=c.call(a,"catchLoc"),l=c.call(a,"finallyLoc");if(i&&l){if(this.prev<a.catchLoc)return e(a.catchLoc,!0);if(this.prev<a.finallyLoc)return e(a.finallyLoc)}else if(i){if(this.prev<a.catchLoc)return e(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return e(a.finallyLoc)}}}},abrupt:function(e,n){for(var t=this.tryEntries.length-1;0<=t;--t){var r=this.tryEntries[t];if(r.tryLoc<=this.prev&&c.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var a=r;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=n&&n<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=e,o.arg=n,a?(this.method="next",this.next=a.finallyLoc,m):this.complete(o)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),m},finish:function(e){for(var n=this.tryEntries.length-1;0<=n;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),D(t),m}},catch:function(e){for(var n=this.tryEntries.length-1;0<=n;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var r=t.completion;if("throw"===r.type){var a=r.arg;D(t)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:S(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),m}},i}function asyncGeneratorStep(e,n,t,r,a,o,i){try{var l=e[o](i),s=l.value}catch(e){return void t(e)}l.done?n(s):Promise.resolve(s).then(r,a)}function _asyncToGenerator(l){return function(){var e=this,i=arguments;return new Promise(function(n,t){var r=l.apply(e,i);function a(e){asyncGeneratorStep(r,n,t,a,o,"next",e)}function o(e){asyncGeneratorStep(r,n,t,a,o,"throw",e)}a(void 0)})}}function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,n,t){return n&&_defineProperties(e.prototype,n),t&&_defineProperties(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){var n=_toPrimitive(e,"string");return"symbol"===_typeof(n)?n:String(n)}function _toPrimitive(e,n){if("object"!==_typeof(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0===t)return("string"===n?String:Number)(e);var r=t.call(e,n||"default");if("object"!==_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}function _get(){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,n,t){var r=_superPropBase(e,n);if(r){var a=Object.getOwnPropertyDescriptor(r,n);return a.get?a.get.call(arguments.length<3?e:t):a.value}}).apply(this,arguments)}function _superPropBase(e,n){for(;!Object.prototype.hasOwnProperty.call(e,n)&&null!==(e=_getPrototypeOf(e)););return e}function _inherits(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&_setPrototypeOf(e,n)}function _setPrototypeOf(e,n){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e})(e,n)}function _createSuper(r){var a=_isNativeReflectConstruct();return function(){var e,n=_getPrototypeOf(r);if(a){var t=_getPrototypeOf(this).constructor;e=Reflect.construct(n,arguments,t)}else e=n.apply(this,arguments);return _possibleConstructorReturn(this,e)}}function _possibleConstructorReturn(e,n){if(n&&("object"===_typeof(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var fs,gu;if(window.getGlobalValues=function(){return void 0!==window.btJScriptGlobals&&void 0!==window.btJScriptGlobals.spaProxyBypass?window.btJScriptGlobals.spaProxyBypass:window.btJScriptGlobals},window.btMaster=function(){var closeDialogCallbackID=null,closeDialogRefreshURL=null,removeQueryStringParameters=null,methodToExecuteOnParentRefresh=null,methodToExecuteOnClose=null,methodToExecuteWithoutRefresh=null,methodToCheckBeforeClose=null,defaultErrorFunction=function(e){e&&e.message&&0<e.message.length&&btMaster.btAlert(e.message)},btModalButtons=function(s,d){setTimeout(function(){return $("body").bt_appendClassOnce("freeze-window")},0);var c=$("<div>");c.uniqueId();var u=$("<div>",{class:"container-fluid"}),p=function(e){e.dialog("destroy").remove(),$("body").bt_removeClassOnce("freeze-window")};return $.Deferred(function(n){var e=$("<div>",{class:"col-xs-12",style:"padding-top: 15px;"}),t=$("<div>",{class:"row",style:"text-align: right;"}).append(e);if(d.cancelButton){var r=$("<button>",{autofocus:"danger"===d.confirmButton.styleType,class:"bootstrap-default btn "+getButtonClassForType(d.cancelButton.styleType),style:"margin-right: 10px;",type:"button",click:function(){n.reject(),d.cancelButton.postBackBtn&&btMaster.doPostback($(d.cancelButton.postBackBtn).attr("name"),"")}}).text(d.cancelButton.text);e.append(r)}var a=$("<button>",{class:"bootstrap-default btn "+getButtonClassForType(d.confirmButton.styleType),type:"button",click:function(){var e;(n.resolve(!0),d.confirmButton.postBackBtn||d.confirmButton.postBackBtnId)&&(d.confirmButton.postBackBtn?(e=$(d.confirmButton.postBackBtn).attr("name"))||(e=$(d.confirmButton.postBackBtn).attr("id").replace(/_/g,"$")):d.confirmButton.postBackBtnId&&(e=$('[name$="'+d.confirmButton.postBackBtnId+'"]').attr("name")),e&&btMaster.doPostback(e,""))}}).text(d.confirmButton.text);e.append(a),e.append($("<div>",{class:"clearfix"}));var o=$("<div>",{class:"row"}).append($("<div>",{class:"btTextContent col-xs-12"}).html(s));u.append(o),u.append(t),c.append(u);var i="";d.showCloseX||(i=" btDialogHideClose");var l="";d.showCloseX||void 0!==d.title&&0!==d.title.length||(l=" btDialogHideHeader"),c.dialog({dialogClass:"btDialogStyling btBasicDialog"+i+l,autoOpen:!0,modal:!0,title:d.title,closeOnEscape:!1,resizable:!1,draggable:!1,width:d.width,minHeight:25,open:function(e,n){d.onOpenCallback&&d.onOpenCallback()},close:function(e,n){d.onCloseCallback&&d.onCloseCallback(),p($(this))}})}).always(function(){p(c)})},btAlert=function(e,n){var t={title:void 0,styleType:"primary",buttonText:"OK",width:400},r=$.extend(t,n);return r.cancelButton=void 0,r.confirmButton={text:r.buttonText,styleType:r.styleType},r.buttonText=void 0,r.styleType=void 0,btModalButtons(e,r)},btConfirm=function(e,n){var t={showCloseX:!0,title:void 0,confirmButton:{text:void 0,styleType:"primary"},cancelButton:{text:"Cancel"},onCloseCallback:null,width:400};if(void 0===n||void 0===n.confirmButton||void 0===n.confirmButton.text)throw"confirmButton text not defined. To fix this specify confirmButton text - example: btMaster.btConfirm('message', { confirmButton: { text: 'Create XXXX' } })";n.confirmButton=$.extend(t.confirmButton,n.confirmButton),n.cancelButton=$.extend(t.cancelButton,n.cancelButton);var r=$.extend(t,n);return btModalButtons(e,r)};function getButtonClassForType(e){if(void 0===e)return"btn-default";switch(e){case"danger":return"btn-danger";case"success":return"btn-success";case"primary":return"btn-primary";case"warning":return"btn-warning";case"info":return"btn-info";default:return"btn-default"}}return{isMobileOS:function(){return-1!==navigator.userAgent.indexOf("Mobile")},isWindows:function(){return-1!=navigator.userAgent.indexOf("Win")},isMobile:function(){return btMaster.isiDevice()||btMaster.isAndroid()},isAndroid:function(){return-1!=navigator.userAgent.indexOf("Android")},isiDevice:function(){return btMaster.isiPhone()||btMaster.isiPad()||btMaster.isiPod()},isiPhone:function(){return-1!=navigator.userAgent.indexOf("iPhone")},isiPad:function(){return-1!=navigator.userAgent.indexOf("iPad")},isiPod:function(){return-1!=navigator.userAgent.indexOf("iPod")},isTouchDevice:function(){return"ontouchstart"in window||navigator.maxTouchPoints},isReact:function(){return window.location.pathname.toLowerCase().startsWith("/app/")},showWarningMessage:function(e){console.error("Webforms Modal Stack Trace"),window.getGlobalValues().isProduction||btMaster.btAlert("Warning you are calling legacy webforms '".concat(e,"' code on a react page.<br /><br /><a href=\"https://btwiki.atlassian.net/wiki/spaces/DPD/pages/345964724#ReactComponent'sStandards-LegacyCross-DialogCommunication\">See confluence</a>"))},isBrowserIE:function(){var e=window.navigator.userAgent,n=e.indexOf("MSIE "),t=e.indexOf("Trident/");return-1<n||-1<t},isInIframe:function(){try{return window.self!==window.top}catch(e){return!0}},isBrowserChrome:function(){var e=!1,n=window.chrome,t=window.navigator,r=t.vendor,a=-1<t.userAgent.indexOf("OPR"),o=-1<t.userAgent.indexOf("Edge");return t.userAgent.match("CriOS")?e=!0:null!=n&&"Google Inc."===r&&0==a&&0==o&&(e=!0),e},isBrowserFirefox:function(){return-1<navigator.userAgent.toLowerCase().indexOf("firefox")},isBrowserEdge:function(){return-1<navigator.appVersion.indexOf("Edge")},browserLanguage:function(){return window.navigator.userLanguage||(navigator.languages?navigator.languages[0]:navigator.language)},unBindScroll:function(e){$(window).unbind("scroll")},clog:function(e){},defaultErrorFunction:defaultErrorFunction,textCounterJQ:function(e,n,t){var r=$("#"+e).val().length,a=Math.max(t-r,0),o=a+" character"+(1!==a?"s":"")+" remaining.";$("#"+n).text(o)},setVisibility:function(e,n){n?e.css("visibility","visible"):e.css("visibility","hidden")},testFunction:function(e){alert(e)},arrayRotate:function(e,n){return n-=e.length*Math.floor(n/e.length),e.push.apply(e,e.splice(0,n)),e},btPage_ClientValidate_WithSummary:function(e){var n,t;if(void 0!==Page_ValidationSummaries)for(t=0;t<Page_ValidationSummaries.length;t++)if(n=Page_ValidationSummaries[t]){for(var r=0,a=0;a<Page_Validators.length;a++)ValidatorValidate(Page_Validators[a],e,null),Page_Validators[a].isvalid||"string"!=typeof Page_Validators[a].errormessage||r++;if("string"==typeof n.headertext){var o=n.headertext,i=o.search(":"),l=i,s=1<r?"s":"";"s"===o.charAt(i-1)&&(s="",l--),n.headertext=o.slice(0,l)+s+o.slice(i,o.length)}}return Page_ClientValidate(e)},Page_ClientValidateMultiple:function(e){var t=[],r=!0;$.each(e,function(e,n){r=Page_ClientValidate(n)&&r,$.each(Page_Validators,function(e,n){n.isvalid||t.push(n)})}),$.each(t,function(e,n){ValidatorValidate(n)}),r||(Page_IsValid=!1,ValidationSummaryOnSubmit());var n=$(".summary-validator-header"),a=$(".summary-validator-background > ul");if(n.length&&a.length){var o=0;a.children().each(function(e,n){n.innerText&&0<n.innerText.length&&o++}),n.text("Please correct the following "+btStringHandler.pluralise(o,"field","fields")+":")}return r},ValidateElementValidators:function(e){if(e.get(0)&&e.get(0).Validators){var t=!0;return $.each(e.get(0).Validators,function(e,n){ValidatorValidate(n),t=t&&n.isvalid}),t&&e.hasClass("ValidationErrorBorder")&&e.removeClass("ValidationErrorBorder"),t}return!0},EnableElementValidators:function(e,t){e.get(0)&&e.get(0).Validators&&$.each(e.get(0).Validators,function(e,n){t?n.enabled=!0:(ValidatorEnable(n,!1),ValidationSummaryOnSubmit())})},incrementNumericTextbox:function(e,n,t){var r=parseInt(n.value);isNaN(r)?n.value=0:0<n.maxLength&&(r+e).toString().length<=n.maxLength&&(n.value=r+e,!t&&r<0&&(n.value=0)),$(n).change()},updateTextboxValue:function(e,n){btMaster.updateTextboxElementValue($(e),n)},updateTextboxElementValue:function(e,n,t){void 0===t&&"undefined"!=typeof Page_ClientValidate&&(t=Page_ClientValidate(e));var r=t?"":e.css("background-color"),a=t?"":e.css("border-color");e.stop(!0,!0).animate({"border-color":"#dfa03d","background-color":"#feffb6"},{duration:50}).animate({"background-color":r},1e3,function(){e.css("border-color",a),e.css("background-color",r)}),e.val(n)},updateLabelValue:function(e,n){var t=$(e).css("background-color"),r=$(e).css("border-color");$(e).stop(!0,!0).animate({"border-color":"#dfa03d","background-color":"#feffb6"},{duration:50}).animate({"background-color":t},1e3,function(){$(e).css("border-color",r)}),$(e).text(n)},getAsBoolean:function(e){return"true"===e.toLowerCase()},updateCkElements:function(){if("undefined"!=typeof CKEDITOR)for(var e in CKEDITOR.instances)CKEDITOR.instances[e].updateElement()},enableDisableCheckActionsDropDown:function(e,r,n,a,o){var t=$(r);btMaster.resetCheckedActionsDropDownToDisabled(t,o);var i=function(){var e=$(r),n=$(a).length,t=!1;1<n?t=!0:1!==n||$(a).hasClass("checkAll")||1==$(a).first().parents(".ui-jqgrid-labels").length||(t=!0),t?(e.addClass("blueButtonDropDown"),btMaster.enableCheckedActions(e.parent().find(".disabled"))):(e.removeClass("blueButtonDropDown"),btMaster.resetCheckedActionsDropDownToDisabled(e,o))};$(e).on("click",n,null,i),$(e).on("checkedValuesChanged",null,null,i),i()},disableCheckedActionsDropDown:function(e,n,t){$(t).attr("checked",!1),$(e).on("click",function(){var e=$(n);btMaster.resetCheckedActionsDropDownToDisabled(e,!1)})},resetCheckedActionsDropDownToDisabled:function(e,n){e.removeClass("blueButtonDropDown"),btMaster.disableCheckedActions(e.parent().find(".dropDownItem"),n)},enableDisableCheckedAction:function(e,n,t){n?btMaster.enableCheckedActions(e.find(".disabled")):btMaster.disableCheckedActions(e.find(".dropDownItem"),t)},enableCheckedActions:function(e){e.removeClass("disabled").off("click")},disableCheckedActions:function(e,n){e.addClass("disabled").off("click").click(function(e){n?btToastMessages.error("Check an item or items in the list to perform this action."):btMaster.disabledClick.bind(null,"Check an item or items in the list to perform this action.",e)()})},setCheck:function(e,n){e.checked=n},enableCheckBoxBasedOnOtherCheckBoxState:function(e,n){$(n).length&&$(e).length&&($(n).is(":checked")?$(e).removeAttr("disabled"):($(e).attr("checked",!1),$(e).attr("disabled",!0)))},checkAll:function(e,t,n,r,a){(n?$("#"+e):r?$(e):$("input[name="+e+"]")).each(function(){var e=$(this),n=e.is(":disabled");void 0!==a?(!n||n&&a)&&e.is(":checked")!==t&&e.prop("checked",t).change():e.is(":checked")!==t&&e.prop("checked",t).change()})},triggerClickAll:function(e,n){$(e).each(function(){var e=$(this);e.is(":checked")!==n&&e.trigger("click")})},checkIfAtLeastOneChecked:function(e,n){$(n).prop("checked",$(e).val())},checkAllMultiselectOnCheckChanged:function(e,n,t){var r=$(n).is(":checked");t?r?$(e).multiselect("checkAll"):$(e).multiselect("uncheckAll"):$(e+" option").prop("selected",r)},getCheckedFromArray:function(e){for(var n="",t=0;t<e.length;t++)e[t].checked&&(n+=e[t].value+",");return n.substr(0,n.length-1)},getCheckedBySelector:function(e){var n=$(e).get();return this.getCheckedFromArray(n)},getChecked:function(e){var n=document.getElementsByName(e);return this.getCheckedFromArray(n)},atLeastOneCheck:function(e,n){var t=0<$("#"+e).find("input[type=checkbox]:checked").length;return t?$("#"+n).hide():$("#"+n).show(),t},getCheckedAlertOnNotStartsWithjQuery:function(e,n,t,r){for(var a=r?$(e,parent.document):$(e),o="",i=!1,l=0;l<a.length;l++)a[l].checked&&(a[l].value.slice(0,n.length)==n?o+=a[l].value+",":i=!0);return i&&t&&alert(t),o.substr(0,o.length-1)},expandCollapse:function(e,n,t,r,a,o){e.src.match(t+"$")==t?(e.src=r,e.title=o,$("."+n).show()):(e.src=t,$("."+n).hide(),e.title=a)},getParentWindow:function(){if(null==window)return null;var e;if(e=QSHandler.TryParse("dmethod",window.location.href)){if("popup"==e)return window.opener.closed?null:window.opener;if("iframe"==e)return window.parent}return null},pdfOpener:function(e){null!=btMaster.getParentWindow()?btMaster.getParentWindow().btMaster.pdfOpener(e):window.open("https://docs.google.com/viewer?url="+e,"_self")},documentOpener:function(e){null!=btMaster.getParentWindow()?btMaster.getParentWindow().btMaster.documentOpener(e):window.open("https://docs.google.com/viewer?url="+e+"&embedded=true","_self")},doPostback:function(e,n){var t;btMaster.updateCkElements(),window.event||(t=Object.getOwnPropertyDescriptor(Window.prototype,"event"),Object.defineProperty(window,"event",{configurable:!0,get:function(){return{}},set:function(e){}}));try{__doPostBack(e,n)}finally{t&&Object.defineProperty(window,"event",t)}},ShowProcessingSpinnerForPostbacks:function(e,n,t,r,a,o){var i=!1;null!=e&&$("#ajaxProgressMessage").text(e),null!=o&&($("#divLoading").addClass(o),$(".AccountingContainer").css("visibility","hidden")),null!=n?($(".ajaxProgressDivider").css("display","block"),$("#ajaxProgressCustomImageContainer").css("display","block"),$("#ajaxProgressCustomImageContainer").append("<img src='"+n+"' width='165' />"),i=!0):($(".ajaxProgressDivider").css("display","none"),$("#ajaxProgressCustomImageContainer").css("display","none")),null==t||"undefined"==typeof Page_ClientValidate?i=!0:(null==r?Page_ClientValidate(""):Page_ClientValidate(r),Page_IsValid&&(i=!0));var l=$("form");if(0<l.length&&null==l.attr("novalidate")&&l[0].checkValidity&&(i=i&&(!t||l[0].checkValidity())),i){if(null!=a){var s=parseInt(a),d=s+1;$(".ajaxProgressBackground").css("z-index",s),$(".ajaxProgressIndicator").css("z-index",d),$(".ajaxNewLoader, #ajaxNewLoader").css("z-index",d)}$("#divLoading").show()}return i},ShowProcessingSpinner:function(){$("#divLoading").show()},HideProcessingSpinner:function(){$("#divLoading").hide()},applyAlternatingRowStyle:function(e){var a=0;$("td[data-ctrlid='"+e+"']").each(function(e){var n=$(this).closest("tr");n.removeClass("whiteBack"),n.removeClass("subBackColorBorder"),a%2==0?n.addClass("whiteBack"):n.addClass("subBackColorBorder");var t=btMaster.shadeColor($(this).parent().css("background-color"),-20),r=$(".inlineEdit");n.find(r).each(function(){$(this).css("border",btStringHandler.format("1px solid {0}",t))}),a++})},applyAlternatingRowStyleOnParentTable:function(e,n){var t=0;$("#"+e).closest("table").find("tr:visible").each(function(){var e=$(this);e.removeClass("whiteBack"),e.removeClass("subBackColorBorder"),e.hasClass("greyGradientBack")||(t%2==0?e.addClass("whiteBack"):n&&e.addClass("subBackColorBorder"),t++)})},shadeColor:function(e,n){if("#"!=e[0]){var t=/(.*?)rgb\((\d+), (\d+), (\d+)\)/.exec(e),r=parseInt(t[2]),a=parseInt(t[3]);e="#"+(parseInt(t[4])|a<<8|r<<16).toString(16)}var o=!1;"#"==e[0]&&(e=e.slice(1),o=!0);var i=parseInt(e,16),l=(i>>16)+n;255<l?l=255:l<0&&(l=0);var s=(i>>8&255)+n;255<s?s=255:s<0&&(s=0);var d=(255&i)+n;return 255<d?d=255:d<0&&(d=0),(o?"#":"")+(d|s<<8|l<<16).toString(16)},disableEnterButton:function(n,t){$(window).keydown(function(e){if(13===e.keyCode)return!!$(e.target).hasClass("ui-pg-input")||(0<$(e.target).closest(".bt-result-filters").length||(!(!n||"TEXTAREA"!==e.target.nodeName)||(t&&"button"===e.target.type?($(e.target).focus(),!0):(e.preventDefault(),!1))))})},getApiResponseFailureMessage:function(e){return e.message?e.message:e.data&&e.data.message?e.data.message:e.data&&e.data.formMessage?e.data.formMessage:e.responseJSON&&e.responseJSON.message?e.responseJSON.message:"An error has occurred. Please try again."},disableOnClick:function(e){$("#"+e).click(function(){return this.disabled=!0,btMaster.doPostback($(this).attr("name"),""),!1})},disabledClick:function(e,n){n&&n.stopPropagation(),ServiceMessage.showAndFade(e)},addControlToValidator:function(e,n){ValidatorHookupControlID(e,document.all[n])},styleType:{SUCCESS:"success",DANGER:"danger",PRIMARY:"primary",WARNING:"warning",INFO:"info"},btAlert:btAlert,btConfirm:btConfirm,btDialogs:function(){var dialogsLoaded=new Array;return{fireDialogWithID:function fireDialogWithID(strDialogID,originalParams){var defaults={dBoxMethod:"popup",width:"auto",height:"auto",widthAsPercent:!1,heightAsPercent:!1,minWidth:150,minHeight:150,src:"about:blank",cssClass:"",overlayClass:"",showCloseX:!0,resizable:!0,showLoadingSpinner:!0,closeOnEscape:!1,usesPostBacks:!0,allowFullScreen:!1,unloadOnClose:!1,createCallback:function(){},openCallback:function(){},closeCallback:function(){},position:{my:"center",at:"center",of:window},gaFrameTitle:originalParams.title},params=$.extend(defaults,originalParams),_cssClass=params.cssClass;!1===params.usesPostBacks&&(_cssClass+=" ignore-zindex-hack");var _overlayClass=params.overlayClass;"string"==typeof params.showCloseX&&(params.showCloseX="true"===params.showCloseX.toLowerCase()),params.widthAsPercent&&(params.width=params.width/100*$(window).width()),params.heightAsPercent&&(params.height=params.height/100*$(window).height());var _maxHeightPercent=.9*$(window).height(),_left=200;void 0!==params.left&&(_left=params.left/100*$(window).width()),"string"==typeof params.showLoadingSpinner&&(params.showLoadingSpinner="true"===params.showLoadingSpinner.toLowerCase());var showLoadingSpinner=params.showLoadingSpinner;params.title&&-1!==$.inArray(strDialogID,dialogsLoaded)&&$("#"+strDialogID).dialog("option","title",params.title);var eventTimer=null,centerDialogFunction=function(){window.btServerVariables.isIOS_InNativeApp()||window.btServerVariables.isAndroid_InNativeApp()||window.btServerVariables.IsInMobileApp()||(eventTimer&&clearTimeout(eventTimer),eventTimer=setTimeout(function(){$("#"+strDialogID).dialog("option","position",$.extend({my:"center",at:"center",of:window,collision:"fit"},originalParams.position)),params.preventCutoff&&$("."+params.cssClass).position().top<0&&$("."+params.cssClass).css("top","0px")},200))},sendGoogleAnalyticsOpenClosedEvent=function(e){var n=window===window.top?"Modal":"Modal in Modal";BTGoogleAnalytics.SendViewTypeEvent(e,n)};if("iframe"==params.dBoxMethod||"div"==params.dBoxMethod)if(-1==$.inArray(strDialogID,dialogsLoaded)){if("iframe"==params.dBoxMethod){var dialogMessageHandler=function(e){var n=new RegExp("(.*buildertrend.net(?::d*)?)"),t=new RegExp("(.*localhost(?::d*)?)");if(n.test(e.origin)||t.test(e.origin)){var r=$("#"+strDialogID).find("iframe");if(0!==r.length&&r[0].contentWindow===e.source){var a=null;try{if(!(a=JSON.parse(e.data)).hasOwnProperty("type"))throw new Error}catch(e){return}switch(data=a.data,a.type){case"closeModal":$("#"+strDialogID).dialog("close");break;case"closeModalAndReload":if(void 0!==a.data&&void 0!==a.data.toastMessage&&a.data.toastMessage)switch(a.data.toastType){case"success":QSHandler.AddQSVariable("successToast",a.data.toastMessage);break;case"error":QSHandler.AddQSVariable("errorToast",a.data.toastMessage)}void 0!==a.data&&a.data.showSignaturePad&&QSHandler.AddQSVariable("showSignaturePad",!0),btMaster.btDialogs.setcloseDialogRefreshURL(!0),$("#"+strDialogID).dialog("close");break;case"doPostback":btMaster.btDialogs.executeMethodOnPageIfExists(),btMaster.doPostback(a.data,"");break;case"setModalTitle":btMaster.btDialogs.changeTitle(strDialogID,a.data);break;case"setModalSize":btMaster.btDialogs.resizeModal(strDialogID,a.data.height,a.data.width,!0,!1),centerDialogFunction();break;case"reloadAfterClose":closeDialogRefreshURL=!0}}}else console.log("Non whitelisted domain send iframe message, ignoring - origin: "+e.origin)},data=void 0;$("#"+strDialogID).dialog({dialogClass:"btDialogStyling "+_cssClass+(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates?" bt-legacy-modal-header ":""),autoOpen:!1,modal:!0,width:params.dialogWidth||"auto",height:params.dialogHeight||"auto",minWidth:params.minWidth,minHeight:params.minHeight,closeOnEscape:params.closeOnEscape,show:{effect:"fade",speed:1e4},position:params.position,open:function(e,n){$("#"+strDialogID).attr("data-modaldiv","true"),btMaster.isMobile()?$("#"+strDialogID).dialog("option","position",{my:"left top",at:"left top",of:window}):($("body").bt_appendClassOnce("freeze-window"),$(window).on("resize",centerDialogFunction),$("#"+strDialogID).dialog("option","position",params.position)),$(".ui-widget-overlay").addClass(_overlayClass),params.showCloseX?$(".ui-dialog-titlebar-close",$(this).parent()).show():$(".ui-dialog-titlebar-close",$(this).parent()).hide(),window.addEventListener("message",dialogMessageHandler),params.title=$("#"+strDialogID).dialog("option","title");var t=(params.gaFrameTitle||$("#"+strDialogID).dialog("option","title")||strDialogID)+" - Viewed";sendGoogleAnalyticsOpenClosedEvent(t),params.openCallback(e,n)},resize:function(){var e=$(this).outerWidth(),n=$(this).outerHeight();btMaster.btDialogs.updateIFrameSize(strDialogID,e,n),$("#"+strDialogID).closest(".ui-dialog .ui-dialog-content").css("overflow","hidden"),$("#"+strDialogID).dialog("option","position",params.position)},beforeClose:function beforeClose(event,ui){return void 0!==params.beforeCloseCallback&&(eval(params.beforeCloseCallback),"function"==typeof params.beforeCloseCallback&&(params.beforeCloseCallback=null)),btMaster.btDialogs.executeCheckBeforeClose()},close:function(e,n){params.closeCallback(this,e,n,data);var t=(params.gaFrameTitle||params.title||strDialogID)+" - Closed";sendGoogleAnalyticsOpenClosedEvent(t),$(window).off("resize",centerDialogFunction),$("body").bt_removeClassOnce("freeze-window");var r=$("#"+strDialogID);r.removeAttr("data-modaldiv"),btMaster.btDialogs.executeMethodOnPageIfExists(),btMaster.btDialogs.executeMethodBeforeCloseIfExists();var a=closeDialogCallbackID||closeDialogRefreshURL;r.find("iframe").attr("src","about:blank"),$(".ui-widget-overlay").removeClass(_cssClass),a&&!btMaster.btDialogs.executeMethodWithoutRefreshIfExists()?closeDialogRefreshURL?(removeQueryStringParameters?window.location.href=window.location.href.split("?")[0]:window.location.reload(),closeDialogRefreshURL=null):closeDialogCallbackID&&(btMaster.doPostback(closeDialogCallbackID,""),closeDialogCallbackID=null):btMaster.HideProcessingSpinner(),params.unloadOnClose&&btMaster.btDialogs.unloadDialog(this),window.removeEventListener("message",dialogMessageHandler)},create:params.createCallback,resizable:params.resizable})}else $("#"+strDialogID).dialog({dialogClass:"btDialogStyling "+_cssClass,autoOpen:!0,modal:!0,title:params.title||"",width:"auto"===params.width||params.widthAsPercent?params.width:parseInt(params.width),height:"auto"===params.height||params.heightAsPercent?params.height:parseInt(params.height),maxHeight:_maxHeightPercent,closeOnEscape:!1,beforeClose:function beforeClose(event,ui){return void 0!==params.beforeCloseCallback&&eval(params.beforeCloseCallback),btMaster.btDialogs.executeCheckBeforeClose()},open:function(e,n){$("body").bt_appendClassOnce("freeze-window"),$(window).trigger("resize"),btMaster.isMobile()||$(window).on("resize",centerDialogFunction),$("#"+strDialogID).attr("data-modaldiv","true"),params.showCloseX?$(".ui-dialog-titlebar-close",$(this).parent()).show():$(".ui-dialog-titlebar-close",$(this).parent()).hide(),params.openCallback(e,n),params.title=$("#"+strDialogID).dialog("option","title");var t=(params.gaFrameTitle||$("#"+strDialogID).dialog("option","title")||strDialogID)+" - Viewed";sendGoogleAnalyticsOpenClosedEvent(t),centerDialogFunction()},resize:function(){$("#"+strDialogID).dialog("option","position",params.position)},close:function(e,n){void 0!==params.closeCallback&&params.closeCallback(this,e,n);var t=(params.gaFrameTitle||params.title||strDialogID)+" - Closed";sendGoogleAnalyticsOpenClosedEvent(t),$(window).off("resize",centerDialogFunction),btMaster.btDialogs.executeMethodBeforeCloseIfExists(),$("#"+strDialogID).removeAttr("data-modaldiv"),$("body").bt_removeClassOnce("freeze-window")},resizable:params.resizable,create:params.createCallback});dialogsLoaded.push(strDialogID)}else{var widthToUse="auto";params.dialogWidth?widthToUse=params.dialogWidth:params.width&&(widthToUse=params.width),parseInt(widthToUse)>$(window).width()&&(widthToUse=Math.floor(.85*$(window).width())+"px");var theDiv=$("#"+strDialogID);theDiv.dialog("option","width",widthToUse);var titleAttr=theDiv.attr("title");void 0!==titleAttr&&theDiv.dialog("option","title",titleAttr),theDiv.parent().css("max-width",params.maxWidth)}switch(params.dBoxMethod){case"iframe":var $iframeDialog=$("#"+strDialogID);$iframeDialog.parent().css("max-width",params.maxWidth),$iframeDialog.css("line-height",0),null!=params.title&&$iframeDialog.dialog("option","title",params.title),params.src=QSHandler.UpdateOrAddQueryStringParameter(params.src,"isModal",!0),("auto"===params.height||parseInt(params.height)>$(window).height())&&(params.height=Math.floor(.85*$(window).height())+"px"),("auto"===params.width||parseInt(params.width)>$(window).width())&&(params.width=Math.floor(.85*$(window).width())+"px");var iframe=$("<iframe>");iframe.attr("id","ifr"+strDialogID),iframe.css({width:params.width,height:params.height,border:"0px",visibility:"hidden"}),iframe.on("load",function(){iframe.css("visibility","visible"),$("#pre"+strDialogID).hide()}),params.allowFullScreen&&iframe.attr("allowfullscreen",""),$iframeDialog.html(iframe),void 0!==params.html&&$iframeDialog.append(params.html),$iframeDialog.dialog("open"),showLoadingSpinner&&$iframeDialog.append('<img id="pre'+strDialogID+'" src="/images/Common/ajax-loader.gif" style="position:absolute;top:50%;left:50%;margin-top:-25px;margin-left:-25px;">'),$("#ifr"+strDialogID).attr("src",params.src);break;case"div":var $dialog=$("#"+strDialogID).dialog("open");(void 0===params.usesPostBacks||params.usesPostBacks)&&$dialog.parent().appendTo(jQuery("form:first")),void 0!==params.html&&$("#"+strDialogID).append(params.html),"auto"!==params.height&&$("#"+strDialogID).dialog("option","height")>$(window).height()&&$("#"+strDialogID).dialog("option","height",.85*$(window).height());break;case"popup":var blocktest=window.open(params.src,"_"+strDialogID,"width="+params.width+",height="+params.height+",left="+_left+",top=200,resizable=yes,scrollbars=yes");null==blocktest&&alert("This site requires popup windows. Please disable your popup blocker for this website.");break;default:alert('ERROR: Improper value provided for "dBoxMethod" on fireDialog call: '+params.dBoxMethod)}return!1},createAndFireDialog:function(e,n){var a,t=$("<div>");a=n?(t.attr("id",n),n):t.uniqueId().prop("id"),e.src.includes("?")||(e.src+="?"),e.src+="&divId="+a,$("body").append(t);var o=e.closeCallback;return e.closeCallback=function(e,n,t,r){void 0!==o&&(o(e,n,t,r),o=void 0),btMaster.btDialogs.unloadDialog(a),$(e).remove()},btMaster.btDialogs.fireDialogWithID(a,e),t=null,a},fireDialog:function(e){btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame",e)},closeDialog:function(e){!btMaster.isReact()||e.startsWith("ui-id-")?$("#"+e).dialog("close"):btMaster.showWarningMessage("closeDialog")},closeDialogIfInitialized:function(e){!btMaster.isReact()||e.startsWith("ui-id-")?$("#"+e).hasClass("ui-dialog-content")&&$("#"+e).dialog("close"):btMaster.showWarningMessage("closeDialogIfInitialized")},changeTitle:function(e,n){if(btMaster.isReact())btMaster.showWarningMessage("changeTitle");else{var t=void 0===e?$("[data-modaldiv='true']"):$("#"+e),r=t.dialog("option","title");if(t.dialog("option","title",n),r!==n){var a=n+" - Viewed",o=window===window.top?"Modal":"Modal in Modal";BTGoogleAnalytics.SendViewTypeEvent(a,o)}}},unloadDialog:function(e){var t;(t="object"!==_typeof(e)?$("#"+e):e instanceof jQuery?e:$(e)).dialog("destroy");var r=-1;$.each(dialogsLoaded,function(e,n){n===t.prop("id")&&(r=e)}),-1<r&&dialogsLoaded.splice(r,1)},closeMe:function(){if(window.parent.btMaster.isReact())ReactDialogHandler.CurrentModal.CloseModal({});else{var e=btMaster.getParentWindow()||window,n=QSHandler.GetVar("dialogID");n?e.btMaster.btDialogs.closeDialog(n):null!==window.frameElement&&e.btMaster.btDialogs.closeDialog(window.frameElement.parentElement.id)}},removeDialogCloseButton:function(e){btMaster.isReact()?btMaster.showWarningMessage("removeDialogCloseButton"):$(".ui-dialog-titlebar-close").hide()},showDialogCloseButton:function(e){btMaster.isReact()?btMaster.showWarningMessage("showDialogCloseButton"):$("#"+e).prev().find(".ui-dialog-titlebar-close").show()},removeDialogTitleBar:function(e){btMaster.isReact()?btMaster.showWarningMessage("removeDialogTitleBar"):$("#"+e).parent().find(".ui-dialog-titlebar").hide()},updateDialogTitle:function(e,n){btMaster.isReact()?btMaster.showWarningMessage("updateDialogTitle"):$("#"+e).dialog("option","title",n)},updateIFrameSize:function(e,n,t){btMaster.isReact()?btMaster.showWarningMessage("updateIFrameSize"):(0<=n&&$("#ifr"+e).width(n),0<=t&&$("#ifr"+e).height(t))},resizeParentModals:function(){if(window.parent.btMaster.isReact())btMaster.showWarningMessage("resizeParentModals");else{var e=$(document).width()+50;1500<e&&(e=1500);for(var n=parent,t=[window],r={width:e,height:$(document).height()};n.self!==window.top;)$(n.document).width()>r.width&&(r.width=$(n.document).width()),$(n.document).height()>r.height&&(r.height=$(n.document).height()),t.push(n),n=n.parent;for(var a=t.length-1;0<=a;a--){var o=r.width+50*a,i=r.height+50*a,l=t[a];l.parent.btMaster.btDialogs.resizeModal(QSHandler.GetVarFromThisURL("divId",l.location.href),i,o)}}},resizeParentModal:function(){if(window.parent.parent.btMaster.isReact())btMaster.showWarningMessage("resizeParentModal");else{var e=$(document).width()+50;1500<e&&(e=1500),parent.parent.btMaster.btDialogs.resizeModal(QSHandler.GetVarFromThisURL("divId",parent.location.href),$(document).height(),e)}},resizeModal:function(e,n,t,r,a){if(window.parent.btMaster.isReact())ReactDialogHandler.CurrentModal.SetModalSize(t,n);else{var o=document.body.clientHeight,i=document.body.clientWidth,l=$("#ifr"+e),s=l.height(),d=l.width(),c=!1,u=a||!1;(s<n||r)&&(s=n,c=!0),null!=t&&(d<t||r)&&(d=t,c=!0),o-32<s&&(s=o-64),null!=t&&i-32<d&&!btMaster.isMobile()&&(d=i-64),null!=t?u?l.animate({height:s,width:d},500):(l.width(d),l.height(s)):u?l.animate({height:s},500):l.height(s);var p=e||window.parent.$(".ui-dialog.btDialogStyling").attr("aria-describedby"),m=window.parent.$("#"+p);try{if((m.dialog("isOpen")||u)&&c)if(u){var g=Math.max($(window).height()/2-(s+15)/2,0),b=Math.max($(window).width()/2-d/2,0);g+=$(window).scrollTop(),m.parents(".ui-dialog:first").animate({width:"auto",height:"auto",top:g,left:b},500)}else m.dialog("option","height","auto"),m.dialog("option","width","auto")}catch(e){}}},resizeMe:function(e,n,t,r){window.parent.btMaster.isReact()?ReactDialogHandler.CurrentModal.SetModalSize(n,e):window.parent.btMaster.btDialogs.resizeModal(QSHandler.GetVarFromThisURL("divId",location.href),e,n,t,r)},resizeMeFitToParent:function(){btMaster.isReact()?ReactDialogHandler.CurrentModal.SetModalSize($(parent).width(),$(parent).height()):window.innerHeight<800&&btMaster.btDialogs.resizeMe($(parent).height(),.75*$(parent).width(),!0,!0)},shrinkwrapDialogToIframe:function(e){if(btMaster.isReact())btMaster.showWarningMessage("shrinkwrapDialogToIframe");else{var n=$("#"+e,window.parent.document),t=n.find("iframe");n.dialog("option","height",t.outerHeight()),n.dialog("option","width",t.outerWidth())}},centerDivDialog:function(e,n,t){if(!btMaster.isMobile()&&!btMaster.isReact()){var r=$("#"+e);r.hasClass("ui-dialog-content")&&r.dialog("option","position",{my:n||"center",at:t||"center",of:window})}},centerDialogOnMobile:function(e){$("#"+e).dialog("option","position",{my:"center",at:"center",of:window})},setcloseDialogCallbackID:function(e){closeDialogCallbackID=e},setcloseDialogRefreshURL:function(e){closeDialogRefreshURL=e},setcloseDialogRemoveQueryStringParams:function(e){removeQueryStringParameters=e},executeMethodOnPageIfExists:function(){null!=methodToExecuteOnParentRefresh&&methodToExecuteOnParentRefresh()},executeMethodBeforeCloseIfExists:function(){null!=methodToExecuteOnClose&&(methodToExecuteOnClose(),methodToExecuteOnClose=null)},executeMethodWithoutRefreshIfExists:function(){return null!=methodToExecuteWithoutRefresh&&(methodToExecuteWithoutRefresh(),!(closeDialogCallbackID=closeDialogRefreshURL=methodToExecuteWithoutRefresh=null))},executeCheckBeforeClose:function(){try{if(null==methodToCheckBeforeClose)return!0;var e=methodToCheckBeforeClose();return methodToCheckBeforeClose=null,e}catch(e){}},setMethodOnPageToExecuteDuringRefresh:function(e){methodToExecuteOnParentRefresh=e},setMethodOnPageToExecuteBeforeClose:function(e){methodToExecuteOnClose=e},setMethodToExecuteWithoutRefresh:function(e){methodToExecuteWithoutRefresh=e},setMethodToCheckBeforeClose:function(e){methodToCheckBeforeClose=e},executeBTUpdatePanelComplete:function(){btMaster.HideProcessingSpinner()},getParentRecursive_Until_ModalDiv_OR_TabHolder:function(e,n){return n?e.data("modaldiv")||e.data("tabholder")?e:0!=e.parent().length?btMaster.btDialogs.getParentRecursive_Until_ModalDiv_OR_TabHolder(e.parent(),n):null:0==$("*[data-modaldiv]").length&&0==$("*[data-tabholder]").length?null:btMaster.btDialogs.getParentRecursive_Until_ModalDiv_OR_TabHolder(e,!0)},getDialogOpen:function(e,n){var t=$("#"+n).val();return btMaster.btDialogs.getDialogOpenFromString(e,t)},getDialogOpenFromString:function(e,n){var t=n;for(var r in e){var a=e[r];"string"==typeof a&&(a=a.replace(/'/g,"\\'")),t=t.replace(new RegExp(r,"g"),a)}return t},setRedirectParentOnClose:function(e){var n=btMaster.getParentWindow()||window;n.btMaster.btDialogs.setMethodOnPageToExecuteBeforeClose(function(){btMaster.redirect(n,e)})},addQSVarInDialogOpener:function(e,n,t){return e.replace(/(src: '.*?)(')/g,"$1&"+n+"="+t+"'")},replaceQSVarInDialogOpener:function(e,n,t,r){var a=new RegExp(n+"="+t,"i");return e=e.replace(a,n+"="+r)},launchQuickAddDialog:function launchQuickAddDialog(openerString){"undefined"!=typeof AsyncJobPickerHelper&&AsyncJobPickerHelper.jobPickerExists()&&0<=AsyncJobPickerHelper.getSelectedJobId()?eval(openerString.replace("{JOB_ID}",AsyncJobPickerHelper.getSelectedJobId())):openerString.includes("jobIDs")||openerString.includes("ReactDialogHandler")&&openerString.includes("JOB_ID")?eval(openerString.replace("{JOB_ID}","")):btToastMessages.error("An error has occurred launching Quick Add.")}}}(),showSavedSuccessful:function(e){$(e).show().delay(1250).fadeOut(2250)},addPlaceHolder:function(e){if($.support.placeholder=!1,"placeholder"in document.createElement("input")&&($.support.placeholder=!0),!$.support.placeholder){var n=document.activeElement;$("input#"+e).each(function(e,n){0==$(this).val().length&&$(this).addClass("hasPlaceholder")}),$("input#"+e).focus(function(){""!=$(this).attr("placeholder")&&$(this).val()==$(this).attr("placeholder")&&$(this).val("").removeClass("hasPlaceholder")}).blur(function(){""==$(this).attr("placeholder")||""!=$(this).val()&&$(this).val()!=$(this).attr("placeholder")||$(this).val($(this).attr("placeholder")).addClass("hasPlaceholder")}),$(":text").blur(),$(n).focus(),$("form").submit(function(){$(this).find(".hasPlaceholder").each(function(){$(this).val("")})})}},isNullOrWhiteSpace:function(e){return null==e||null!==e.match(/^ *$/)},redirect:function(e,n){e.location=n},redirectToPortal:function(e,n){var t=$("#"+e);if(t.length||t.val()===n){var r=t.attr(Global.Constants.Logins.LoginsConstants.PortalSwitchAttr);r&&(btMaster.ShowProcessingSpinnerForPostbacks(),btMaster.redirect(window,r))}},showDeleteUploadPhoto:function(){btMaster.isMobile()&&$(".detailsPhotoThumbNailContainer .buttonContainer").show(),$(".detailsPhotoThumbNailContainer").each(function(){$(this).mouseenter(function(){$(this).find(".buttonContainer").show()}),$(this).mouseleave(function(){$(this).find(".buttonContainer").hide(),""!==$(this).find("input[type='file']").val()&&$(this).find(".buttonContainer").show()})})},getHostName:function(){var e=window.location.origin;return e||(e=window.location.protocol+"//"+window.location.hostname+(window.location.port?":"+window.location.port:"")),e},prettyPrintNames:function(e,n,t,r){for(var a="",o=0,i=e.length;o<i;o++){if(1===i){a+=e[o].trim()+r;break}a+=2<i?o===i-1?t+e[o].trim()+r:0===o?e[o].trim():n+e[o].trim():0===o?e[o].trim():t+e[o].trim()+r}return a},scrollToElement:function(e,n,t){var r=$(window).height(),a=e.offset().top+e.outerHeight();$("html, body").animate({scrollTop:a-r+n},t)},toJSON:function(e,t){return ko.toJSON(e,function(e,n){return-1<t.indexOf(e)?void 0:n})},isUndefined:function(e){return void 0===e},isEmptyObject:function(e){return 0===Object.keys(e).length&&e.constructor===Object},placesAndMapsApiLoaded:function(){ko.postbox.publish("placesAndMapsApiLoaded",!0),btMaster.isPlacesAndMapsApiLoaded=!0},getIPInfoJson:function(){return $.getJSON("http://api.ipstack.com/check?access_key=d887dc0e08888fa95bec60adc1764040",function(e){ko.postbox.publish("ipInfoReceived",e)})},default:function(e,n){return this.isUndefined(e)||null===e?n:e},setSidebarSize:function(e){var n=document.getElementById("reactJobPickerPlaceholder"),t=window.getGlobalValues().loginTypeInt===Global.Enums.BTLoginTypes.SUBS;try{if(e)n.style.width="25px";else{var r=localStorage.getItem("bt-number-sidebarWidth")||localStorage.getItem("sidebarWidth")||250;n.style.width=t?r?r+"px":"224px":r?r+"px":"250px"}}catch(e){n.style.width="250px"}}}}(),window.jsValidations={costCodeExists:function(e,n){var t=parseInt(n.Value);-1!==t?WebApiHandler.get("/api/costcodes/"+t+"/exists",null,function(e){e.success&&1==e.data?n.IsValid=!0:n.IsValid=!1},function(e){n.IsValid=!1},function(e){n.IsValid=!1},!1):0<=e.id.indexOf("cuvCostCodeExists")||void 0===e.class||0<=e.class.indexOf("cuvCostCodeExists")?n.isValid=!0:n.IsValid=!1},isValidEmailAddress:function(e){var n=!1;return""!=e.replace(/\s/g,"")&&(n=new RegExp(Global.Constants.RegexStrings.EmailRegexJavascript,"i").test(e)),n},getExtension:function(e){var n=e.split(".");return n[n.length-1]},checkMediaType:function(e,n){var t=jsValidations.getExtension(e);return 0<=n.replace(/\./g,"").split(",").indexOf(t.toLowerCase())},isAllowedFileType:function(e){return this.checkMediaType(e,Global.Constants.UploadFile_Basic.AllAllowedFileTypes)},isPhotoFile:function(e){return this.checkMediaType(e,Global.Constants.UploadFile_Basic.AllowedPhotoTypes)},isDocumentFile:function(e){return this.checkMediaType(e,Global.Constants.UploadFile_Basic.AllowedDocumentTypes)},isVideoFile:function(e){return this.checkMediaType(e,Global.Constants.UploadFile_Basic.AllowedVideoTypes)},elementExists:function(e){var n=!1;return $(e).length?n=!0:document.getElementById(e)&&(n=!0),n},hasKnockout:function(){return window.ko}},window.btDateTimeHandler={removeTimeZoneReturnISO:function(e){var n=new Date(e);if(isNaN(n))throw new Error("input not date");return new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds())).toISOString().replace("Z","")},dateToShortDateString:function(e){var n=new Date(e);return $.datepicker.formatDate(window.getGlobalValues().builderShortDateFormat,n)},compareDateToListOfDates:function(e,n,t){var r=!1,a={startDate:e,inWithTimes:JSON.parse(n),checkTimesOnly:t};return WebApiHandler.get("/api/Calendar/CompareDateToListOfDates?data="+JSON.stringify(a),null,function(e){r=e.data.booleanResponse},function(e){alert(e.message)},function(e){alert("Service call failed")},!1),r},compareDates:function(e,n,t){var r={Dates:[btDateTimeHandler.localDateStringToWebApi(n)],CheckCompareType:t};return btDateTimeHandler.compareDateToListOfDates(e,JSON.stringify(r),!1)},parseDate:function(e){return new Date(e)},dateFromWebApi:function(e){return new Date(this.momentFromWebApi(e))},momentFromWebApi:function(e){return moment(e)},localDateStringToWebApi:function(e,n){var t;if(""!==e&&(t=n?btDateTimeHandler.localDateStringToMoment(e):btDateTimeHandler.localDateTimeStringToMoment(e)).isValid)return btDateTimeHandler.localMomentToWebApi(t);return null},localMomentToWebApi:function(e){return e.format("YYYY-MM-DDTHH:mm:ss")},localDateTimeStringToMoment:function(e){var n=window.getGlobalValues().builderShortDateFormatForMoment+" "+window.getGlobalValues().builderTimeFormatForMoment,t=window.getGlobalValues().builderShortDateFormatForMoment.replace(/YYYY/,"YY")+" "+window.getGlobalValues().builderTimeFormatForMoment,r=n.substring(0,n.lastIndexOf(" ")),a=t.substring(0,t.lastIndexOf(" "));return moment(e,[t,n,r,a])},localDateStringToMoment:function(e){return moment(e,[window.getGlobalValues().builderShortDateFormatForMoment.replace(/YYYY/,"YY"),window.getGlobalValues().builderShortDateFormatForMoment])},momentMobileTimeParseFormat:function(){return"YYYY-MM-DDTHH:mm:ss +-HH:mm"},momentMobileTimeOutputFormat:function(){return"YYYY-MM-DDTHH:mm:ss Z"},getMonthName:function(e){return new Array("January","February","March","April","May","June","July","August","September","October","November","December")[e]},getMonthAbbrevName:function(e){return btDateTimeHandler.getMonthName(e).substr(0,3)},getDateWithoutTime:function(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate())},getDayOfWeekName:function(e){return new Array("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")[e]},getDayOfWeekAbbrevName:function(e){return btDateTimeHandler.getDayOfWeekName(e).substr(0,3)},convertDateToMoment:function(e){return 0<=(e=e.replace(/[ /.-]/g,window.getGlobalValues().dateSeperator)).indexOf("T")&&(e=btDateTimeHandler.dateToShortDateString(btDateTimeHandler.momentFromWebApi(e).toDate())),moment(e,window.getGlobalValues().builderShortDateFormatForMoment,!0)},convertApStyleDateToMoment:function(e){return e=Date.parse(e.replace(/[/.]/g,"")),moment(e)},convertMomentToAPStyle:function(e){var n=e.format("MMMM D, YYYY").split(" "),t=n[0];return 5<t.length&&(n[0]=t.substring(0,3)+"."),n[0]+" "+n[1]+" "+n[2]}},window.btStringHandler={format:function(e){if(arguments.length<=1)return e;for(var n=arguments.length-2,t=0;t<=n;t++)e=e.replace(new RegExp("\\{"+t+"\\}","gi"),arguments[t+1]);return e},formatFileSize:function(e){var n=0==e?0:Math.floor(Math.log(e)/Math.log(1024));return 0==n?"0 KB":1*(e/Math.pow(1024,n)).toFixed(1)+" "+["B","KB","MB","GB","TB"][n]},abbreviate:function(e,n,t){return e&&""!==e?(t||(t=""),e.length>n?e.substr(0,n-t.length)+t:e):""},newLineToHtmlBr:function(e,n){return(e+"").replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g,"$1"+(n||void 0===n?"<br />":"<br>")+"$2")},replaceAt:function(e,n,t){return e.substr(0,n)+t+e.substr(n+t.length)},truncate:function(e,n){var t=e;return void 0===t?"":(t.length>n+3&&(t=e.substring(0,n)+"..."),t)},maxLength:function(e,n){var t=n||$(this),r=e.data.maxLength,a=t.val(),o=a.length,i=0;for(i=a.indexOf("\n",i);-1!==i;)o+=1,i=a.indexOf("\n",i+1);return!(r-o<0&&(t.val(t.val().substring(0,t.val().length-(o-r))),t.change(),1))},escapeHtml:function(e){return encodeURIComponent(e).replace(/'/g,"%27")},pluralise:function(e,n,t){return 1<e||0==e?t:n},capitalize:function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},window.headerScripts_revealModal=function(e){window.onscroll=function(){document.getElementById(e).style.top=document.body.scrollTop},document.getElementById(e).style.display="block",document.getElementById(e).style.top=document.body.scrollTop},window.headerScripts_hideModal=function(e){document.getElementById(e).style.display="none"},window.textCounter=function(e,n,t){e.value.length>t?e.value=e.value.substring(0,t):n.value=t-e.value.length},window.getPreviewQString=function(){var e="?";return e+="title="+escape(document.getElementById("txtTemplateTitle").value),e+="&use="+document.getElementById("chkUseTemplate").checked,e+="&colorID="+document.getElementById("lstTemplateColor").value,e+="&subID="+document.getElementById("lstTemplateSub").value,e+="&designID="+document.getElementById("lstTemplateDesign").value},window.checkprice=function(e,n){var t=e;if(isNaN(t.value))return alert("You May Only Enter Numbers For "+n+"!"),t.value="0",t.select(),!1},window.retreiveDivScrollPos=function(e){return $("#"+e).val()},window.updateScrollPosition=function(e,n){$("#"+n).val($("#"+e).scrollTop()+","+$("#"+e).scrollLeft())},window.rescrollDiv=function(e,n){var t=window.retreiveDivScrollPos(n);void 0!==t&&"0,0"!=t&&($("#"+e).scrollTop(t.split(",")[0]),$("#"+e).scrollLeft(t.split(",")[1]),$("#"+n).val("0,0"))},window.GetSingleSelectedValue=function(e){var n=$("#"+e+" :selected");if(0==n.length)return-1;if(1==n.length)return n.val();if(2!=n.length)return-1;var t=n[0].value,r=n[1].value;return"-1"==t?r:"-1"==r?t:-1},window.btServerVariables=(fs=!1,{setInMobileApp:function(e){fs=e},IsInMobileApp:function(){return fs},isIOS_InNativeApp:function(){return btMaster.isiDevice()&&window.btServerVariables.IsInMobileApp()},isAndroid_InNativeApp:function(){return btMaster.isAndroid()&&window.btServerVariables.IsInMobileApp()}}),window.QSHandler={GetVarFromThisURL:function(e,n){for(var t=n.substring(n.indexOf("?")+1).split("&"),r=0;r<t.length;r++){var a=t[r].split("=");if(a[0].toLowerCase()==e.toLowerCase())return unescape(a[1])}return""},GetVar:function(e){return QSHandler.GetVarFromThisURL(e,window.location.href)},GetInt:function(e,n){var t=QSHandler.GetVar(e);if(isNaN(t)||""===t&&void 0===n)throw"QSHandler.GetInt could not convert the key:value '"+e+"':'"+t+"' to an int.";return""===t&&void 0!==n?n:parseInt(t)},GetBoolean:function(e,n){var t=QSHandler.GetVar(e);if("true"!==t&&"false"!==t&&""!==t)throw"QSHandler.GetBoolean could not convert the key:value '"+e+"':'"+t+"' to an boolean.";return""===t?n:"true"===t},TryParse:function(e,n){return 0<n.toLowerCase().indexOf(e.toLowerCase())?QSHandler.GetVarFromThisURL(e,n):""},WriteQSVariable:function(e,n){return e+"="+n},Exists:function(e){return 0<QSHandler.GetVar(e).length},AddQSVariable:function(e,n){var t=window.location.href;t+=-1===t.indexOf("?")?"?":"&",t+=e+"="+n;var r=$("#aspnetForm").attr("action");r+=-1===r.indexOf("?")?"?":"&",r+=e+"="+n,window.history.replaceState("",document.title,t),$("#aspnetForm").attr("action",r)},UpdateQSVariable:function(e,n,t){var r=new RegExp(e+"(.+?)(&|$)","g"),a=t||window.location.href;return a=a.replace(r,e+"="+n+"$2"),void 0===t&&window.history.pushState("","",a),a},UpdateOrAddQueryStringParameter:function(e,n,t){var r=new RegExp("([?&])"+n+"=.*?(&|$)","i"),a=-1!==e.indexOf("?")?"&":"?";return e.match(r)?e.replace(r,"$1"+n+"="+t+"$2"):e+a+n+"="+t},RemoveQueryStringParams:function(){var e=window.location.href.split("?")[0];window.history.pushState("","",e),$("#aspnetForm").attr("action",$("#aspnetForm").attr("action").split("?")[0])},RemoveQueryStringParam:function(e){var n=$("#aspnetForm").attr("action").split("?")[0],t=window.location.href.split("?");if(1<t.length&&-1!==t[1].indexOf(e)){var r=new RegExp(e+"(.+?)(&|$)","g");t[1]=t[1].replace(r,""),"&"===t[1][t[1].length-1]&&(t[1]=t[1].slice(0,-1)),0<t[1].length?(window.history.replaceState("",document.title,t.join("?")),$("#aspnetForm").attr("action",n+"?"+t[1])):(window.history.replaceState("",document.title,t[0]),$("#aspnetForm").attr("action",n))}},CreateQueryStringFromDictionary:function(e,n){var t=e;return"object"==_typeof(n)&&(t+="?",$.each(n,function(e,n){"?"!==t.slice(-1)&&(t+="&"),t+=e+"="+n})),t},SyncQueryStringParams:function(){var e=window.location.href;$("#aspnetForm").attr("action",e)}},void 0!==window.getGlobalValues()){var _require=__webpack_require__("./node_modules/broadcast-channel/dist/es/index.js"),broadcastchannel=_require.BroadcastChannel,BTBroadcastChannelInternal=function(e){_inherits(r,broadcastchannel);var n,t=_createSuper(r);function r(){return _classCallCheck(this,r),t.apply(this,arguments)}return _createClass(r,[{key:"postMessage",value:(n=_asyncToGenerator(_regeneratorRuntime().mark(function e(n){return _regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,_get(_getPrototypeOf(r.prototype),"postMessage",this).call(this,{data:n});case 2:case"end":return e.stop()}},e,this)})),function(e){return n.apply(this,arguments)})}]),r}();window.BTBroadcastChannel=window.BroadcastChannel||BTBroadcastChannelInternal}if(window.btNumeric=__webpack_require__("./jscript/bt-numeric.js"),window.btFileUtils=__webpack_require__("./jscript/Media/bt-file-utils.js"),window.btSorting={naturalSort:function(e,n){function t(e){for(var n,t,r=new Array,a=0,o=-1,i=0;n=(t=e.charAt(a++)).charCodeAt(0);){var l=46==n||48<=n&&n<=57;l!==i&&(r[++o]="",i=l),r[o]+=t}return r}for(var r=t(e),a=t(n),o=0;r[o]&&a[o];o++)if(r[o]!==a[o]){var i=Number(r[o]),l=Number(a[o]);return i==r[o]&&l==a[o]?i-l:r[o]>a[o]?1:-1}return r.length-a.length}},window.btCollectionHandler={mapDictionaryToArray:function(e,n){var t=[];for(var r in e)e.hasOwnProperty(r)&&(n&&(r=parseInt(r)),t.push({key:r,value:e[r]}));return t}},$(document).on("click",function(e){if(2==e.which&&$(e.target).is("a[href]")&&e.target.classList.contains("tab")){e.preventDefault();var postBackEvent=e.target.href;return postBackEvent&&eval(postBackEvent),!1}}),$(window).on("focus",function(){try{window.localStorage.getItem(BTStorage.Keys.General.SelectedJobID)!==window.sessionStorage.getItem(BTStorage.Keys.General.SelectedJobID)&&console.log("jobId mismatch")}catch(e){}}),$(document).ready(function(){$("a.tab,.nav a").on("click",function(){setTimeout(function(){$(window).trigger("resize")})}),$("body").on("click",function(e){0===$(e.target).parents(".popover").length&&$('.popover[role="tooltip"]').each(function(){$(this).popover("hide")})}),/firefox/i.test(navigator.userAgent)&&(window.oldGetComputedStyle=window.getComputedStyle,window.getComputedStyle=function(e,n){var t=window.oldGetComputedStyle(e,n);return null===t?{getPropertyValue:function(){}}:t});var e=QSHandler.GetVar("successToast");e&&(QSHandler.RemoveQueryStringParam("successToast"),btToastMessages.success(e));var n=QSHandler.GetVar("errorToast");n&&(QSHandler.RemoveQueryStringParam("errorToast"),btToastMessages.error(n))}),"object"===("undefined"==typeof localStorage?"undefined":_typeof(localStorage)))try{localStorage.setItem("localStorage",1),localStorage.removeItem("localStorage")}catch(e){Storage.prototype._setItem=Storage.prototype.setItem,Storage.prototype.setItem=function(){},alert("You have reached your local storage limit. Clear your browsing history to continue.")}window.isIE11=!!window.MSInputMethodContext&&!!document.documentMode,window.pageHasDynamicGrid=$(".ui-jqgrid-btable:visible"),window.fixFlexWrapCheck=function(){window.isIE11&&window.pageHasDynamicGrid&&(window.fixFlexWrap(),console.log("IE11 and no Grid"))},window.fixFlexWrap=function(){$(".fix-flex-wrap").each(function(){var e=$(this);e.hide(),e.width("auto");var n=$(this).parent().width();e.width(n),e.show()})},window.btToastMessages=(gu=function(e,n,t,r){var a={};Object.assign(a,toastr.options,t),a.showIcon||(a.toastClass+=" toastr-hideIcons"),toastr[e](n,r,a)},{success:function(e,n,t){gu("success",e,n,t)},error:function(e,n,t){gu("error",e,n,t)},warning:function(e,n,t){gu("warning",e,n,t)},info:function(e,n,t){gu("info",e,n,t)}}),window.ResultFilterPubSubKeys={ResultFilterReady:"rs_1",ResultFilterControlIds:"rs_2",ResultFiltersNeedsRefresh:"rs_3"},window.ResultFilterReadyCallbackArgs=function(e){var n=this;n.selectedJobId=e.selectedJobId||0,n.allJobsSelected=e.allJobsSelected,n.filters=e.filters,n.jobCount=e.jobCount,n.hasJobChanged=e.hasJobChanged,n.resetToPageOne=e.resetToPageOne},window.ResultFilterControlIdsCallbackArgs=function(e){this.controlIds=e.controlIds},window.ConversationDetails={load:function(e,n,t,r,a,o,i,l,s,d,c){void 0!==i||e||n||(i=AsyncJobPickerHelper.getSelectedJobId()),void 0===c&&(c=parseInt(window.getGlobalValues().getBuilderId)),window.ReactDialogHandler.Conversation.OpenDetails(e,n,c,i,a)}}},"./jscript/masterPage/rootMaster.js":function(e,n,t){t("./node_modules/babel-polyfill/lib/index.js"),t("./node_modules/script-loader/index.js!./jQuery/jquery.js"),t("./node_modules/script-loader/index.js!./jQuery/jquery-btextensions.js"),t("./node_modules/script-loader/index.js!./jQuery/jquery.cookie.js"),t("./node_modules/script-loader/index.js!./jQuery/jquery.autosize.js"),t("./node_modules/script-loader/index.js!./jQuery/throttle/throttle.min.js"),t("./node_modules/script-loader/index.js!./node_modules/timeago/jquery.timeago.js"),t("./node_modules/script-loader/index.js!./jQuery/Bootstrap/bootstrap-3.3.7.min.js"),t("./node_modules/script-loader/index.js!./jQuery/jQuery-ui/jquery-ui.min.js"),t("./node_modules/script-loader/index.js!./jQuery/knockout/knockout-latest.js"),t("./node_modules/script-loader/index.js!./jQuery/knockout/knockout.mapping-latest.js"),t("./node_modules/script-loader/index.js!./jQuery/knockout/knockout-postbox.js"),t("./node_modules/script-loader/index.js!./jQuery/knockout/knockout-bt.js"),t("./node_modules/script-loader/index.js!./jQuery/knockout/knockout.validation.js"),t("./node_modules/script-loader/index.js!./jQuery/knockout/knockout.validation-bt.js"),t("./node_modules/script-loader/index.js!./jscript/BTStorage.js"),t("./node_modules/script-loader/index.js!./jscript/textAreaMaxLength.js"),t("./jscript/headerScripts_Global.js"),t("./node_modules/script-loader/index.js!./jscript/ScrollTopTab.js"),t("./node_modules/script-loader/index.js!./jscript/ServiceMessage.js"),t("./node_modules/script-loader/index.js!./jscript/ReversibleUIRemover.js"),t("./node_modules/script-loader/index.js!./jscript/JobsiteSlider.js"),t("./node_modules/script-loader/index.js!./jscript/ColorPickerDropDown.js"),t("./jscript/AsyncJobPicker.js"),t("./node_modules/script-loader/index.js!./jQuery/momentjs-2.6.0/moment.min.js"),t("./node_modules/script-loader/index.js!./jscript/WebApiHandler.js"),t("./node_modules/script-loader/index.js!./jscript/BTGoogleAnalytics.js"),t("./node_modules/autotrack/autotrack.js"),window.CKEDITOR_BASEPATH=btMaster.getHostName()+"/jQuery/ckeditor/",t("./jQuery/ckeditor/ckeditor.js"),t("./jQuery/ckeditor/adapters/jquery.js"),t("./jQuery/jquery.contextMenu.js"),t("./node_modules/script-loader/index.js!./jQuery/fancyBox-2.1.4/jquery.fancybox.js"),t("./node_modules/script-loader/index.js!./jscript/btFancyBox.js"),t("./node_modules/script-loader/index.js!./jscript/React/ReactDialogHandler.js")},"./jscript/masterPage/rootMasterWebforms.js":function(e,n,t){t("./jscript/masterPage/rootMaster.js"),t("./css/masterPage/rootMasterStyles.scss")},"./node_modules/script-loader/index.js!./jQuery/jquery-btextensions.js":function(e,n,t){t("./node_modules/script-loader/addScript.js")(t("./node_modules/script-loader/node_modules/raw-loader/index.js!./jQuery/jquery-btextensions.js"))},"./node_modules/script-loader/index.js!./jQuery/knockout/knockout-bt.js":function(e,n,t){t("./node_modules/script-loader/addScript.js")(t("./node_modules/script-loader/node_modules/raw-loader/index.js!./jQuery/knockout/knockout-bt.js"))},"./node_modules/script-loader/index.js!./jQuery/knockout/knockout.validation-bt.js":function(e,n,t){t("./node_modules/script-loader/addScript.js")(t("./node_modules/script-loader/node_modules/raw-loader/index.js!./jQuery/knockout/knockout.validation-bt.js"))},"./node_modules/script-loader/index.js!./jQuery/throttle/throttle.min.js":function(e,n,t){t("./node_modules/script-loader/addScript.js")(t("./node_modules/script-loader/node_modules/raw-loader/index.js!./jQuery/throttle/throttle.min.js"))},"./node_modules/script-loader/index.js!./jscript/BTGoogleAnalytics.js":function(e,n,t){t("./node_modules/script-loader/addScript.js")(t("./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/BTGoogleAnalytics.js"))},"./node_modules/script-loader/index.js!./jscript/BTStorage.js":function(e,n,t){t("./node_modules/script-loader/addScript.js")(t("./node_modules/script-loader/node_modules/raw-loader/index.js!./jscript/BTStorage.js"))},"./node_modules/script-loader/index.js!./jscript/ColorPickerDropDown.js":function(e,n,t){t("./node_modules/script-loader/addScript.js")(t("./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/ColorPickerDropDown.js"))},"./node_modules/script-loader/index.js!./jscript/JobsiteSlider.js":function(e,n,t){t("./node_modules/script-loader/addScript.js")(t("./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/JobsiteSlider.js"))},"./node_modules/script-loader/index.js!./jscript/React/ReactDialogHandler.js":function(e,n,t){t("./node_modules/script-loader/addScript.js")(t("./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/React/ReactDialogHandler.js"))},"./node_modules/script-loader/index.js!./jscript/ReversibleUIRemover.js":function(e,n,t){t("./node_modules/script-loader/addScript.js")(t("./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/ReversibleUIRemover.js"))},"./node_modules/script-loader/index.js!./jscript/ScrollTopTab.js":function(e,n,t){t("./node_modules/script-loader/addScript.js")(t("./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/ScrollTopTab.js"))},"./node_modules/script-loader/index.js!./jscript/ServiceMessage.js":function(e,n,t){t("./node_modules/script-loader/addScript.js")(t("./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/ServiceMessage.js"))},"./node_modules/script-loader/index.js!./jscript/WebApiHandler.js":function(e,n,t){t("./node_modules/script-loader/addScript.js")(t("./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/WebApiHandler.js"))},"./node_modules/script-loader/index.js!./jscript/textAreaMaxLength.js":function(e,n,t){t("./node_modules/script-loader/addScript.js")(t("./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/textAreaMaxLength.js"))},"./node_modules/script-loader/node_modules/raw-loader/index.js!./jQuery/jquery-btextensions.js":function(e,n){e.exports='\r\n(function ($) {\r\n    $.fn.bt_toggleDisabled = function () {\r\n        return this.each(function () {\r\n            //\'this.disabled = !this.disabled;\r\n            if (this.disabled) {\r\n                $(this).removeAttr("disabled");\r\n            }\r\n            else {\r\n                $(this).attr("disabled", true);\r\n            }\r\n\r\n        });\r\n    };\r\n})(jQuery);\r\n\r\n\r\n(function ($) {\r\n    $.fn.bt_toggleChecked = function () {\r\n        return this.each(function () {\r\n            $(this).attr("checked", !this.checked);\r\n        });\r\n    };\r\n})(jQuery);\r\n\r\n\r\n(function ($) {\r\n    $.fn.bt_toggleDisabledAndChecked = function () {\r\n        return this.each(function () {\r\n            $(this).bt_toggleDisabled();\r\n            $(this).bt_toggleChecked();\r\n        });\r\n    };\r\n})(jQuery);\r\n\r\n(function ($) {\r\n    $.fn.bt_appendClassOnce = function (theClass) {\r\n        return this.each(function () {\r\n            var thisClassList;\r\n            thisClassList = $(this).attr("class") ? $(this).attr("class") : "";\r\n            $(this).attr("class", thisClassList + " " + theClass);\r\n        });\r\n    };\r\n})(jQuery);\r\n\r\n(function ($) {\r\n    $.fn.bt_removeClassOnce = function (theClass) {\r\n        return this.each(function () {\r\n            var thisClassList;\r\n            thisClassList = $(this).attr("class") ? $(this).attr("class") : "";\r\n            thisClassList = thisClassList.replace(theClass, "").trim();\r\n            $(this).attr("class", thisClassList);\r\n        });\r\n    };\r\n})(jQuery);\r\n'},"./node_modules/script-loader/node_modules/raw-loader/index.js!./jQuery/knockout/knockout-bt.js":function(e,n){e.exports="(function () {\r\n    var _dragged;\r\n\r\n    bindingHelpers = function () {\r\n        return {\r\n            generateToolTipContent: function (value) {\r\n                var html = \"<div style='min-width: 200px;'>\";\r\n                value = ko.utils.unwrapObservable(value);\r\n                if (value.photos) {\r\n                    var count = value.photos.length;\r\n                    var photoPluralization = count == 1 ? 'photo' : 'photos';\r\n                    html += \"<div class='header'><div><span style='font-weight: bold'>\" + count + \"</span> \" + photoPluralization;\r\n                    if (value.canAdd && count < 4) {\r\n                        html += \"<div class='newPhotoLink'> + Add New Photo</div>\";\r\n                        html += \"<div style='clear: both'></div>\"\r\n                    }\r\n                    html += \"</div></div>\";\r\n                    html += '<div class=\"photoContents\">';\r\n                    value.photos.forEach(function (i) {\r\n                        html += \"<div class='photoSingle' style='background: url(\\\"\" + i + \"\\\") center; width: 100px; height: 100px; background-size: cover;display: inline-block; margin: 0 5px;'></div>\"\r\n                    });\r\n                    html += '</div>';\r\n                }\r\n\r\n                html += '</div>';\r\n                return html;\r\n            },\r\n            addToolTipNewPhotoClickBinding: function (api, valueAccessor) {\r\n                var $newPhotoButton = $(api.elements.tooltip).find('.newPhotoLink');\r\n                $newPhotoButton.unbind('click');\r\n                $newPhotoButton.click(ko.utils.unwrapObservable(valueAccessor()).clickEvent);\r\n            }\r\n        }\r\n    }()\r\n\r\n    ko.bindingHandlers.drag = {\r\n        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n            var bindingData = allBindingsAccessor.get('drag');\r\n            var dragElement = $(element);\r\n\r\n            var dragOptions = {\r\n                helper: bindingData.helper,\r\n                cursor: \"move\",\r\n                cursorAt: { top: 12, left: 3 },\r\n                revert: \"invalid\",\r\n                distance: 30,\r\n                start: function () {\r\n                    _dragged = bindingData.onStart();\r\n                }\r\n            };\r\n            dragElement.draggable(dragOptions).disableSelection();\r\n\r\n            if (!bindingData.allow) {\r\n                dragElement.draggable('disable');\r\n            }\r\n        },\r\n        update: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n            var bindingData = allBindingsAccessor.get('drag');\r\n            var dragElement = $(element);\r\n\r\n            if (!bindingData.allow) {\r\n                dragElement.draggable('disable');\r\n                dragElement.removeClass('ui-state-disabled');\r\n            } else {\r\n                dragElement.draggable('enable');\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.drop = {\r\n        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n            var dropElement = $(element);\r\n            var bindingData = allBindingsAccessor.get('drop');\r\n            if (bindingData.allow) {\r\n                var dropOptions = {\r\n                    hoverClass: bindingData.hoverClass,\r\n                    drop: function () { bindingData.dropped(_dragged) }\r\n                };\r\n                dropElement.droppable(dropOptions);\r\n            }\r\n        }\r\n    };\r\n\r\n    //Replace the ko.options binding with chosen functionality\r\n    ko.bindingHandlers.chosenDropdownWithOptions = {\r\n        //'after': ['value'],\r\n        init: function (element, valueAccessor, allBindings) {\r\n            ko.bindingHandlers.options.init(element);\r\n            //Chosen is not supported on mobile\r\n            if (!btMaster.isMobile()) {\r\n                var chosenInitOptions = allBindings().chosenOptions || {};\r\n                $(element).chosen(chosenInitOptions);\r\n                if (typeof chosenInitOptions.width === 'undefined') {\r\n                    //Chosen initializes with width set to 0px unless specified\r\n                    //Set width to element width\r\n                    $($(element.parentElement).find('.chosen-container.chosen-container-single')[0]).width($(element).width());\r\n                }\r\n                allBindings().value.subscribe(function () {\r\n                    $(element).trigger('chosen:updated');\r\n                });\r\n\r\n                setTimeout(function () {\r\n                    // I assume these chosen triggers are needed to be done in a setTimeout because KO does some DOM modification after init and update are called\r\n                    // meaning that without a timeout, chosen reads non-updated DOM, and with a timeout, chosen reads the updated DOM\r\n                    $(element).val(allBindings().value());\r\n                    $(element).trigger('chosen:updated');\r\n                }, 0);\r\n            }\r\n        },\r\n        update: function (element, valueAccessor, allBindings) {\r\n            ko.bindingHandlers.options.update(element, valueAccessor, allBindings);\r\n            if (!btMaster.isMobile()) {\r\n                setTimeout(function () {\r\n                    // Read comment above\r\n                    $(element).trigger('chosen:updated');\r\n                }, 0);\r\n            }\r\n        }\r\n    };\r\n\r\n    // use this binding if you don't want your dropdown to get the chosen transformation on page load\r\n    // i.e. you are adding dynamic drop downs to the page\r\n    ko.bindingHandlers.chosenDropdownNoOptions = {\r\n        init: function (element, valueAccessor) {\r\n            var options = valueAccessor().chosenOptions || {};\r\n            $(element).chosen(options);\r\n        },\r\n        update: function (element, valueAccessor) {\r\n            var val = valueAccessor().val || {};\r\n            ko.utils.unwrapObservable(val);\r\n\r\n            btDropDownList.refresh($(element));\r\n        }\r\n    };\r\n\r\n    // use this binding to update the chosen drop down display value after the binding observable updates\r\n    ko.bindingHandlers.updateChosenSelect = {\r\n        update: function (element, valueAccessor) {\r\n            ko.utils.unwrapObservable(valueAccessor());\r\n            if (typeof BTDropDownList !== 'undefined') {\r\n                btDropDownList.refresh($(element));\r\n            } else {\r\n                $(element).trigger('chosen:updated');\r\n            }\r\n        }\r\n    };\r\n\r\n    // Use this binding to enable/disable a dropDownList.\r\n    ko.bindingHandlers.chosenEnable = {\r\n        update: function (element, valueAccessor) {\r\n            ko.utils.unwrapObservable(valueAccessor());\r\n            $(element).prop('disabled', !valueAccessor()).trigger('chosen:updated');\r\n        }\r\n    };\r\n\r\n    // You can use this binding to turn a html select list into multiselect dropdown with ko bindings\r\n    //Must have multiple=\"multiple\" specified on your select element. It is also good to set a width otherwise the dropdown can be initialized with 0 width sometimes\r\n    //EX: <select id=\"lstLockSelections\" multiple=\"multiple\" style=\"width:250px\" data-bind=\"options: selections, updateMultiSelect: selections, optionsText: 'title', optionsValue: 'selectionId', multiSelectSelectedOptions: currentSelectionsValue, enable: selections().length > 0, multiSelectInitOptions: { noneSelectedText: 'No Selections available to lock' }\" />\r\n    //Use multiselectSelectedOptions binding  to keep track of your checked values\r\n    //May need to include <%: BundleConfig.BundleHtml(BundleConfig.UserControlIncludes.MultiSelect) %>    <%: BundleConfig.BundleHtml(BundleConfig.UserControlCssIncludes.MultiSelect) %>\r\n    ko.bindingHandlers.updateMultiSelect = {\r\n        init: function (element, valueAccessor, allBindings) {\r\n            var initOptions = allBindings().multiSelectInitOptions || {}; //use multiSelectInitOptions binding to pass in any multiselect options you need\r\n            var filterOptions = allBindings().multiSelectFilterOptions || {}; //use multiSelectFilterOptions binding to pass in filter options\r\n\r\n            var defaultOptions = { classes: \"btMultiSelect\", noneSelectedText: \"-- No Items Selected --\", multiple: true };\r\n            Object.assign(initOptions, defaultOptions, initOptions); // merge with default options\r\n\r\n            var defaultFilterOptions = {\r\n                label: '',\r\n                placeholder: '',\r\n                autoReset: true,\r\n                includeFilter: true  //use this option to include/hide search box\r\n                //filter: function(event, matches){}   Callback function that fires after filter is complete\r\n            };\r\n            Object.assign(filterOptions, defaultFilterOptions, filterOptions); // merge with default options\r\n\r\n            var m = $(element).multiselect(initOptions);\r\n            if (filterOptions.includeFilter) { m.multiselectfilter(filterOptions); }\r\n\r\n        },\r\n        update: function (element, valueAccessor, allBindings) {\r\n            ko.utils.unwrapObservable(valueAccessor());\r\n            $(element).multiselect('refresh');\r\n            if (typeof allBindings().enable !== 'undefined') {\r\n                var isEnabled = ko.utils.unwrapObservable(allBindings().enable);\r\n                $(element).multiselect(isEnabled ? 'enable' : 'disable');\r\n            }\r\n        }\r\n    }\r\n\r\n    //Best used alongside updateMultiSelect binding\r\n    ko.bindingHandlers.multiSelectSelectedOptions = {\r\n        init: function (element, valueAccessor) {\r\n            ko.bindingHandlers.selectedOptions.init(element, valueAccessor);\r\n        },\r\n        update: function (element, valueAccessor, allBindings) {\r\n            ko.bindingHandlers.selectedOptions.update(element, valueAccessor, allBindings);\r\n            $(element).multiselect('refresh');\r\n        }\r\n    };\r\n\r\n    /// <summary>\r\n    /// Updates the selected attribute on an option inside chosen. Initially used for a chosen\r\n    /// with optgroups. Has not been tested with a chosen with no optgroups.\r\n    /// </summary>\r\n    ko.bindingHandlers.chosenOptionSelected = {\r\n        update: function (element, valueAccessor, allBindings) {\r\n            ko.utils.unwrapObservable(valueAccessor());\r\n            $(element).prop('selected', valueAccessor()).trigger('chosen:updated');\r\n        }\r\n    }\r\n\r\n\r\n    ko.bindingHandlers.btGridSort = {\r\n        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n            var sortElement = $(element);\r\n            var bindingData = allBindingsAccessor.get('btGridSort');\r\n            var parentTable = sortElement.closest('table');\r\n            var colIndex = sortElement.parent().children().index(sortElement) + 1;\r\n\r\n            if (bindingData.isNumeric) {\r\n                sortElement.addClass('gsColNum');\r\n            } else {\r\n                sortElement.addClass('gsCol');\r\n            }\r\n\r\n            sortElement.attr('onclick', 'gs.sort(this);');\r\n            sortElement.attr('id', bindingData.id);\r\n            parentTable.find('tbody tr[id=\"' + bindingData.rowid + '\"] td:nth-child(' + colIndex + ')').attr('id', bindingData.id);\r\n\r\n            if (bindingData.getSortableValueJS) {\r\n                sortElement.data('getvaluejsfunc', bindingData.getSortableValueJS);\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.sortable = {\r\n        init: function (element, valueAccessor, allBindings, bindingContext) {\r\n            var sortFunc = valueAccessor();\r\n            if (sortFunc && typeof sortFunc === 'function') {\r\n                $(element).click({ model: bindingContext }, sortFunc);\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.btPagerButton = {\r\n        init: function (element, valueAccessor, allBindingsAccessor, bindingContext) {\r\n            var bindingData = allBindingsAccessor.get('btPagerButton');\r\n\r\n            $(element).mouseenter(function () {\r\n                if (bindingData.enabled()) {\r\n                    $(this).addClass('ui-state-hover');\r\n                }\r\n            });\r\n\r\n            $(element).mouseleave(function () {\r\n                $(this).removeClass('ui-state-hover');\r\n            });\r\n        },\r\n        update: function (element, valueAccessor, allBindingsAccessor, bindingContext) {\r\n            var bindingData = allBindingsAccessor.get('btPagerButton');\r\n\r\n            if (bindingData.enabled()) {\r\n                $(element).removeClass('ui-state-disabled');\r\n                $(element).css('cursor', 'pointer');\r\n            } else {\r\n                $(element).addClass('ui-state-disabled');\r\n                $(element).removeClass('ui-state-hover');\r\n                $(element).css('cursor', 'default');\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.tooltip = {\r\n        init: function (element, valueAccessor, allBindingsAccessor, bindingContext) {\r\n            ToolTips.initialize();\r\n        }\r\n    }\r\n\r\n    ko.bindingHandlers.tooltipData = {\r\n        init: function (element, valueAccessor, allBindingsAccessor, bindingContext) {\r\n            $(element).data('tooltip', valueAccessor()());\r\n        },\r\n        update: function (element, valueAccessor, allBindingsAccessor, bindingContext) {\r\n            $(element).data('tooltip', valueAccessor()());\r\n        }\r\n    }\r\n\r\n    ko.bindingHandlers.inlineEdit = {\r\n        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n            var $inlineElement = $(element);\r\n            var inlineBinding = valueAccessor();\r\n\r\n            if (inlineBinding.multipleJobsSelected) {\r\n                $inlineElement.click(function () {\r\n                    ServiceMessage.showAndFade('Please select a single job in order to edit items in the grid.');\r\n                });\r\n            } else if (!inlineBinding.calendarOffline) {\r\n                $inlineElement.click(function () {\r\n                    ServiceMessage.showAndFade('Inline Editing only available when offline. To edit online, open Schedule Item Details.', { cssClass: 'calendar' });\r\n                });\r\n            } else if (inlineBinding.canEdit) {\r\n                $inlineElement.addClass('editable');\r\n            }\r\n\r\n            $inlineElement.append('<span>' + inlineBinding.currentDisplayValue + '</span>');\r\n        },\r\n\r\n        update: function (element, valueAccessor, allBindingsAccessor, bindingContext) {\r\n            var $inlineElement = $(element);\r\n            var inlineBinding = valueAccessor();\r\n\r\n            if (inlineBinding.ctrlType == Global.Constants.InlineControlType.MultiLineTextBox) {\r\n                $inlineElement.find('span').html(inlineBinding.currentDisplayValue);\r\n            } else {\r\n                $inlineElement.find('span').text(inlineBinding.currentDisplayValue);\r\n            }\r\n\r\n            $inlineElement.attr({\r\n                \"data-objectid\": inlineBinding.objectId,\r\n                \"data-curValue\": ko.utils.unwrapObservable(inlineBinding.currentValue),\r\n                \"data-curDisplay\": inlineBinding.currentDisplayValue,\r\n                \"data-ctrlid\": inlineBinding.controlId,\r\n                \"data-updfunc\": inlineBinding.updateFunction,\r\n                \"data-ctrltype\": inlineBinding.ctrlType\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.btMarkupColumn = {\r\n        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n            var $element = $(element);\r\n\r\n            var update = function () {\r\n                var bindingData = allBindingsAccessor.get('btMarkupColumn');\r\n                var container = $element.closest(bindingData);\r\n\r\n                var columnElement = container.find('.markupChoicesControl select');\r\n                var percentElement = container.find('.markupPercentControl input');\r\n                var priceElement = container.find('.markupPriceControl input');\r\n                var ownerPriceElement = container.find('.ownerPrice input');\r\n                var perUnitElement = container.find('.markupPerUnitControl input');\r\n                var markupEditorElement = container.find('.markupEditor input');\r\n\r\n                btMarkupHelper.MarkupColumnUpdate(columnElement, priceElement, ownerPriceElement, percentElement, perUnitElement, markupEditorElement);\r\n            };\r\n\r\n            $element.on('change', update);\r\n\r\n            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                $(element).off(\"change\", update);\r\n            });\r\n\r\n            update();\r\n        }\r\n    };\r\n\r\n    // When the user updates a markup value, the subscription below is fired\r\n    // UpdateMarkupLineItemTotalFromRowElement updates the other markup values to match the markup calculation\r\n    // We want to avoid running UpdateMarkupLineItemTotalFromRowElement multiple times on each update\r\n    // _preventDuplicateSubscriptions stops other markup values from updating while one is in progress\r\n    var _preventDuplicateSubscriptions = false;\r\n    ko.bindingHandlers.btMarkupValueKeyUp = {\r\n        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n            var $element = $(element);\r\n\r\n            valueAccessor().value.subscribe(function (newVal) {\r\n                if (!_preventDuplicateSubscriptions) {\r\n                    _preventDuplicateSubscriptions = true;\r\n                    var container = $element.closest(valueAccessor().row);\r\n                    btMarkupHelper.UpdateMarkupLineItemTotalFromRowElement(container);\r\n                    _preventDuplicateSubscriptions = false;\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.btMarkupValueChange = {\r\n        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n            var $element = $(element);\r\n\r\n            var changeHandler = function () {\r\n                var bindingData = allBindingsAccessor.get('btMarkupValueChange');\r\n                var container = $element.closest(bindingData);\r\n                btMarkupHelper.UpdateMarkupLineItemTotalFromRowElement(container);\r\n            };\r\n\r\n            $element.on('change', changeHandler);\r\n\r\n            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                $(element).off(\"change\", changeHandler);\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.btExpandCollapse = {\r\n        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n            var $element = $(element);\r\n            var bindingData = allBindingsAccessor.get('btExpandCollapse');\r\n\r\n            function setExpandIcon(isSectionExpanded) {\r\n                if (isSectionExpanded) {\r\n                    $element.attr('src', bindingData.collapseIcon);\r\n                } else {\r\n                    $element.attr('src', bindingData.expandIcon);\r\n                }\r\n            };\r\n\r\n            setExpandIcon(bindingData.expandProperty());\r\n\r\n            bindingData.expandProperty.subscribe(function (newVal) {\r\n                setExpandIcon(newVal)\r\n            });\r\n\r\n            var clickHandler = function () {\r\n                bindingData.expandProperty(!bindingData.expandProperty());\r\n            };\r\n\r\n            $element.on('click', clickHandler);\r\n\r\n            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                $(element).off(\"click\", clickHandler);\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.btKeyupOnSubscribe = {\r\n        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n            var $element = $(element);\r\n            var bindingData = allBindingsAccessor.get('btKeyupOnSubscribe');\r\n\r\n            bindingData.subscribe(function (newVal) {\r\n                $element.keyup();\r\n            });\r\n        }\r\n    };\r\n\r\n    // This function takes data from a textbox and escapes any html, then converts textbox newlines to <br/> tags and puts the result into the element's html\r\n    ko.bindingHandlers.textboxToHtml = {\r\n        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n            var data = ko.unwrap(valueAccessor());\r\n            $(element).html(btStringHandler.newLineToHtmlBr($('<div/>').text(data).html()));\r\n        },\r\n        update: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n            var data = ko.unwrap(valueAccessor());\r\n            $(element).html(btStringHandler.newLineToHtmlBr($('<div/>').text(data).html()));\r\n        }\r\n    };\r\n\r\n    // This should be switched to the github library https://github.com/pauloortins/knockout-bootstrap-switch\r\n    // adapted from http://jsfiddle.net/meno/MBLP9/\r\n    // Note a listener was added to headerScripts_Global to recompute the width\r\n    ko.bindingHandlers.bootstrapSwitchOn = {\r\n        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n            var $elem = $(element);\r\n            $elem.bootstrapSwitch();\r\n\r\n            $elem.bootstrapSwitch('state', ko.utils.unwrapObservable(valueAccessor())); // Set initial state\r\n            $elem.on('switchChange.bootstrapSwitch', function (e, state) {\r\n                valueAccessor()(state);\r\n            }); // Update the model when changed.\r\n        },\r\n        update: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n            var vStatus = $(element).bootstrapSwitch('state');\r\n            var vmStatus = ko.utils.unwrapObservable(valueAccessor());\r\n            if (vStatus != vmStatus) {\r\n                $(element).bootstrapSwitch('state', vmStatus);\r\n            }\r\n        }\r\n    };\r\n\r\n    // taken from this place here http://stackoverflow.com/a/22444027/2106228\r\n    ko.bindingHandlers.qTip = {\r\n        init: function (element, valueAccessor) {\r\n            $(element).qtip({\r\n                content: bindingHelpers.generateToolTipContent(valueAccessor()),\r\n                hide: {\r\n                    delay: 100,\r\n                    fixed: true\r\n                },\r\n                show: {\r\n                    event: 'mouseover',\r\n                    solo: true\r\n                },\r\n                position: {\r\n                    my: 'bottom center',\r\n                    at: 'top center'\r\n                },\r\n                style: {\r\n                    classes: 'qtip-light'\r\n                },\r\n                events: {\r\n                    visible: function (event, api) {\r\n                        bindingHelpers.addToolTipNewPhotoClickBinding(api, valueAccessor);\r\n                    }\r\n                }\r\n            });\r\n            ko.applyBindingAccessorsToNode(element, { visible: function () { return true; } });\r\n        },\r\n        update: function (element, valueAccessor) {\r\n            var api = $(element).qtip('api');\r\n            api.set('content.text', bindingHelpers.generateToolTipContent(valueAccessor()));\r\n            bindingHelpers.addToolTipNewPhotoClickBinding(api, valueAccessor);\r\n            ko.applyBindingAccessorsToNode(element, { visible: function () { return true; } });\r\n        }\r\n    }\r\n\r\n    ko.bindingHandlers['file'] = {\r\n        init: function (element, valueAccessor, allBindings) {\r\n            var fileContents, fileName, allowed, prohibited, reader;\r\n\r\n            if ((typeof valueAccessor()) === \"function\") {\r\n                fileContents = valueAccessor();\r\n            } else {\r\n                fileContents = valueAccessor()['data'];\r\n                fileName = valueAccessor()['name'];\r\n\r\n                allowed = valueAccessor()['allowed'];\r\n                if ((typeof allowed) === 'string') {\r\n                    allowed = [allowed];\r\n                }\r\n\r\n                prohibited = valueAccessor()['prohibited'];\r\n                if ((typeof prohibited) === 'string') {\r\n                    prohibited = [prohibited];\r\n                }\r\n\r\n                reader = (valueAccessor()['reader']);\r\n            }\r\n\r\n            reader || (reader = new FileReader());\r\n            reader.onloadend = function () {\r\n                fileContents(reader.result);\r\n            }\r\n\r\n            var handler = function () {\r\n                var file = element.files[0];\r\n\r\n                // Opening the file picker then canceling will trigger a 'change'\r\n                // event without actually picking a file.\r\n                if (file === undefined) {\r\n                    fileContents(null)\r\n                    return;\r\n                }\r\n\r\n                if (allowed) {\r\n                    if (!allowed.some(function (type) { return type === file.type })) {\r\n                        console.log(\"File \" + file.name + \" is not an allowed type, ignoring.\")\r\n                        fileContents(null)\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                if (prohibited) {\r\n                    if (prohibited.some(function (type) { return type === file.type })) {\r\n                        console.log(\"File \" + file.name + \" is a prohibited type, ignoring.\")\r\n                        fileContents(null)\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                reader.readAsDataURL(file); // A callback (above) will set fileContents\r\n                if (typeof fileName === \"function\") {\r\n                    fileName(file.name)\r\n                }\r\n            }\r\n\r\n            ko.utils.registerEventHandler(element, 'change', handler);\r\n        }\r\n    }\r\n\r\n    ko.bindingHandlers.visibility = {\r\n        init: function (element, valueAccessor) {\r\n            var value = ko.unwrap(valueAccessor());\r\n            if (value) {\r\n                $(element).css(\"visibility\", \"visible\");\r\n            } else {\r\n                $(element).css(\"visibility\", \"hidden\");\r\n            }\r\n        },\r\n        update: function (element, valueAccessor) {\r\n            var value = ko.unwrap(valueAccessor());\r\n            if (value) {\r\n                $(element).css(\"visibility\", \"visible\");\r\n            } else {\r\n                $(element).css(\"visibility\", \"hidden\");\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers.visibleInline = {\r\n        init: function (element, valueAccessor) {\r\n            var value = ko.unwrap(valueAccessor());\r\n            if (value) {\r\n                $(element).css(\"display\", \"inline-block\");\r\n            } else {\r\n                $(element).css(\"display\", \"none\");\r\n            }\r\n        },\r\n        update: function (element, valueAccessor) {\r\n            var value = ko.unwrap(valueAccessor());\r\n            if (value) {\r\n                $(element).css(\"display\", \"inline-block\");\r\n            } else {\r\n                $(element).css(\"display\", \"none\");\r\n            }\r\n        }\r\n    };\r\n\r\n    // Highlighted Text Comes from http://www.knockmeout.net/2011/06/fun-with-highlighting-in-knockoutjs.html\r\n    ko.bindingHandlers.highlightedText = {\r\n        update: function (element, valueAccessor) {\r\n            var options = valueAccessor();\r\n            var value = ko.utils.unwrapObservable(options.text);\r\n            var search = ko.utils.unwrapObservable(options.highlight);\r\n            search = search.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"); // Escape regex characters\r\n            var css = ko.utils.unwrapObservable(options.css);\r\n            if (options.sanitize) {\r\n                value = $('<div/>').text(value).html(); //could do this or something similar to escape HTML before replacement, if there is a risk of HTML injection in this value\r\n            }\r\n            element.innerHTML = value.replace(new RegExp(search, 'gi'), '<span class=\"yellow\">$&</span>');\r\n        }\r\n    };\r\n\r\n    // Alternate white and grey background for list\r\n    ko.bindingHandlers.alternateBackground = {\r\n        init: function (element, valueAccessor) {\r\n            var index = ko.unwrap(valueAccessor());\r\n            if (index % 2 == 0) {\r\n                $(element).addClass('whiteBack');\r\n            }\r\n            else {\r\n                $(element).addClass('greyBack');\r\n            }\r\n        },\r\n        update: function (element, valueAccessor) {\r\n            var index = ko.unwrap(valueAccessor());\r\n            if (index % 2 == 0) {\r\n                $(element).addClass('whiteBack');\r\n            }\r\n            else {\r\n                $(element).addClass('greyBack');\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //Allow skip binding\r\n    //http://www.knockmeout.net/2012/05/quick-tip-skip-binding.html\r\n\r\n    ko.bindingHandlers.stopBinding = {\r\n        init: function () {\r\n            return { controlsDescendantBindings: true };\r\n        }\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings.stopBinding = true;\r\n\r\n\r\n    function formatToNumber(value, precision) {\r\n        var v = parseFloat(value, 10);\r\n        if (precision > 0) {\r\n            value = Math.round(v.toFixed(precision) * 1e2) / 1e2;\r\n        }\r\n        else {\r\n            value = Math.round(v);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    //Intercept to ensure only numbers and '.' are entered.\r\n    ko.extenders.ensureNumeric = function (target, precision) {\r\n        //create a writeable computed observable to intercept writes to our observable\r\n        var result = ko.computed({\r\n            read: target,//always return the original observables value\r\n            write: function (newValue) {\r\n                var current = target();\r\n                var valueToWrite = formatToNumber(newValue, precision);\r\n                //only write if it changed\r\n                if (valueToWrite !== current) {\r\n                    target(valueToWrite);\r\n                } else {\r\n                    if (newValue !== current) {\r\n                        target.notifySubscribers(valueToWrite);\r\n                    }\r\n                }\r\n            }\r\n        }).extend({ notify: 'always' });\r\n\r\n        //initialize with current value to make sure it is rounded appropriately\r\n        result(target());\r\n        //return the new computed observable\r\n        return result;\r\n    };\r\n\r\n    //validating a certain amount of decimal digits\r\n    //Used on the new line item container to block users from entering too many characters\r\n    ko.extenders.validateDecimalLength = function (target, params) {\r\n        var separator = params.separator;\r\n        //create a writable computed observable to intercept writes to our observable\r\n        var result = ko.pureComputed({\r\n            read: target,\r\n            write: function (newValue) {\r\n                var current = target();\r\n                if (newValue || (newValue === 0 && current !== btNumeric.ToString(\"0\")) || (newValue === '')) {\r\n                    var newValueString = newValue.toString();\r\n                    var decimalIndex = newValueString.indexOf(separator);\r\n                    if (decimalIndex !== -1) {\r\n                        var stringArray = newValueString.split(separator),\r\n                            decimalDigits = stringArray[stringArray.length - 1],\r\n                            beginningOfNumber = newValueString.substring(0, newValueString.length - decimalDigits.length),\r\n                            endOfNumber = null,\r\n                            endOfNumber = decimalDigits.length > params.decimals ? decimalDigits.substring(0, params.decimals) : decimalDigits;\r\n                        var valueToWrite = beginningOfNumber + endOfNumber;\r\n                    } else {\r\n                        valueToWrite = newValue;\r\n                    };\r\n                    //only write if it changed\r\n                    if (valueToWrite !== current) {\r\n                        target(valueToWrite);\r\n                    } else {\r\n                        if (newValue !== current) {\r\n                            target.notifySubscribers(valueToWrite);\r\n                        }\r\n                    }\r\n                };\r\n\r\n            }\r\n        }).extend({ notify: 'always' });\r\n\r\n        result(target());\r\n        return result;\r\n    };\r\n\r\n    //validating that builder cost does not exceed 17 characters based on unit cost * quantity\r\n    //Used on the new line item container to block users from entering too many characters\r\n    ko.extenders.validateBuilderCostFieldLength = function (target, params) {\r\n        var separator = params.separator;\r\n        //create a writable computed observable to intercept writes to our observable\r\n        var result = ko.pureComputed({\r\n            read: target,\r\n            write: function (newValue) {\r\n                var current = target();\r\n                if (newValue != null) {\r\n                    var newValueString = newValue.toString();\r\n\r\n                    if (params.multiplierObservable) {\r\n                        var builderCostString = btNumeric.ToString((btNumeric.TryParse(newValueString, null, 2) * btNumeric.TryParse(params.multiplierObservable(), null, 2)), 2, false)\r\n                    }\r\n\r\n                    if (builderCostString && builderCostString.length > 17) {\r\n                        var valueToWrite = current;\r\n                    } else {\r\n                        var valueToWrite = newValue;\r\n                    }\r\n\r\n                    //only write if it changed\r\n                    if (valueToWrite !== current) {\r\n                        target(valueToWrite);\r\n                    } else {\r\n                        if (newValue !== current) {\r\n                            target.notifySubscribers(valueToWrite);\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        }).extend({ notify: 'always' });\r\n\r\n        result(target());\r\n        return result;\r\n    };\r\n\r\n    //Add formatted observable to the target observable.\r\n    ko.extenders.addCurrencyFormatted = function (target, decimals) {\r\n        internalAddCurrency(target, decimals, true)\r\n    };\r\n\r\n    ko.extenders.addCurrencyFormatted = function (target, obj) {\r\n        var decimalPlaces = obj.decimals || 2;\r\n        var showCurrencySymbol = typeof obj.showSymbol !== 'undefined' ? obj.showSymbol : true;\r\n\r\n        internalAddCurrency(target, decimalPlaces, showCurrencySymbol);\r\n    };\r\n\r\n    ko.extenders.isCustomField = function (target, value) {\r\n        target['isCustomField'] = value;\r\n        return target;\r\n    }\r\n\r\n    var internalAddCurrency = function (target, decimals, showCurrency) {\r\n        target.formatted = ko.pureComputed({\r\n            read: function () {\r\n                return btNumeric.ToString(target(), decimals, true, (showCurrency ? btJScriptGlobals.getBuilderCurrencySymbol : undefined));\r\n            },\r\n            write: function (newValue) {\r\n                var valueToWrite = btNumeric.TryParse(newValue) || formatToNumber(newValue, decimals);\r\n                if (isNaN(valueToWrite)) {\r\n                    valueToWrite = 0;\r\n                }\r\n\r\n                if (valueToWrite !== target()) {\r\n                    target(valueToWrite);\r\n                } else {\r\n                    target.valueHasMutated();\r\n                }\r\n            }\r\n        }).extend({ notify: 'always' });\r\n    };\r\n\r\n    //If field is emptied out, default observable to 'defaultVal' param.\r\n    ko.extenders.emptyDefault = function (target, defaultVal) {\r\n        target.subscribe(function (val) {\r\n            if (typeof val === 'undefined' || val === '') {\r\n                target(defaultVal);\r\n            }\r\n        });\r\n\r\n        return target;\r\n    };\r\n\r\n    //We have some issues with observables getting reevaluated without the value truly changing. Use this function to make sure the value has truly changed before applying your subscribe function\r\n    ko.extenders.trackValueChange = function (target, func) {\r\n        internalTrackValueChange(target, func, false);\r\n    };\r\n\r\n    /* With single select dropdown we initially load the selected value as undefined, we need to ignore undefined in this case */\r\n    ko.extenders.trackListValueChange = function (target, func) {\r\n        internalTrackValueChange(target, func, true);\r\n    };\r\n\r\n    var internalTrackValueChange = function (target, func, ignoreUndefined) {\r\n        if (!target.oldVal) {\r\n            target.oldVal = ko.observable();\r\n        }\r\n\r\n        target.subscribe(function (oldVal) {\r\n            target.oldVal(oldVal);\r\n        }, null, 'beforeChange');\r\n\r\n        target.subscribe(function (newVal) {\r\n            if ((!ignoreUndefined || target.oldVal() !== undefined) && JSON.stringify(newVal) !== JSON.stringify(target.oldVal())) {\r\n                func();\r\n            }\r\n        });\r\n    };\r\n\r\n    /* Stringify comparison for dynamic object type - https://stackoverflow.com/a/1144249/2106228 */\r\n    ko.extenders.maintainInitial = function (target, entityReloadListener) {\r\n        if (!target.initialValue) {\r\n            target.initialValue = ko.observable(target());\r\n        }\r\n\r\n        target.reinitialize = function () {\r\n            target.initialValue(target());\r\n        };\r\n\r\n        target.valueHasBeenAltered = ko.pureComputed(function () {\r\n            return JSON.stringify(target()) !== JSON.stringify(target.initialValue());\r\n        });\r\n    };\r\n\r\n    ko.extenders.maintainPreviousValue = function (target, entityReloadListener) {\r\n        if (!target.previousValue) {\r\n            target.previousValue = ko.observable(target());\r\n        }\r\n\r\n        target.reinitialize = function () {\r\n            target.previousValue(target());\r\n        };\r\n\r\n        target.valueHasBeenAltered = function () {\r\n            var isAltered = JSON.stringify(target()) !== JSON.stringify(target.previousValue());\r\n            if (isAltered) {\r\n                target.previousValue(target());\r\n            }\r\n            return isAltered\r\n        };\r\n    };\r\n\r\n    /* Attaches a display pure computed to the target observable for displaying a string representation of a number with leadingZeroDigits number of leading zeros */\r\n    ko.extenders.leadingZeroDisplayDigits = function (target, leadingZeroDigits) {\r\n        target.display = ko.pureComputed({\r\n            write: function (newVal) {\r\n                target(parseInt(newVal));\r\n            },\r\n            read: function () {\r\n                var stringValue = target().toString();\r\n                while (stringValue.length < leadingZeroDigits) stringValue = \"0\" + stringValue;\r\n                return stringValue;\r\n            }\r\n        });\r\n    };\r\n\r\n    /*\r\n        target: an input observable that requires confirmation to update for use with subscribers primarily\r\n        config:\r\n            confirmMessage: Message to display and confirm\r\n            confirmOptions:\r\n                confirmButton: Confirm Button parameters (Only text utilized currently)\r\n                title: Title to display on confirm\r\n            displayCondition: function to determine if confirmation is necessary, otherwise update the target observable\r\n    */\r\n    ko.extenders.confirm = function (target, config) {\r\n        var confirmMessage = config.confirmMessage || \"Are you sure you want to update this value?\";\r\n        var confirmOptions = config.confirmOptions || { confirmButton: { text: \"Update\" }, title: \"Confirm action\" };\r\n        var displayCondition = config.displayCondition || function () { return true; };\r\n\r\n        var reset = false; // used for sneaky update to skip subscribe functionality\r\n\r\n        target.confirm = ko.observable();\r\n        target.confirm.subscribe(function (newVal) {\r\n            if (!reset) {\r\n                if (displayCondition()) {\r\n                    btMaster.btConfirm(\r\n                        confirmMessage,\r\n                        {\r\n                            confirmButton: confirmOptions.confirmButton,\r\n                            title: confirmOptions.title\r\n                        })\r\n                        .done(function () {\r\n                            target(target.confirm());\r\n                        })\r\n                        .fail(function () {\r\n                            reset = true;\r\n                            target.confirm(target());\r\n                        });\r\n                }\r\n                else {\r\n                    target(target.confirm());\r\n                }\r\n            } else {\r\n                reset = false;\r\n            }\r\n        });\r\n    }\r\n\r\n})();\r\n\r\n\r\nko.bindingHandlers.glowOnUpdate = {\r\n    update: function (element, valueAccessor) {\r\n        // Add a glow to the bound element when the valueAccess changes.\r\n        if ($(element).hasClass('listenForUpdates')) {\r\n            $(element).addClass('updateGlow').delay(1500).queue(function (next) {\r\n                $(this).removeClass('updateGlow');\r\n                next();\r\n            });\r\n        } else {\r\n            $(element).addClass('listenForUpdates');\r\n        }\r\n        ko.unwrap(valueAccessor());\r\n    }\r\n};\r\n\r\n//Uses the binding to add a \"For\" tag for labels\r\nko.bindingHandlers.uniqueFor = {\r\n    update: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n        if (valueAccessor()()) {\r\n            element.setAttribute(\"for\", valueAccessor()());\r\n        }\r\n    }\r\n};\r\n\r\n/* @description creates a new uniqueID for the passed element and returns it. */\r\nko.bindingHandlers.addUniqueID = {\r\n    init: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n        var uniqueID = $(element).uniqueId().attr(\"id\");\r\n\r\n        // ToDo: this can be converted to ko.unwrap if you aren't passing a ko.observable\r\n        valueAccessor()(uniqueID);\r\n    }\r\n};\r\n\r\n\r\n/* Runs a callback function when an object loads. */\r\nko.bindingHandlers.onLoad = {\r\n    init: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n        var onLoadEventFunction = ko.unwrap(valueAccessor)();\r\n        if (typeof onLoadEventFunction == 'function') {\r\n            onLoadEventFunction();\r\n        }\r\n    }\r\n};\r\n\r\n\r\n/* @description Create uniqueID and run a init function when the uniqueID has been added\r\n * pass a function that accepts the params (element, allBindings, viewModel, bindingContext)\\\r\n * Example:\r\n    <div data-bind=\"uniqueIdInit: { fn: exampleFunctionInJS, customParam1: 'ex', customParam2: true }\"></div>\r\n\r\n    exampleFunctionInJS(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        var bindingParams = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n        alert(bindingParmas.customParam1);\r\n        alert(bindingParmas.customParam2);\r\n    }\r\n**/\r\nko.bindingHandlers.uniqueIdInit = {\r\n    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        var uniqueID = $(element).uniqueId().attr(\"id\");\r\n        $(element).attr(\"id\", uniqueID);\r\n        ko.unwrap(valueAccessor)().fn(element, valueAccessor, allBindings, viewModel, bindingContext);\r\n    }\r\n};\r\n\r\n\r\n// http://api.jqueryui.com/spinner/\r\nko.bindingHandlers.numberInput = {\r\n    init: function (element, valueAccessor, allBindingsAccessor) {\r\n        //initialize spinner with some optional options\r\n        var options = allBindingsAccessor().numberOptions || {};\r\n        $(element).spinner(options);\r\n\r\n        //handle the field changing\r\n        ko.utils.registerEventHandler(element, \"spinchange\", function () {\r\n            var observable = valueAccessor();\r\n            observable($(element).spinner(\"value\"));\r\n        });\r\n\r\n        //handle disposal (if KO removes by the template binding)\r\n        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n            $(element).spinner(\"destroy\");\r\n        });\r\n\r\n    },\r\n    update: function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor()),\r\n            current = $(element).spinner(\"value\");\r\n\r\n        if (value !== current) {\r\n            $(element).spinner(\"value\", value);\r\n        }\r\n    }\r\n};\r\n\r\nko.bindingHandlers.fadeVisible = {\r\n    init: function (element, valueAccessor) {\r\n        // Initially set the element to be instantly visible/hidden depending on the value\r\n        var value = valueAccessor();\r\n        $(element).toggle(ko.unwrap(value)); // Use \"unwrapObservable\" so we can handle values that may or may not be observable\r\n    },\r\n    update: function (element, valueAccessor) {\r\n        // Whenever the value subsequently changes, slowly fade the element in or out\r\n        var value = valueAccessor();\r\n        ko.unwrap(value) ? $(element).fadeIn({ duration: 200, queue: false }) : $(element).fadeOut({ duration: 100, queue: false });\r\n    }\r\n};\r\n\r\nko.bindingHandlers.slideVisible = {\r\n    init: function (element, valueAccessor) {\r\n        // Initially set the element to be instantly visible/hidden depending on the value\r\n        var value = valueAccessor();\r\n        $(element).toggle(ko.unwrap(value)); // Use \"unwrapObservable\" so we can handle values that may or may not be observable\r\n    },\r\n    update: function (element, valueAccessor) {\r\n        // Whenever the value subsequently changes, slowly slides the element in or out\r\n        var value = valueAccessor();\r\n        ko.unwrap(value) ? $(element).slideDown({ duration: 500, queue: false }) : $(element).slideUp({ duration: 500, queue: false });\r\n    }\r\n};\r\n\r\n/**\r\n * example usage:\r\n * <div data-bind=\"jqueryUISlider: { value: ko.observable(10), min: 0, max: 100, ...all options are passed through.... }\"></div>\r\n */\r\nko.bindingHandlers.jqueryUISlider = {\r\n    init: function (element, valueAccessor) {\r\n        var sliderOptions = valueAccessor();\r\n        sliderOptions.value = sliderOptions.value();\r\n\r\n        $(element)\r\n            .slider(sliderOptions)\r\n            .on(\"slide slidechange\", function (event, ui) {\r\n                // update observable value on slide & change\r\n                valueAccessor().value(ui.value);\r\n            });\r\n    },\r\n    update: function (element, valueAccessor) {\r\n        // if the value changes update it\r\n        var newValue = valueAccessor().value();\r\n        $(element).slider(\"option\", \"value\", newValue);\r\n    }\r\n};\r\n\r\nko.dirtyFlag = function (root, isInitiallyDirty) {\r\n    var result = function () { },\r\n        _initialState = ko.observable(ko.toJSON(root)),\r\n        _isInitiallyDirty = ko.observable(isInitiallyDirty);\r\n\r\n    result.isDirty = ko.computed(function () {\r\n        return _isInitiallyDirty() || _initialState() !== ko.toJSON(root);\r\n    });\r\n\r\n    result.reset = function () {\r\n        _initialState(ko.toJSON(root));\r\n        _isInitiallyDirty(false);\r\n    };\r\n\r\n    return result;\r\n};\r\n\r\n/* @description iterates through an array and determines if a condition is true in at least one element\r\n * Example:\r\n    var arr = ko.observableArray([{id: 1}, {id: 2}]);\r\n\r\n    var hasId = arr.any(function(x) { return x.id === 1; });\r\n**/\r\nko.observableArray.fn.any = function (lookup) {\r\n    var array = this;\r\n\r\n    return ko.utils.arrayFirst(array(), function (item) {\r\n        return lookup(item);\r\n    }) != null;\r\n};\r\n\r\n/* @description iterates through an array of objects and returns a specified property\r\n * Example:\r\n    var arr = ko.observableArray([{id: 1}, {id: 2}]);\r\n\r\n    var arrIds = arr.select(function(x) { return x.id; });\r\n**/\r\nko.observableArray.fn.select = function (lookup) {\r\n    var array = this;\r\n\r\n    return ko.utils.arrayMap(array(), lookup);\r\n};\r\n\r\n\r\n/* @description: similar to pushAll this method will push all item of an array to the front of an observableArray\r\n*/\r\nko.observableArray.fn.unshiftAll = function (valuesToPush) {\r\n    var obsArray = this;\r\n    var underlyingArray = obsArray();\r\n\r\n    // add the items to the start of the array\r\n    for (var i = 0, j = valuesToPush.length; i < j; i++) {\r\n        underlyingArray.unshift(valuesToPush[i]);\r\n    }\r\n\r\n    obsArray.valueHasMutated(); // update ko\r\n\r\n    return obsArray;\r\n};\r\n\r\n\r\n/* @description adds a border around the element when validation fires */\r\nko.bindingHandlers.validationBorder = {\r\n    update: function (element, valueAccessor, allBindingsAccessor, viewModel) {\r\n        var $elm = $(element);\r\n\r\n        //Dropdowns\r\n        if ($(element).is(\"select\")) {\r\n            //chosen\r\n            if ($(element).next().hasClass(\"chosen-container\")) {\r\n                $elm = $(element).next().children(0);\r\n            }\r\n            //jquery ui\r\n            else if ($(element).next().hasClass(\"ui-multiselect\")) {\r\n                $elm = $(element).next();\r\n            }\r\n        }\r\n\r\n        //File Picker\r\n        var type = $elm.prop('type');\r\n        if (typeof (type) !== 'undefined' && type === 'file') {\r\n            $elm = $(element).next();\r\n        }\r\n\r\n        if (valueAccessor && valueAccessor().isValid && !valueAccessor().isValid() && valueAccessor().isModified()) {\r\n            $elm.addClass(\"validation-border\");\r\n        }\r\n        else {\r\n            $elm.removeClass(\"validation-border\");\r\n        }\r\n    }\r\n};\r\n\r\n// When the enter key is pressed on a text input, call a provided callback\r\nko.bindingHandlers.enterkey = {\r\n    init: function (element, valueAccessor, allBindings, viewModel) {\r\n        var callback = valueAccessor();\r\n        $(element).keypress(function (event) {\r\n            var keyCode = (event.which ? event.which : event.keyCode);\r\n            if (keyCode === 13) {\r\n                callback.call(viewModel);\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n};\r\n\r\nko.bindingHandlers['btValidationMessage'] = {\r\n    update: function (element, valueAccessor, allBindings, vm) {\r\n        btValidationMessage(element, valueAccessor, vm, false);\r\n    }\r\n};\r\n\r\nko.bindingHandlers['requiredValidationElement'] = {\r\n    init: function (element, valueAccessor, allBindings, vm) {\r\n        //Chosen dropdowns\r\n        if ($(element).next() && $(element).next().hasClass('chosen-container')) {\r\n            $(element).on('chosen:hiding_dropdown', function (event) {\r\n                fireRequiredValidator(valueAccessor());\r\n            });\r\n        }\r\n        //Jquery UI dropdowns\r\n        else if ($(element).next() && $(element).next().hasClass('ui-multiselect')) {\r\n            $(element).multiselect({\r\n                close: function (event) {\r\n                    fireRequiredValidator(valueAccessor());\r\n                }\r\n            });\r\n        }\r\n        else if ($(element).hasClass('datePicker')) {\r\n            $(element).datepicker('option', {\r\n                onClose: function () {\r\n                    fireRequiredValidator(valueAccessor());\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            $(element).blur(function (event) {\r\n                fireRequiredValidator(valueAccessor());\r\n            });\r\n        }\r\n\r\n    },\r\n    update: function (element, valueAccessor, allBindings, vm) {\r\n        btValidationMessage(element, valueAccessor, vm, true);\r\n    }\r\n};\r\n\r\nko.bindingHandlers.splitmenubutton = {\r\n    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        var menuItems = ko.unwrap(valueAccessor)();\r\n        var uniqueId = allBindings().addUniqueID();\r\n\r\n        // add menu items\r\n        var menuHTML = \"<div class='btDropDownMenu'>\";\r\n        menuHTML += \"<a href='javascript:void(0);' class='splitmenubutton mainDropDown' data-showmenu='\" + uniqueId + \"' data-splitmenu='false'>\" + allBindings().dropdownTitle + \"</a>\";\r\n        menuHTML += \"<div id='\" + uniqueId + \"' class='splitdropdown'>\";\r\n        menuItems.forEach(function (dropdownItem) {\r\n            var gaClickAttribute = typeof dropdownItem.gaClick !== 'undefined' ? 'data-ga-click=\"' + dropdownItem.gaClick + '\"' : '';\r\n            var gaTabAttribute = typeof dropdownItem.gaTab !== 'undefined' ? 'data-ga-tab=\"' + dropdownItem.gaTab + '\"' : '';\r\n\r\n            menuHTML += \"<a href='javascript:void(0);' class='dropDownItem' \" + gaClickAttribute + \" \" + gaTabAttribute + \">\";\r\n            menuHTML += \"<div class='dropDownItem' data-bind='\" + dropdownItem.databind + \"'>\";\r\n            menuHTML += \"<div class='\" + allBindings().menuItemClass + \"'>\" + dropdownItem.text\r\n            menuHTML += \"</div></div></a>\";\r\n        });\r\n        menuHTML += \"</div></div>\";\r\n\r\n        $(element).append(menuHTML);\r\n        $(element).removeAttr('id');\r\n        // init menu\r\n        $(element).find('a[data-showmenu]').splitmenubuttonMenu();\r\n    }\r\n};\r\n\r\n//This function sets the observable's isModified to true when the user tabs in and back out of an element\r\nfunction fireRequiredValidator(observable) {\r\n    if (ko.validation && observable && observable.rules && observable.rules().length > 0) {\r\n        if (observable.rules().filter(function (rule) {\r\n            if (typeof rule.validator !== 'undefined') {\r\n                if (rule.validator === ko.validation.rules['required'].validator) {\r\n                    return rule;\r\n                }\r\n            } else if (typeof rule.rule !== 'undefined') {\r\n                if (ko.validation.rules[rule.rule].validator === ko.validation.rules['required'].validator) {\r\n                    return rule;\r\n                }\r\n            }\r\n        }).length > 0) {\r\n            observable.isModified(true);\r\n        }\r\n    }\r\n}\r\n\r\nfunction btValidationMessage(element, valueAccessor, vm, required) {\r\n    var kv = ko.validation;\r\n    if (kv) {\r\n        var obsv = valueAccessor(),\r\n            config = kv.utils.getConfigOptions(element),\r\n            val = ko.unwrap(obsv),\r\n            msg = null,\r\n            isModified = false,\r\n            isValid = false;\r\n\r\n        if (obsv === null || typeof obsv === 'undefined') {\r\n            throw new Error('Cannot bind validationMessage to undefined value. data-bind expression: ' +\r\n                element.getAttribute('data-bind'));\r\n        }\r\n\r\n        isModified = obsv.isModified && obsv.isModified();\r\n        isValid = obsv.isValid && obsv.isValid();\r\n\r\n        var error = null;\r\n        if (!config.messagesOnModified || isModified) {\r\n            error = isValid ? null : obsv.error;\r\n        }\r\n\r\n        var isVisible = !config.messagesOnModified || isModified ? !isValid : false;\r\n        var isCurrentlyVisible = element.style.display !== \"none\";\r\n        var inputRequiredValidator = typeof (vm.inputRequiredValidator) !== 'undefined' ? vm.inputRequiredValidator : true; //Override if the component does not render required specially\r\n        var requiredError = inputRequiredValidator && error && error() && (/required/i).test(error());\r\n\r\n        //Required Only\r\n        if (required) {\r\n            //Error\r\n            if (requiredError) {\r\n                //Dropdowns\r\n                if ($(element).is(\"select\")) {\r\n                    //chosen\r\n                    if ($(element).next().hasClass(\"chosen-container\")) {\r\n                        $(element).next().children(0).addClass(\"required-dropdown\");\r\n                    }\r\n                    //jquery ui\r\n                    else if ($(element).next().hasClass(\"ui-multiselect\")) {\r\n                        $(element).next().addClass(\"required-dropdown\");\r\n                    }\r\n                }\r\n                //Non-dropdowns\r\n                else {\r\n                    $(element).addClass('required-placeholder');\r\n                    if (error() !== vm.placeholder()) {\r\n                        vm.orgPlaceholder(vm.placeholder());\r\n                        vm.placeholder(error());\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if ($(element).is(\"select\")) {\r\n                    //chosen\r\n                    if ($(element).next().hasClass(\"chosen-container\")) {\r\n                        $(element).next().children(0).removeClass(\"required-dropdown\");\r\n                    }\r\n                    //jquery ui\r\n                    else if ($(element).next().hasClass(\"ui-multiselect\")) {\r\n                        $(element).next().removeClass(\"required-dropdown\");\r\n                    }\r\n                }\r\n                else {\r\n                    $(element).removeClass('required-placeholder');\r\n                    vm.placeholder(vm.orgPlaceholder());\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!required) {\r\n            if (isCurrentlyVisible && !isVisible) {\r\n                element.style.display = 'none';\r\n            } else if (!isCurrentlyVisible && isVisible) {\r\n                element.style.display = '';\r\n            }\r\n\r\n            if (requiredError) {\r\n                ko.bindingHandlers.text.update(element, function () { return null; });\r\n                element.style.display = 'none';\r\n            }\r\n            else {\r\n                ko.bindingHandlers.text.update(element, function () { return error; });\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n//Get readOnly status from a validation array passed back from the service\r\nfunction getReadOnlyFromValidation(array) {\r\n    var array = ko.unwrap(array);\r\n\r\n    var readOnlyProp = array.find(function (x) {\r\n        return ko.unwrap(ko.unwrap(x).type) === 'readonly';\r\n    });\r\n\r\n    if (readOnlyProp) {\r\n        return ko.unwrap(readOnlyProp.value);\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n\r\n/*\r\n    Toggle Factory ---\r\n        This factory can be used to implement 'Check All' functionality onto view models.\r\n\r\n        viewModel: the view model to attach the parent checkboxes\r\n        children: the child view models that need to communicate with the parent\r\n        toggleName: the unique toggle name to add to the parent and children view models\r\n        toggleCondition: additional conditions to limit the communication between parent and children view models\r\n                            (this is primarily used to not check 'disabled' line items when checking all)\r\n\r\n        ex: ToggleFactory(self, self.lineItems(), 'includeLineItem');\r\n            ToggleFactory(self, self.lineItems(), 'includeFiles', function (li) { return li.includeLineItem() });\r\n\r\n        If additional subscriptions are required on the child view model, the child can explicitly declare an observable\r\n        with a matching toggleName within it's vm and add subscriptions to the observable there.\r\n*/\r\nwindow.ToggleFactory = function(viewModel, children, toggleName, toggleCondition) {\r\n    var toggleName = toggleName || 'toggle';\r\n    var toggleCondition = toggleCondition || function () { return true; };\r\n\r\n    /* Create the parent toggle observable and attach the child toggle observable to each child */\r\n    viewModel[toggleName] = ko.observable();\r\n\r\n    ko.utils.arrayForEach(children(), function (child) {\r\n        if (!ko.isObservable(child[toggleName])) {\r\n            child[toggleName] = ko.observable();\r\n        }\r\n    });\r\n\r\n    /* Set up subscribes for communication between the parent toggle and all children */\r\n    viewModel[toggleName] = ko.computed({\r\n        read: function () {\r\n            var activeChildren = ko.utils.arrayFilter(children(), toggleCondition);\r\n\r\n            if (activeChildren.length > 0) {\r\n                return !ko.utils.arrayFirst(activeChildren, function (child) {\r\n                    return !child[toggleName]();\r\n                });\r\n            }\r\n\r\n            return false;\r\n        },\r\n        write: function (isChecked) {\r\n            var activeChildren = ko.utils.arrayFilter(children(), toggleCondition);\r\n\r\n            ko.utils.arrayForEach(activeChildren, function (child) {\r\n                if (child[toggleName]) {\r\n                    child[toggleName](isChecked);\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/* https://github.com/apuchkov/knockout-orderable */\r\n/* examples: https://github.com/apuchkov/knockout-orderable/tree/master/examples */\r\nko.bindingHandlers.orderable = {\r\n    getProperty: function (o, s) {\r\n        // copied from http://stackoverflow.com/questions/6491463/accessing-nested-javascript-objects-with-string-key\r\n        s = s.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\r\n        s = s.replace(/^\\./, '');           // strip a leading dot\r\n        var a = s.split('.');\r\n        while (a.length) {\r\n            var n = a.shift();\r\n            if (n in o) {\r\n                o = o[n];\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n        return o;\r\n    },\r\n\r\n    compare: function (left, right) {\r\n        if (typeof left === 'string' || typeof right === 'string') {\r\n            return left ? left.localeCompare(right) : 1;\r\n        }\r\n        if (left > right)\r\n            return 1;\r\n\r\n        return left < right ? -1 : 0;\r\n    },\r\n\r\n    sort: function (viewModel, collection, field) {\r\n        //make sure we sort only once and not for every binding set on table header\r\n        if (viewModel[collection].orderField() == field) {\r\n            viewModel[collection].sort(function (left, right) {\r\n                var left_field = ko.bindingHandlers.orderable.getProperty(left, field);\r\n                var right_field = ko.bindingHandlers.orderable.getProperty(right, field);\r\n                var left_val = (typeof left_field === 'function') ? left_field() : left_field;\r\n                var right_val = (typeof right_field === 'function') ? right_field() : right_field;\r\n                if (viewModel[collection].orderDirection() == \"desc\") {\r\n                    return ko.bindingHandlers.orderable.compare(right_val, left_val);\r\n                } else {\r\n                    return ko.bindingHandlers.orderable.compare(left_val, right_val);\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n        //Start custom buildertrend code\r\n        let enabled = (typeof valueAccessor().enabled !== 'undefined' ? ko.unwrap(valueAccessor().enabled) : true);\r\n        if (!enabled) {\r\n            return;\r\n        }\r\n        //End custom buildertrend code\r\n        \r\n        //get provided options\r\n        var collection = valueAccessor().collection;\r\n        var field = valueAccessor().field;\r\n        \r\n        //add a few observables to ViewModel to track order field and direction\r\n        if (viewModel[collection].orderField == undefined) {\r\n            viewModel[collection].orderField = ko.observable();\r\n        }\r\n        if (viewModel[collection].orderDirection == undefined) {\r\n            viewModel[collection].orderDirection = ko.observable(\"asc\");\r\n        }\r\n        \r\n        var defaultField = valueAccessor().defaultField;\r\n        var defaultDirection = valueAccessor().defaultDirection || \"asc\";\r\n        if (defaultField) {\r\n            viewModel[collection].orderField(field);\r\n            viewModel[collection].orderDirection(defaultDirection);\r\n            ko.bindingHandlers.orderable.sort(viewModel, collection, field);\r\n        }\r\n        \r\n        // Start custom buildertrend code\r\n        $(element).addClass('ko-sortable');\r\n        // End custom buildertrend code\r\n\r\n\r\n        //set order observables on table header click\r\n        $(element).click(function (e) {\r\n            e.preventDefault();\r\n\r\n            //flip sort direction if current sort field is clicked again\r\n            if (viewModel[collection].orderField() == field) {\r\n                if (viewModel[collection].orderDirection() == \"asc\") {\r\n                    viewModel[collection].orderDirection(\"desc\");\r\n                } else {\r\n                    viewModel[collection].orderDirection(\"asc\");\r\n                }\r\n            }\r\n\r\n            viewModel[collection].orderField(field);\r\n        });\r\n\r\n        //order records when observables changes, so ordering can be changed programmatically\r\n        viewModel[collection].orderField.subscribe(function () {\r\n            ko.bindingHandlers.orderable.sort(viewModel, collection, field);\r\n        });\r\n        viewModel[collection].orderDirection.subscribe(function () {\r\n            ko.bindingHandlers.orderable.sort(viewModel, collection, field);\r\n        });\r\n    },\r\n\r\n    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n        //Start custom buildertrend code\r\n        let enabled = (typeof valueAccessor().enabled !== 'undefined' ? ko.unwrap(valueAccessor().enabled) : true);\r\n        if (!enabled) {\r\n            $(element).removeClass('ko-sortable');\r\n            $(element).off('click');\r\n            return;\r\n        }\r\n        //End custom buildertrend code\r\n\r\n        //get provided options\r\n        var collection = valueAccessor().collection;\r\n        var field = valueAccessor().field;\r\n        var isOrderedByThisField = viewModel[collection].orderField() == field;\r\n\r\n        //apply css binding programmatically\r\n        ko.bindingHandlers.css.update(\r\n            element,\r\n            function () {\r\n                return {\r\n                    sorted: isOrderedByThisField,\r\n                    asc: isOrderedByThisField && viewModel[collection].orderDirection() == \"asc\",\r\n                    desc: isOrderedByThisField && viewModel[collection].orderDirection() == \"desc\"\r\n                };\r\n            },\r\n            allBindingsAccessor,\r\n            viewModel,\r\n            bindingContext\r\n        );\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Returns true if they're equal, false if not equal\r\n * @param {any} firstNumber\r\n * @param {any} secondNumber\r\n * @param {any} digits the number of digits to compare (generally 2 or 4)\r\n */\r\nfunction floatingPointsEqual(firstNumber, secondNumber, digits) {\r\n    if (firstNumber.toFixed(digits) !== secondNumber.toFixed(digits)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction getNumberAsNonFloatingPoint(number, digits) {\r\n    return parseFloat(number.toFixed(digits));\r\n}\r\n\r\n\r\n// NOTE: This fires on change, not keyup\r\n// example data-bind=\"number: ko.observable()\"\r\n// example data-bind=\"number: { value: ko.observable(50), min: 30, max: 100, error: function(attemptedValue, setValue){ alert('value must be between 30 and 100'); } }\"\r\n// example data-bind=\"number: { value: 40.555, step: .001, min: 35.123, max: 50.987 }\"\r\n// Look at the Styleguide for more examples\r\nko.bindingHandlers.number = {\r\n    getOptions: function (params) {\r\n        // returns the custom options combined with defaults so its always in a standard format\r\n\r\n        var options = {};\r\n        var defaultOptions = {\r\n            value: undefined,\r\n            min: 0,\r\n            max: Number.MAX_SAFE_INTEGER,\r\n            error: function () { }, // no-opt function\r\n            step: .01, \r\n            allowNegative: false,\r\n            separator: null\r\n        };\r\n\r\n        if ($.type(params) === \"object\") {\r\n            if (params.digits) {\r\n                throw \"Knockout number binding: You cannot pass in digits as an option, instead use step\";\r\n            }\r\n\r\n            // create options from defaults, override with passed params\r\n            options = $.extend(defaultOptions, params);\r\n        }\r\n        else {\r\n            // params is the value observable\r\n            options = defaultOptions;\r\n            options.value = params;\r\n        }\r\n        \r\n        // digits are needed due to our legacy \"btNumeric\" library, and to resolve floating point issues\r\n        if (Math.floor(options.step) !== options.step) {\r\n            options.digits = options.step.toString().split(\".\")[1].length;\r\n        }\r\n        else {\r\n            options.digits = 0;\r\n        }\r\n\r\n        return options;\r\n    },\r\n\r\n    roundToNearestStep: function (number, options) {\r\n        /**\r\n         * Rounds a number up or down to the nearest multiple of a number (ex: modulo of number and step will always be 0)\r\n         * @param {any} number the number to round\r\n         * @param {any} options\r\n         * @param {any} options.step the multiple to round to\r\n         * @param {any} options.min\r\n         * @param {any} options.max\r\n        */\r\n        var targetStep = options.step * Math.round(number / options.step);\r\n        targetStep = Math.min(targetStep, options.max); // keep the number under the max\r\n        targetStep = Math.max(targetStep, options.min); // keep the number above the min\r\n\r\n        return targetStep;\r\n    },\r\n\r\n    verifyNumber: function (value, element) {\r\n        if (typeof ko.unwrap(value) !== \"number\") {\r\n            throw {\r\n                error: \"The knockout number binding should be passed a number as the value\",\r\n                boundElement: element\r\n            };\r\n        }\r\n    },\r\n\r\n    numberValidation: function (number, options) {\r\n        number = parseFloat(number);\r\n\r\n        if (isNaN(number)) {\r\n            number = options.min;\r\n        }\r\n\r\n        // enforce min/max\r\n        if (number < options.min) {\r\n            options.error(number, options.min);\r\n            number = options.min;\r\n        }\r\n        else if (number > options.max) {\r\n            options.error(number, options.max);\r\n            number = options.max;\r\n        }\r\n\r\n        // round to nearest step\r\n        if (options.step) {\r\n            number = ko.bindingHandlers.number.roundToNearestStep(number, options);\r\n        }\r\n\r\n        return number;\r\n    },\r\n\r\n    init: function (element, valueAccessor) {\r\n        var params = valueAccessor();\r\n        var $element = $(element);\r\n        var options = ko.bindingHandlers.number.getOptions(params);\r\n\r\n        ko.bindingHandlers.number.verifyNumber(options.value, element);\r\n\r\n        // remove non-number chars on keypress (note: copy+pasting can still insert non-number chars)\r\n        $element.on('keypress', function (evt) {\r\n            var charCode = (evt.which) ? evt.which : event.keyCode;\r\n\r\n            // If params are set, allow negative sign and different cultures' decimal separator\r\n            if (params.allowNegative && charCode === 45) {\r\n                return true;\r\n            }\r\n\r\n            if (params.separator && evt.key === params.separator) {\r\n                return true;\r\n            }\r\n\r\n            // ignore non numberic chars (and .)\r\n            if (charCode > 31 && (charCode < 48 || charCode > 57) && charCode !== 46) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        // bind change event\r\n        $element.on('change', function () {\r\n            var newValue = $(this).val();\r\n            newValue = ko.bindingHandlers.number.numberValidation(newValue, options);\r\n\r\n            // no change in value, cancel the users update\r\n            $element.val(getNumberAsNonFloatingPoint(newValue, options.digits));\r\n            if (ko.isWritableObservable(options.value)) {\r\n                // update observable\r\n                options.value(getNumberAsNonFloatingPoint(newValue, options.digits));\r\n            }\r\n        });\r\n\r\n        // auto add step attribute\r\n        if (options.step) {\r\n            $element.attr(\"step\", options.step);\r\n        }\r\n    },\r\n    update: function (element, valueAccessor) {\r\n        var params = valueAccessor();\r\n        var $element = $(element);\r\n        var options = ko.bindingHandlers.number.getOptions(params);\r\n        ko.bindingHandlers.number.verifyNumber(options.value, element);\r\n\r\n        // we could be updating the observable with a invalid value...\r\n        // this could cause issues because now we can get to a bad state, lets validate the set as if it was coming from the UI\r\n        var oldValue = ko.unwrap(options.value);\r\n        var newValue = ko.bindingHandlers.number.numberValidation(oldValue, options);\r\n\r\n        // update observable if we changed the value\r\n        if (floatingPointsEqual(oldValue, newValue, options.digits)) {\r\n            if (ko.isWritableObservable(options.value)) {\r\n                newValue = getNumberAsNonFloatingPoint(newValue, options.digits);\r\n                // update observable\r\n                options.value(newValue);\r\n                $element.val(newValue);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n// example: data-bind=\"cancelSubmit: true\"\r\nko.bindingHandlers.cancelSubmit = {\r\n    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        $(element).on('keydown', function (event) {\r\n            if (event.which == '13') {\r\n                event.preventDefault();\r\n                return false;\r\n            }\r\n        });\r\n    },\r\n};\r\n\r\n// example data-bind=\"currency: { value: ko.observable(50)\"\r\n// Look at the Styleguide for more examples\r\nko.bindingHandlers.currency = {\r\n    getOptions: function (params) {\r\n        // returns the custom options combined with defaults so its always in a standard format\r\n\r\n        var options = {};\r\n        var defaultOptions = {\r\n            value: undefined,\r\n            min: -2147483648,\r\n            max: 2147483647,\r\n            step: .01, // if passed in the currency will be rounded to the nearest valid step\r\n            accounting: false, // currently not set up to do anything - \"accounting mode\" uses () instead of -\r\n            error: function () { }, // callback when min/max is hit\r\n            showCurrencySymbol: false,\r\n            maxDecimalLength: 2,\r\n            minDecimalLength: 2\r\n        };\r\n\r\n        if ($.type(params) === \"object\") {\r\n            if (params.digits) {\r\n                throw \"Knockout currency binding: You cannot pass in digits as an option, instead use step\";\r\n            }\r\n\r\n            // create options from defaults, override with passed params\r\n            options = $.extend(defaultOptions, params);\r\n        }\r\n        else {\r\n            // params is the value observable\r\n            options = defaultOptions;\r\n            options.value = params;\r\n        }\r\n\r\n        // digits are needed due to our legacy \"btNumeric\" library, and to resolve floating point issues\r\n        if (Math.floor(options.step) !== options.step) {\r\n            var split = ko.unwrap(options.value).toString().split(\".\");\r\n            var numberOfDecimalPlaces = split.length === 1 ? 0 : split[1].length;\r\n            \r\n            if (numberOfDecimalPlaces <= options.minDecimalLength) {\r\n                options.digits = options.minDecimalLength;\r\n            } else if (numberOfDecimalPlaces >= options.maxDecimalLength) {\r\n                options.digits = options.maxDecimalLength;\r\n            } else {\r\n                options.digits = numberOfDecimalPlaces;\r\n            }\r\n        }\r\n        else {\r\n            options.digits = 0;\r\n        }\r\n\r\n        return options;\r\n    },\r\n\r\n    roundToNearestStep: function (number, options) {\r\n        /**\r\n         * Rounds a number up or down to the nearest multiple of a number (ex: modulo of number and step will always be 0)\r\n         * @param {any} number the number to round\r\n         * @param {any} options\r\n         * @param {any} options.step the multiple to round to\r\n         * @param {any} options.min\r\n         * @param {any} options.max\r\n         */\r\n        var targetStep = options.step * Math.round(number / options.step);\r\n        targetStep = Math.min(targetStep, options.max); // keep the number under the max\r\n        targetStep = Math.max(targetStep, options.min); // keep the number above the min\r\n        \r\n        return targetStep;\r\n    },\r\n\r\n    numberValidation: function (number, options) {\r\n        number = parseFloat(number);\r\n\r\n        if (isNaN(number)) {\r\n            number = options.min;\r\n        }\r\n\r\n        // enforce min/max\r\n        if (number < options.min) {\r\n            options.error(number, options.min);\r\n            number = options.min;\r\n        }\r\n        else if (number > options.max) {\r\n            options.error(number, options.max);\r\n            number = options.max;\r\n        }\r\n\r\n        // round to nearest step\r\n        if (options.step) {\r\n            number = ko.bindingHandlers.currency.roundToNearestStep(number, options);\r\n        }\r\n\r\n        return number;\r\n    },\r\n\r\n    verifyNumber: function (value, element) {\r\n        if (typeof ko.unwrap(value) !== \"number\") {\r\n            throw {\r\n                error: \"The knockout currency binding should be passed a number as the value\",\r\n                boundElement: element\r\n            };\r\n        }\r\n    },\r\n\r\n    updateElement: function ($element, newValue) {\r\n        if ($element.is(\"input\")) {\r\n            $element.val(newValue);\r\n        }\r\n        else {\r\n            $element.text(newValue);\r\n        }\r\n    },\r\n\r\n    removeFormatting: function ($element, value, options) {\r\n        var valueUnwrapped = ko.unwrap(value);\r\n        valueUnwrapped = getNumberAsNonFloatingPoint(valueUnwrapped, options.digits);\r\n        var minVal = 4;\r\n\r\n        var noZeros = removeExtraZeros(btNumeric.ToString(valueUnwrapped, minVal));\r\n        var withoutSep = stripGroupSeparator(noZeros);\r\n\r\n        ko.bindingHandlers.currency.updateElement($element, withoutSep);\r\n\r\n\r\n        function removeExtraZeros(numStr) {\r\n            var currencySeparator = btNumeric.GetNumberDecimalSeparator();\r\n\r\n            if (numStr.indexOf(currencySeparator) > -1) {\r\n                var regex = new RegExp('[' + currencySeparator + ']*[0]+$');\r\n                return numStr.replace(regex, \"\");\r\n            } else {\r\n                return numStr;\r\n            }\r\n        }\r\n\r\n        function stripGroupSeparator(amount) {\r\n            // Removes group separators \r\n            var nfi = btNumeric.CreateNumberFormatInfo(); //NumberGroupSeparator\r\n            return amount.split(nfi.NumberGroupSeparator).join('');\r\n        }\r\n    },\r\n\r\n    addFormatting: function ($element, value, options) {\r\n        var parsedValue = btNumeric.TryParse(value);\r\n        var newValue = ko.bindingHandlers.currency.numberValidation(btNumeric.TryParse(parsedValue), options); // defaults to null if not in correct format\r\n\r\n        // no change in value, cancel the users update\r\n        $element.val(btNumeric.ToString(getNumberAsNonFloatingPoint(newValue, options.digits), options.digits, false, (options.showCurrencySymbol ? btJScriptGlobals.getBuilderCurrencySymbol : undefined)));\r\n        if (ko.isWritableObservable(options.value)) {\r\n            options.value(getNumberAsNonFloatingPoint(newValue, options.digits));\r\n        }\r\n    },\r\n\r\n    init: function (element, valueAccessor) {\r\n        var params = valueAccessor();\r\n        var $element = $(element);\r\n        var options = ko.bindingHandlers.currency.getOptions(params);\r\n\r\n        ko.bindingHandlers.currency.verifyNumber(options.value, element);\r\n\r\n        if ($element.is(\"input\")) {\r\n            if ($element.attr(\"type\") === \"number\") {\r\n                throw \"The knockout currency binding cannot be used on <input type='number'> because formatted currencys are strings, using <input type='text'> instead - or using the knockout number binding\";\r\n            }\r\n\r\n            $element.on('focusout', function (event) {\r\n                // when removing focus on the input add formatting and update observable\r\n                ko.bindingHandlers.currency.addFormatting($element, $element.val(), options);\r\n                event.stopImmediatePropagation();\r\n            });\r\n            $element.on('focusin', function (event) {\r\n                // when focusing on the input remove formatting\r\n                ko.bindingHandlers.currency.removeFormatting($element, options.value, options);\r\n                event.stopImmediatePropagation();\r\n            });\r\n        }\r\n    },\r\n\r\n    update: function (element, valueAccessor) {\r\n        var params = valueAccessor();\r\n        var $element = $(element);\r\n        var options = ko.bindingHandlers.currency.getOptions(params);\r\n\r\n        ko.bindingHandlers.currency.verifyNumber(options.value, element);\r\n\r\n        // we could be updating the observable with a invalid value...\r\n        // this could cause issues because now we can get to a bad state, lets validate the set as if it was coming from the UI\r\n        var oldValue = ko.unwrap(options.value);\r\n        var newValue = ko.bindingHandlers.currency.numberValidation(oldValue, options);\r\n        \r\n        if (ko.isWritableObservable(options.value)) {\r\n            newValue = getNumberAsNonFloatingPoint(newValue, options.digits);\r\n            // update observable\r\n            options.value(newValue);\r\n        }\r\n\r\n        ko.bindingHandlers.currency.updateElement($element, btNumeric.ToString(newValue, options.digits, false, (options.showCurrencySymbol ? btJScriptGlobals.getBuilderCurrencySymbol : undefined)));\r\n    }\r\n};\r\n\r\n\r\n// on default when clicking on a input this will select the entire text of the input (similar to excel)\r\n// example <input data-bind=\"selectAll: true\" />\r\n// Look at the Styleguide for more examples\r\nko.bindingHandlers.selectAll = {\r\n    init: function (element) {\r\n        var $element = $(element);\r\n\r\n        if (!$element.is('input')) {\r\n            throw \"The selectAll knockout binding should only be used on <input> elements\";\r\n        }\r\n\r\n        // https://stackoverflow.com/questions/3150275/jquery-input-select-all-on-focus\r\n        $element.on('focus', function () {\r\n            var $this = $(this);\r\n\r\n            $this.one('mouseup.mouseupSelect', function () {\r\n                $this.select();\r\n                return false;\r\n            })\r\n                .one('mousedown', function () {\r\n                    // compensate for untriggered 'mouseup' caused by focus via tab\r\n                    $this.off('mouseup.mouseupSelect');\r\n                })\r\n                .select();\r\n        });\r\n    }\r\n};\r\n\r\n// example data-bind=\"popover: 'text to display on click'\"\r\n// example data-bind=\"popover: ko.observable()\"\r\n// options are passed-through, to see a list go to https://getbootstrap.com/docs/3.3/javascript/#popovers\r\n// example data-bind=\"popover: { content: ko.observable(), html: true, trigger: 'hover', title: 'this is my title!', placement: 'right' } }\"\r\nko.bindingHandlers.popover = {\r\n    getOptions: function (params) {\r\n        // returns the custom options combined with defaults so its always in a standard format\r\n\r\n        var options = {};\r\n        var defaultOptions = {\r\n            value: undefined,\r\n            animation: true,\r\n            container: 'body',\r\n            content: undefined,\r\n            delay: 0,\r\n            html: false,\r\n            placement: ko.bindingHandlers.popover.generatePlacement,\r\n            popoverWidth: 175,\r\n            select: false,\r\n            template: undefined,\r\n            title: '',\r\n            trigger: 'click',\r\n            viewport: undefined\r\n        };\r\n\r\n        if ($.type(params) === \"object\") {\r\n            // create options from defaults, override with passed params\r\n            options = $.extend(defaultOptions, params);\r\n        }\r\n        else {\r\n            // params is the value observable\r\n            options = defaultOptions;\r\n            options.content = params;\r\n        }\r\n\r\n        return options;\r\n    },\r\n\r\n    init: function (element, valueAccessor) {\r\n        let params = valueAccessor();\r\n        let $element = $(element);\r\n\r\n        $element.popover(ko.bindingHandlers.popover.getOptions(params));\r\n    },\r\n    update: function (element, valueAccessor) {\r\n        let params = valueAccessor();\r\n        let $element = $(element);\r\n\r\n        $element.data('bs.popover').options.content = params.content;\r\n        $element.data('bs.popover').options.popoverHeight = params.popoverHeight;\r\n    },\r\n\r\n    generatePlacement: function (context, source) {\r\n        // if the height of the popup itself is greater than the docked header, we will move it to display on the bottom to prevent the top of the modal from cutting off the content\r\n        // Reference: https://stackoverflow.com/questions/9956958/changing-the-position-of-bootstrap-popovers-based-on-the-popovers-x-position-in\r\n\r\n        const $source = $(source);\r\n        const $container = $(this.options.container);\r\n        const popoverWidth = ko.unwrap(this.options.popoverWidth);\r\n        const popoverHeight = ko.unwrap(this.options.popoverHeight);\r\n        $(context).css(\"maxWidth\", popoverWidth + \"px\");\r\n\r\n\r\n        // If too close to container top or container bottom, position on opposite side\r\n        // If too close to container right, position on bottom (of left if no room remaining)\r\n        const positionTop = $source.offset().top;\r\n        const positionBottom = positionTop + $source.height();\r\n        const positionRight = $source.offset().left + $source.outerWidth();\r\n\r\n        const containerTop = $container.offset().top;\r\n        const containerBottom = containerTop + $container.height();\r\n        const containerRight = $container.offset().left + $container.width();\r\n\r\n        const overflowTop = positionTop - (popoverHeight / 2) < containerTop;\r\n        const overflowBottom = positionBottom + (popoverHeight / 2) > containerBottom;\r\n        const overflowRight = positionRight + popoverWidth > containerRight;\r\n\r\n        if (overflowTop) {\r\n            return \"bottom\";\r\n        }\r\n        if (overflowBottom) {\r\n            return \"top\";\r\n        }\r\n        if (overflowRight) {\r\n            if (overflowBottom) {\r\n                return \"left\";\r\n            }\r\n\r\n            return \"bottom\"\r\n        }\r\n\r\n        return \"right\";\r\n    }\r\n};\r\n\r\n// Note this binding requires the jquery timeago plugin (https://timeago.yarp.com/), in order to use this you must be using webpack and require timeago\r\n// example: require(\"timeago\");\r\n// format options: ['timeago' *default*, 'short', 'long']\r\nko.bindingHandlers.displayDate = {\r\n    getOptions: function (params) {\r\n        // returns the custom options combined with defaults so its always in a standard format\r\n\r\n        var options = {};\r\n        var defaultOptions = {\r\n            value: undefined,\r\n            format: 'timeago',\r\n            showTime: false\r\n        };\r\n\r\n        if ($.type(params) === \"object\") {\r\n            // create options from defaults, override with passed params\r\n            options = $.extend(defaultOptions, params);\r\n        }\r\n        else {\r\n            // params is the value observable\r\n            options = defaultOptions;\r\n            options.value = params;\r\n        }\r\n\r\n        return options;\r\n    },\r\n\r\n    setupDate: function (element, valueAccessor) {\r\n        var params = valueAccessor();\r\n        var $element = $(element);\r\n        var options = ko.bindingHandlers.displayDate.getOptions(params);\r\n        \r\n        if (options.showTime) {\r\n            // ToDo: implement appending time (supporting all cultures)\r\n            throw {\r\n                error: \"The knockout binding displayDate does not showTime yet\",\r\n                boundElement: element\r\n            };\r\n        }\r\n\r\n        if (!$element.is('time')) {\r\n            throw {\r\n                error: \"The knockout binding displayDate should only be used with a <time> element\",\r\n                boundElement: element\r\n            };\r\n        }\r\n\r\n        var isoFormat = (new Date(ko.unwrap(options.value))).toISOString();\r\n\r\n        // ToDo: this also needs to support all cultures (military time)\r\n        var fullDateTimeFormatted = moment(ko.unwrap(options.value)).format(btJScriptGlobals.builderLongDateFormatForMoment + \" h:mm:ss a\");\r\n        $element\r\n            .attr(\"datetime\", isoFormat)\r\n            .attr(\"title\", fullDateTimeFormatted); // on hover show the full time\r\n        \r\n        switch (options.format) {\r\n            case 'timeago':\r\n                $element.timeago(\"update\", ko.unwrap(options.value));\r\n                $element.timeago();\r\n                break;\r\n\r\n            case 'short':\r\n                $element.text(moment(ko.unwrap(options.value)).format(btJScriptGlobals.builderShortDateFormatForMoment));\r\n                break;\r\n\r\n            case 'long':\r\n                $element.text(moment(ko.unwrap(options.value)).format(btJScriptGlobals.builderLongDateFormatForMoment));\r\n                break;\r\n\r\n            default:\r\n                throw {\r\n                    error: \"The knockout binding displayDate does not support the format '\" + options.format + \"'\",\r\n                    boundElement: element\r\n                };\r\n        }\r\n    },\r\n\r\n    init: function (element, valueAccessor) {\r\n        ko.bindingHandlers.displayDate.setupDate(element, valueAccessor);\r\n    },\r\n    update: function (element, valueAccessor) {\r\n        ko.bindingHandlers.displayDate.setupDate(element, valueAccessor);\r\n    }\r\n};\r\n\r\nko.bindingHandlers.video = {\r\n    init: function (element, valueAccessor) {\r\n        ko.bindingHandlers.video.setup(element, valueAccessor);\r\n    },\r\n    update: function (element, valueAccessor) {\r\n        ko.bindingHandlers.video.setup(element, valueAccessor);\r\n    },\r\n    setup: function (element, valueAccessor) {\r\n        var params = valueAccessor();\r\n\r\n        var parsed = {\r\n            src: \"\",\r\n            play: false,\r\n            loop: false,\r\n            controls: true\r\n        };\r\n\r\n        for (var key in parsed) {\r\n            if (typeof params[key] === \"function\") parsed[key] = ko.unwrap(params[key]());\r\n        }\r\n\r\n        var optStr = \"\";\r\n        if (parsed.controls) optStr += \" controls='true'\";\r\n        if (parsed.loop) optStr += \" loop\";\r\n\r\n        // Clear the video container\r\n        while (element.firstChild) {\r\n            element.removeChild(element.firstChild);\r\n        }\r\n        // Add video to DOM\r\n        var source1 = \"<source src='\" + parsed.src + \".mp4' type='video/mp4'>\";\r\n        var source2 = \"<img src='\" + parsed.src + \".gif'/>\";\r\n        $(element).append(\"<video\" + optStr + \">\" + source1 + source2 + \"</video>\");\r\n\r\n        if (parsed.play) {\r\n            element.firstChild.play();\r\n        } else {\r\n            element.firstChild.pause();\r\n        }\r\n\r\n        return { 'controlsDescendantBindings': true };\r\n    }\r\n};\r\n\r\n// detects when a img/iframe is loaded\r\nko.bindingHandlers.loaded = {\r\n    init: function (element, valueAccessor) {\r\n        let params = ko.unwrap(valueAccessor)();\r\n\r\n        $(element).on('load', function () {\r\n            params(true);\r\n        });\r\n    }\r\n};\r\n\r\n//Custom Knockout binding to show/hide via jQuery's fadeIn()/fadeOut()\r\nko.bindingHandlers.commentsFadeVisible = {\r\n    update: function (element, valueAccessor) {\r\n        // Whenever the value subsequently changes, slowly fade the element in or out\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        if (value === true && $(element).css(\"opacity\") === 0) {\r\n            $(element).fadeTo(600, 1);\r\n        } else if (value === false && $(element).css(\"opacity\") === 1) {\r\n            $(element).fadeTo(600, 0);\r\n        }\r\n    }\r\n};\r\n\r\n// Custom Knockout binding to prevent unwanted event bubbling when binding to the mouseover event.\r\nko.bindingHandlers.stopMouseOverBubble = {\r\n    init: function (element, valueAccessor) {\r\n        ko.utils.registerEventHandler(element, \"mouseover\", function (event) {\r\n            event.cancelBubble = true;\r\n            if (event.stopPropagation) {\r\n                event.stopPropagation();\r\n            }\r\n        });\r\n\r\n        return ko.utils.unwrapObservable(valueAccessor());\r\n    }\r\n};\r\n\r\n$(document).ready(function () {\r\n    //This hack allows for the jquery multi-select, ckeditor to work in jquery ui dialogs\r\n    orig_allowInteraction = $.ui.dialog.prototype._allowInteraction;\r\n\r\n    $.ui.dialog.prototype._allowInteraction = function (event) {\r\n        if ($(event.target).closest('.ui-multiselect-menu').length) {\r\n            return true;\r\n        }\r\n        if ($(event.target).closest('.cke_dialog').length) {\r\n            return true;\r\n        }\r\n        return orig_allowInteraction.apply(this, arguments);\r\n    };\r\n    //End of hack\r\n});"},"./node_modules/script-loader/node_modules/raw-loader/index.js!./jQuery/knockout/knockout.validation-bt.js":function(e,n){e.exports="var BtKoValidation = new function () {\r\n    //Global Variables\r\n    var customExtenders = ['maxLength', 'required', 'readonly'];         // Validators that need their own bindings on the root.\r\n    const EmailSeparator = ';';\r\n    const MaxEmailsPerContact = 6;\r\n\r\n    //Please follow the wiki before adding more rules\r\n    var Rules = {\r\n        BTCultureSpecificNumber: 'btCultureSpecificNumber',\r\n        Digit: 'digit',\r\n        Email: 'email',\r\n        Equal: 'equal',\r\n        Max: 'max',\r\n        MaxDate: 'maxDate',\r\n        MaxDecimalPlaces: 'maxDecimalPlaces',\r\n        MaxEmail: 'maxEmail',\r\n        MaxLength: 'maxLength',\r\n        MaxTime: 'maxTime',\r\n        Min: 'min',\r\n        MinDate: 'minDate',\r\n        MinLength: 'minLength',\r\n        Money: 'money',\r\n        MultiEmail: 'multiEmail',\r\n        NotEqual: 'notEqual',\r\n        Number: 'number',\r\n        Pattern: 'pattern',\r\n        Phone: 'phone',\r\n        Range: 'range',\r\n        Regex: 'regex',\r\n        Required: 'required',\r\n        Step: 'step',\r\n        ValidDate: 'validDate',\r\n        WholeNumber: 'wholeNumber',\r\n        Integer: 'integer'\r\n    }\r\n\r\n    function addValidatorsFromService(vm) {\r\n        ko.utils.objectForEach(vm, function (key, object) {\r\n            if (typeof object === 'object' && object !== null) { //Only want to add validation to objects\r\n                if (object.hasOwnProperty('validators') && object.hasOwnProperty('value')) {\r\n                    ko.utils.arrayForEach(object.validators(), function (validator) {\r\n                        var valType = ko.unwrap(validator.type);\r\n                        if (customExtenders.indexOf(valType) >= 0) {\r\n                            if (valType === 'required') {\r\n                                object[valType] = ko.observable(true);\r\n                            } else {\r\n                                if (object[valType]) {\r\n                                    object[valType](ko.unwrap(validator.value));\r\n                                } else {\r\n                                    object[valType] = ko.observable(ko.unwrap(validator.value));\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                    addValidatorFromService(object.value, object.validators, object.title)\r\n                    if (object.title && ko.isObservable(object.title) && object.required) {\r\n                        object.title(getComputedTitle(object.title(), object.required()));\r\n                    }\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    function initialize() {\r\n        //Init KO Validation\r\n        if (ko.validation) {\r\n            ko.validation.init({ insertMessages: false }, true);\r\n\r\n            initializeCustomBindings()\r\n\r\n            initializeRules();\r\n\r\n            ko.validation.registerExtenders();\r\n        }\r\n    }\r\n\r\n    function initializeRules() {\r\n        //Alias Mappings\r\n        ko.validation.rules['maxValue'] = ko.validation.rules['max'];\r\n        ko.validation.rules['minValue'] = ko.validation.rules['min'];\r\n        ko.validation.rules['Email'] = ko.validation.rules['email'];\r\n        ko.validation.rules['isNumeric'] = ko.validation.rules['btCultureSpecificNumber'];\r\n        ko.validation.rules['Phone'] = ko.validation.rules['phoneUS'];\r\n\r\n        //Validator for max number of emails\r\n        ko.validation.rules['maxEmail'] = {\r\n            validator: function (val) {\r\n                var emails = val.split(EmailSeparator).filter(function (el) { return el.length != 0 });\r\n                return emails.length <= MaxEmailsPerContact;\r\n            },\r\n            message: 'Only ' + MaxEmailsPerContact + ' email addresses allowed'\r\n        };\r\n\r\n        //Validator for multiple valid emails semicolon seperated\r\n        ko.validation.rules['multiEmail'] = {\r\n            validator: function (val, validate) {\r\n                if (!validate) return true;\r\n                if (ko.validation.utils.isEmptyVal(val)) return true;\r\n\r\n                var emailrule = ko.validation.rules['email'];\r\n\r\n                var vals = val.split(/\\s*;\\s*/);\r\n                for (var i = 0; i < vals.length; i++) {\r\n                    if (!emailrule.validator(vals[i], true)) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            },\r\n            message: 'Please enter a valid email'\r\n        };\r\n\r\n        //Valid numeric number\r\n        ko.validation.rules['btCultureSpecificNumber'] = {\r\n            validator: function (val) {\r\n                var isValid = btNumeric.TryParse(val.toString(), function () { }, 2);\r\n                return (isValid != null && !isNaN(isValid));\r\n            },\r\n            message: 'The field must be numeric'\r\n        };\r\n\r\n        //Max decimal places validator, pass in the maxValue for the maximum number of allowed decimal places\r\n        ko.validation.rules['maxDecimalPlaces'] = {\r\n            validator: function (val, maxValue) {\r\n                var valString = val.toString()\r\n                if (valString.indexOf(\"(\") > -1 && valString.indexOf(\")\") > -1) {\r\n                    valString = valString.replace('(', '-').replace(')', '');\r\n                }\r\n                var isValid = btNumeric.TryParse(valString, function () { }, 2);\r\n                if (isValid) {\r\n                    var separator = btNumeric.GetNumberDecimalSeparator();\r\n                    if (valString.indexOf(separator) >= 0) {\r\n                        isValid = valString.split(separator)[1].length <= maxValue;\r\n                        if (!isValid) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                return isValid != null;\r\n            },\r\n\r\n            message: 'The field is limited to {0} decimal places.'\r\n        }\r\n\r\n        //Currency Validator\r\n         ko.validation.rules['money'] = {\r\n             validator: function (value, options) {\r\n                var result = false;\r\n\r\n                if (typeof value !== \"string\") {\r\n                    value = String(value);\r\n                 }\r\n\r\n                 //Ignore validation if there is no value\r\n                 if (value.trim().length == 0) {\r\n                     return true;\r\n                 }\r\n\r\n                //Services use param to send in the max value\r\n                if (!isNaN(options)) {\r\n                    options = {\r\n                        maxValue: options\r\n                    };\r\n                }\r\n\r\n                var maxValue = (options.maxValue || Number.MAX_VALUE);\r\n                var minValue = (options.minValue || -Number.MAX_VALUE);\r\n\r\n                var numericValue = btNumeric.TryParse(value);\r\n                var inRange = (numericValue <= maxValue && numericValue >= minValue);\r\n\r\n                if (inRange) {\r\n                    result = btNumeric.IsValidCurrency(value);\r\n                }\r\n\r\n                return result;\r\n            }\r\n        };\r\n\r\n        //Valid date\r\n        ko.validation.rules['validDate'] = {\r\n            validator: function (value, validateDate) {\r\n                var isValid = true;\r\n                if (validateDate && value && value.length > 0) {\r\n                    isValid = convertDateToMoment(value).isValid();\r\n                }\r\n                return isValid;\r\n            }\r\n        }\r\n\r\n        //Date minimum value\r\n        ko.validation.rules['minDate'] = {\r\n            validator: function (value, minValue) {\r\n                var isValid = true;\r\n                if (minValue && value && value.length > 0) {\r\n                    var mDate = convertDateToMoment(value);\r\n                    isValid = mDate.isValid() && mDate.toDate() >= convertDateToMoment(minValue).toDate();\r\n                }\r\n                return isValid;\r\n            }\r\n        }\r\n\r\n        //Date maximum value\r\n        ko.validation.rules['maxDate'] = {\r\n            validator: function (value, maxValue) {\r\n                var isValid = true;\r\n                if (maxValue && value && value.length > 0) {\r\n                    var mDate = convertDateToMoment(value);\r\n                    isValid = mDate.isValid() && mDate.toDate() <= convertDateToMoment(maxValue).toDate();\r\n                }\r\n                return isValid;\r\n            }\r\n        }\r\n\r\n        //Time maximum value\r\n        ko.validation.rules['maxTime'] = {\r\n            validator: function (value, maxValue) {\r\n                var isValid = true;\r\n                if (maxValue && value && value.length > 0) {                    \r\n                    isValid = convertTimeToMoment(value).toDate() < convertTimeToMoment(maxValue).toDate();                    \r\n                }\r\n                return isValid;\r\n            }\r\n        }\r\n\r\n        //Regex validation. Matches behavior of asp:RegularExpressionValidator\r\n        ko.validation.rules['regex'] = {\r\n            validator: function (value, regexParam) {\r\n                var trimMatches = value.match(/^\\s*(\\S+(\\s+\\S+)*)\\s*$/);\r\n                var trimmedValue = trimMatches == null ? \"\" : trimMatches[1];\r\n                if (trimmedValue.length === 0) {\r\n                    return true;\r\n                }\r\n\r\n                var regExp = regexParam instanceof RegExp ? regexParam : new RegExp(regexParam);\r\n                var matches = regExp.exec(value);\r\n                var hasMatch = matches != null;\r\n                var matchEqualsFullValue = hasMatch && (value == matches[0]);\r\n                return (hasMatch && matchEqualsFullValue);\r\n            }\r\n        }\r\n\r\n        // Overriding functionality on the built in KO required validator, to support dropdown required validator. \r\n        ko.validation.rules['originalRequired'] = ko.validation.rules['required'];\r\n\r\n\r\n        //Required Validator\r\n        ko.validation.rules['required'] = {\r\n            validator: function (value, notSelectedValue) {\r\n                if (typeof (notSelectedValue) == 'boolean') {\r\n                    return ko.validation.rules['originalRequired'].validator(value, notSelectedValue);\r\n                }\r\n                else {\r\n                    return value != notSelectedValue;\r\n                }\r\n            }\r\n        };\r\n\r\n        //Whole number validator\r\n        ko.validation.rules['wholeNumber'] = {\r\n            validator: function (value) {\r\n                return value % 1 == 0;\r\n            }\r\n        }\r\n\r\n        // Integer validator. Assumes empty string = 0.\r\n        ko.validation.rules['integer'] = {\r\n            validator: function (value) {\r\n                return (Number.isSafeInteger(parseInt(value))) || value === \"\";\r\n            }\r\n        }\r\n\r\n        //Numeric range validator\r\n        ko.validation.rules['range'] = {\r\n            validator: function (value, rangeConfig) {\r\n                var range = [];\r\n                var allowDecimals = true;\r\n\r\n                if (Array.isArray(rangeConfig)) {\r\n                    range = rangeConfig;\r\n                } else if (typeof rangeConfig == 'object') {\r\n                    range = rangeConfig.range;\r\n                    allowDecimals = rangeConfig.allowDecimals;\r\n                } else {\r\n                    // Not called correctly\r\n                }\r\n\r\n                var isNumeric = ko.validation.rules['btCultureSpecificNumber'].validator(value);\r\n                var validDecimals = true;\r\n\r\n                if (!allowDecimals) {\r\n                    validDecimals = ko.validation.rules['maxDecimalPlaces'].validator(value, 0);\r\n                }\r\n\r\n                if (isNumeric && validDecimals) {\r\n                    var max = Math.max.apply(null, range);\r\n                    var min = Math.min.apply(null, range);\r\n\r\n                    return value >= min && value <= max;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function initializeCustomBindings() {\r\n        ko.bindingHandlers.readonly = {\r\n            update: function (element, valueAccessor) {\r\n                if (ko.utils.unwrapObservable(valueAccessor)) {\r\n                    $(element).attr('readonly');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function addValidatorFromService(observable, validators, title) {\r\n        ko.utils.arrayForEach(validators(), function (validator) {\r\n            var valType = ko.unwrap(validator.type);\r\n            var knockoutValRule = ko.validation.rules[valType];\r\n            if (knockoutValRule && ko.isObservable(observable)) {\r\n                var summaryMessage = null;\r\n                if (title) {\r\n                    summaryMessage = ko.unwrap(title);\r\n                }\r\n                addValidator(observable, valType, getValue(validator), getMessage(validator), null, summaryMessage);\r\n            }\r\n        });\r\n    }\r\n\r\n    function getValue(validator) {\r\n        var val = ko.unwrap(validator.value);\r\n        switch (ko.unwrap(validator.type)) {\r\n            case 'required':\r\n                if (typeof (val) == \"undefined\") {\r\n                    // No value from our service, is the same as 'required': true in ko validation.\r\n                    return true;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            case 'date':\r\n                // If date is present, that means validate as a date. Knockout Validation expects a boolean.\r\n                return true;\r\n            default:\r\n                return val;\r\n        }\r\n    }\r\n\r\n    function getMessage(validator) {\r\n        var val = ko.unwrap(validator.value);\r\n\r\n        //Custom Message\r\n        if (validator.errorMessage) {\r\n            return ko.unwrap(validator.errorMessage);\r\n        }\r\n\r\n        return getMessageFromValidator(val, validator.type);\r\n    }\r\n\r\n    function getMessageFromValidator(val, type) {\r\n        switch (ko.unwrap(type).toLowerCase()) {\r\n            case 'required':\r\n                return 'Required';\r\n            case 'maxlength':\r\n                return 'Exceeds max length of {0}';\r\n            case 'validdate':\r\n                return 'Must enter a valid date (' + btJScriptGlobals.builderShortDateFormatForMoment + ')';\r\n            case 'money':\r\n                return 'Must enter valid currency.';\r\n            case 'mindate':\r\n                return function (min) {\r\n                    return 'Date must be on or after ' + min;\r\n                };\r\n            case 'maxdate':\r\n                return function (max) {\r\n                    return 'Date must be on or before ' + max;\r\n                };\r\n            case 'maxtime':\r\n                return function (max) {\r\n                    return 'Start time must be before ' + max;\r\n                };\r\n            case 'email':\r\n                return 'Please enter a valid email';\r\n            case 'min':\r\n                return 'Please enter a value greater than or equal to {0}';\r\n            case 'max':\r\n                return 'Please enter a value less than or equal to {0}';\r\n            case 'regex':\r\n                return 'Please check this value';\r\n            case 'phone':\r\n                return 'Please specify a valid US phone number.'\r\n            default:\r\n                return ko.validation.rules[type].message;\r\n        }\r\n    }\r\n\r\n    function convertDateToMoment(value) {\r\n        value = value.replace(/[ /.-]/g, btJScriptGlobals.dateSeperator);\r\n        if (value.indexOf('T') >= 0) {\r\n            value = btDateTimeHandler.dateToShortDateString(btDateTimeHandler.momentFromWebApi(value).toDate());\r\n        }\r\n        return moment(value, btJScriptGlobals.builderShortDateFormatForMoment, true);\r\n    }\r\n\r\n    function isISOFormat(date) {\r\n        return moment(date, \"YYYY-MM-DDTHH:mm:ss\", true).isValid();\r\n    }\r\n\r\n    function convertTimeToMoment(value) {\r\n        return moment(value, btJScriptGlobals.builderTimeFormatForMoment)\r\n    }\r\n\r\n    function getComputedTitle(title, required) {\r\n        // If this is a required field, then add an asterisk to the title, based on our standard. (At the\r\n        // end of the string but before colin, if one is present).\r\n        var computedTitle = title;\r\n        if (computedTitle && required) {\r\n            if (computedTitle.indexOf(':', computedTitle.length - 1) !== -1) {\r\n                computedTitle = computedTitle.replace(':', '*:');\r\n            }\r\n            else {\r\n                computedTitle += '*';\r\n            }\r\n        }\r\n        return computedTitle;\r\n    }\r\n\r\n    function addValidator(element, type, params, message, condition, summaryMessage) { //element = #.value -- type: ex: \"required\" -- params: \"true\" or \"-1\" -- message: \"Field is required\" -- condtion: function\r\n        var obj = {};\r\n        obj[type] = {};\r\n\r\n        //Reformat ISO Dates\r\n        if ((type == Rules.MinDate || type == Rules.MaxDate) && isISOFormat(params)) {\r\n            params = btDateTimeHandler.dateToShortDateString(btDateTimeHandler.momentFromWebApi(params));\r\n        }\r\n\r\n        if (typeof params != 'undefined') {\r\n            obj[type].params = params;\r\n        }\r\n\r\n        if (message) {\r\n            obj[type].message = message;\r\n        }\r\n        else {\r\n            obj[type].message = getMessageFromValidator(params, type);\r\n        }\r\n\r\n        if (condition) {\r\n            obj[type].onlyIf = condition;\r\n        }\r\n\r\n        if (summaryMessage) {\r\n            obj[type].summaryMessage = summaryMessage;\r\n        }\r\n\r\n        element.extend(obj);\r\n    }\r\n\r\n    function initErrors(vm, deep) {\r\n        if (!vm.errors) {\r\n            var options = {\r\n                live: true,\r\n                observable: true,\r\n                deep: true\r\n            }\r\n\r\n            if (typeof (deep) !== 'undefined') {\r\n                options.deep = deep;\r\n            }\r\n            \r\n            vm.errors = ko.validation.group(vm, options);\r\n        }\r\n\r\n        var orgShowAllMessages = vm.errors.showAllMessages;\r\n        vm.errors.showValidationSummary = ko.observable(false);\r\n\r\n        vm.errors.showAllMessages = function (show) {\r\n            if (show === undefined) {\r\n                show = true;\r\n            }\r\n\r\n            orgShowAllMessages(show);\r\n            vm.errors.showValidationSummary(show);\r\n        };\r\n        vm.errors.showAllMessages(false);\r\n}\r\n\r\n    function removeValidators(obj, rulesToRemove) {\r\n        if (rulesToRemove) {\r\n            obj.rules.remove(function (item) {\r\n                var ruleInRemovalList = rulesToRemove.indexOf(item.rule) !== -1;\r\n                return ruleInRemovalList;\r\n            });\r\n        } else {\r\n            obj.rules.removeAll();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds error(s) to the validation summary\r\n     * @param {string|string[]} messages a single string message to show or an array of string messages to show\r\n     * @param {boolean} validationGroup \r\n     */\r\n    function appendToValidationSummary(messages, validationGroup) {\r\n        var $summary = $('.summary-validator-background').first();\r\n        var vGroup = validationGroup ? validationGroup : false;\r\n\r\n        if ($summary.children().length == 0) {\r\n            $summary.append('<div class=\"summary-validator-header\">Please correct the following field(s):</div><div class=\"validation-icon\"></div></div>');\r\n        }\r\n\r\n        if (vGroup) {\r\n            if (typeof(Page_ClientValidate) !== 'undefined' && Page_ClientValidate(vGroup)) {\r\n                $summary.find(\"ul\").remove();\r\n            }\r\n        } else {\r\n            if (typeof (Page_ClientValidate) !== 'undefined' && Page_ClientValidate()) {\r\n                $summary.find(\"ul\").remove();\r\n            }\r\n        }\r\n        \r\n        if (!Array.isArray(messages)) {\r\n            // if it's not an array make it one\r\n            messages = [messages];\r\n        }\r\n\r\n        var koErrors = \"\";\r\n        // loop over and add all the messages\r\n        messages.forEach(function (errorMessage) {\r\n            koErrors += '<li>' + errorMessage + '</li>';\r\n        });\r\n\r\n        if ($summary.find(\".ko-errors\").length) {\r\n            // update existing\r\n            $summary.find(\".ko-errors\").html(koErrors);\r\n        }\r\n        else {\r\n            // add\r\n            $summary.append('<ul class=\"ko-errors\">' + koErrors + '</ul>');\r\n        }\r\n        \r\n        $summary.show();\r\n    }\r\n\r\n    return {\r\n        AddValidatorsFromService: addValidatorsFromService,\r\n        AddValidatorFromService: addValidatorFromService,\r\n        AddValidator: addValidator,\r\n        InitErrors: initErrors,\r\n        Initialize: initialize,\r\n        RemoveValidators: removeValidators,\r\n        AppendToValidationSummary: appendToValidationSummary,\r\n        Rules: Rules,\r\n        GetComputedTitle: getComputedTitle\r\n    }\r\n}\r\n\r\nBtKoValidation.Initialize();\r\n"},"./node_modules/script-loader/node_modules/raw-loader/index.js!./jQuery/throttle/throttle.min.js":function(e,n){e.exports='/*\n * jQuery throttle / debounce - v1.1 - 3/7/2010\n * http://benalman.com/projects/jquery-throttle-debounce-plugin/\n * \n * Copyright (c) 2010 "Cowboy" Ben Alman\n * Dual licensed under the MIT and GPL licenses.\n * http://benalman.com/about/license/\n */\n(function(b,c){var $=b.jQuery||b.Cowboy||(b.Cowboy={}),a;$.throttle=a=function(e,f,j,i){var h,d=0;if(typeof f!=="boolean"){i=j;j=f;f=c}function g(){var o=this,m=+new Date()-d,n=arguments;function l(){d=+new Date();j.apply(o,n)}function k(){h=c}if(i&&!h){l()}h&&clearTimeout(h);if(i===c&&m>e){l()}else{if(f!==true){h=setTimeout(i?k:l,i===c?e-m:e)}}}if($.guid){g.guid=j.guid=j.guid||$.guid++}return g};$.debounce=function(d,e,f){return f===c?a(d,e,false):a(d,f,e!==false)}})(this);'},"./node_modules/script-loader/node_modules/raw-loader/index.js!./jscript/BTStorage.js":function(e,n){e.exports="\r\n(function () {\r\n    window.BTStorage = function () {\r\n        const GENERAL_NAMESPACE = 'General';\r\n\r\n        this.keys = {};\r\n        this.keys[GENERAL_NAMESPACE] = {\r\n            'SelectedJobID': 'selectedJobID'\r\n        };\r\n\r\n        return {\r\n            Keys: keys\r\n        }\r\n    }();\r\n})();"},"./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/BTGoogleAnalytics.js":function(e,n){e.exports="window.BTGoogleAnalytics = new function () {\n  var gaPageCat;\n  var gaViewTypeCategory;\n  var dialogSelector = '.ui-dialog, [data-ga-frame]:visible';\n  var dialogTitleSelector = '.ui-dialog-title:visible, [data-ga-frame-title]:visible';\n  function initializeGA4() {\n    window.dataLayer = window.dataLayer || [];\n    window.gtag = function () {\n      window.dataLayer.push(arguments);\n    };\n    window.gtag('js', new Date());\n    window.gtag('config', btJScriptGlobals.googleAnalytics.ga4Id);\n  }\n  function initializeGALegacy() {\n    window.ga = window.ga || function () {\n      (ga.q = ga.q || []).push(arguments);\n    };\n    ga.l = +new Date();\n    ga('create', btJScriptGlobals.googleAnalytics.gaUA, 'auto');\n    ga('require', 'urlChangeTracker');\n    gaPageCat = btJScriptGlobals.googleAnalytics.gaBasePageName || btJScriptGlobals.googleAnalytics.gapagecategory || window.location.href;\n\n    // Send User Information if available\n    if (btJScriptGlobals.userId) {\n      ga('set', 'userId', btJScriptGlobals.userId);\n      ga('set', 'dimension1', btJScriptGlobals.getBuilderId);\n      ga('set', 'dimension2', btJScriptGlobals.userId);\n      ga('set', 'dimension3', btJScriptGlobals.googleAnalytics.priceTier);\n      ga('set', 'dimension4', btJScriptGlobals.googleAnalytics.setupDate);\n      ga('set', 'dimension5', btJScriptGlobals.googleAnalytics.builderTypes);\n      ga('set', 'dimension6', btJScriptGlobals.googleAnalytics.contractorType);\n      ga('set', 'dimension7', btJScriptGlobals.googleAnalytics.primaryProjectType);\n      if (btJScriptGlobals.googleAnalytics.ga4Id) {\n        gtag('set', 'user_properties', {\n          builder_id: btJScriptGlobals.getBuilderId,\n          user_id: btJScriptGlobals.userId,\n          price_tier: btJScriptGlobals.googleAnalytics.priceTier,\n          setup_date: btJScriptGlobals.googleAnalytics.setupDate,\n          builder_types: btJScriptGlobals.googleAnalytics.builderTypes,\n          contractor_type: btJScriptGlobals.googleAnalytics.contractorType,\n          primary_project_type: btJScriptGlobals.googleAnalytics.primaryProjectType\n        });\n      }\n    }\n\n    //Send pageview\n    ga('send', 'pageview');\n\n    //Setup listener events\n    $(\"body\").on(\"click\", \"*[data-ga-action-click]\", checkGAEvent);\n    $(\"body\").on(\"change\", \"*[data-ga-action-change]\", checkGAEvent);\n    $(\"body\").on(\"focusout\", \"*[data-ga-action-focusout]\", checkGAEvent);\n    $(\"body\").on(\"blur\", \"*[data-ga-action-blur]\", checkGAEvent);\n  }\n  function initialize() {\n    if (typeof Global !== 'undefined') {\n      gaViewTypeCategory = Global.Constants.GoogleAnalytics.ViewType.GoogleAnalyticsViewTypeCategory;\n    }\n\n    //Setup for non master pages\n    if (typeof btJScriptGlobals == 'undefined') {\n      window.btJScriptGlobals = {};\n    }\n    if (typeof googleAnalytics != 'undefined' && typeof btJScriptGlobals.googleAnalytics == 'undefined') {\n      window.btJScriptGlobals.googleAnalytics = window.googleAnalytics;\n    }\n\n    //Setup Google Analytics\n    if (typeof btJScriptGlobals.googleAnalytics != 'undefined') {\n      if (typeof btJScriptGlobals.googleAnalytics.ga4Id !== \"undefined\" && btJScriptGlobals.googleAnalytics.ga4Id !== \"\") {\n        initializeGA4();\n      }\n      if (typeof btJScriptGlobals.googleAnalytics.gaUA !== \"undefined\" && btJScriptGlobals.googleAnalytics.gaUA !== \"\") {\n        initializeGALegacy();\n      }\n    }\n  }\n  function checkGAEvent(evt) {\n    if (evt && evt.target) {\n      var $target = $(evt.target);\n      if ($target) {\n        if ($target.attr('data-ga-action-click')) {\n          sendEvent($target.attr('data-ga-action-click'));\n        } else if ($target.attr('data-ga-action-change')) {\n          sendEvent($target.attr('data-ga-action-change'));\n        } else if ($target.attr('data-ga-action-focusout')) {\n          sendEvent($target.attr('data-ga-action-focusout'));\n        } else if ($target.attr('data-ga-action-blur')) {\n          sendEvent($target.attr('data-ga-action-blur'));\n        }\n      }\n    }\n  }\n  function sendEvent(action, category, label, value) {\n    // Default category\n    if (!category) {\n      category = btJScriptGlobals.googleAnalytics.gapagecategory;\n    }\n\n    // Default label\n    if (!label) {\n      label = btJScriptGlobals.googleAnalytics.gapagelabel;\n    }\n\n    // If contain data then send the event\n    if (ga && action) {\n      if (!category) {\n        if (!btJScriptGlobals.isProduction) {\n          // GA won't accept events without a category, so we can't deliver this event.\n          // Triggering a GA event when we don't have a page category (or category argument to this function) is likely an error, so logging as such in non-prod envs\n          console.error(\"Google Analytics event was not sent due to missing GA category on page\");\n        }\n      } else {\n        if (typeof btJScriptGlobals.googleAnalytics.gaUA !== \"undefined\" && btJScriptGlobals.googleAnalytics.gaUA !== \"\") {\n          ga('send', 'event', '' + category + '', '' + action + '', '' + label + '', value);\n        }\n        sendGA4Event(action, category, label, value);\n      }\n    }\n  }\n  function sendGA4Event(action, category, label, value) {\n    if (typeof btJScriptGlobals.googleAnalytics.ga4Id !== \"undefined\" && btJScriptGlobals.googleAnalytics.ga4Id !== \"\" && typeof gtag !== \"undefined\" && action) {\n      var eventData = {};\n      if (category !== null && category !== undefined) {\n        eventData['event_category'] = category;\n      }\n      if (label !== null && label !== undefined) {\n        eventData['event_label'] = label;\n      }\n      if (value !== null && value !== undefined) {\n        eventData['value'] = value;\n      }\n      gtag('event', action, eventData);\n    }\n  }\n  function generateClickViewTypeEvent(evt, actionName, tabName) {\n    if (evt && evt.target) {\n      var $target = $(evt.target);\n      var $currentTarget = $(evt.currentTarget);\n      var isBasePage = window === window.top;\n      var actionTitle = actionName || $currentTarget.attr('data-ga-click') || $target.attr('data-ga-click');\n      var category = $currentTarget.attr('data-ga-cat') || $target.attr('data-ga-cat');\n      var pageTitle = $currentTarget.attr('data-ga-frame-title') || $target.attr('data-ga-frame-title');\n      var tab = tabName || $currentTarget.attr('data-ga-tab') || $target.attr('data-ga-tab');\n      if (!actionTitle) {\n        actionTitle = $.trim($target.val() || $target.text());\n      }\n      if (!pageTitle) {\n        pageTitle = $.trim(isBasePage && $target.parents(dialogSelector).length === 0 ? gaPageCat : window.parent.$(dialogTitleSelector).text());\n      }\n      var action = pageTitle + ' - ' + actionTitle;\n      if (!category) {\n        if (isBasePage && $target.parents(dialogSelector).length === 0) {\n          if (tab) {\n            category = gaViewTypeCategory.Tab;\n          } else {\n            category = gaViewTypeCategory.Page;\n          }\n        } else if (window.top !== window.parent) {\n          if (tab) {\n            category = gaViewTypeCategory.TabInModal;\n          } else {\n            category = gaViewTypeCategory.ModalInModal;\n          }\n        } else {\n          if (tab) {\n            category = gaViewTypeCategory.TabInModal;\n          } else {\n            category = gaViewTypeCategory.Modal;\n          }\n        }\n      }\n      sendViewTypeEvent(action, category);\n    }\n  }\n  function sendViewTypeEvent(action, category, label) {\n    if (typeof ga != 'undefined') {\n      var args = ['send', 'event', category, action];\n      if (label) {\n        args.push(label);\n      }\n      ga.apply(null, args);\n      sendGA4Event(action, category, label);\n    }\n  }\n  return {\n    Initialize: initialize,\n    GenerateClickViewTypeEvent: generateClickViewTypeEvent,\n    SendEvent: sendEvent,\n    SendViewTypeEvent: sendViewTypeEvent\n  };\n}();\n$(document).ready(function () {\n  var enableGA = typeof btJScriptGlobals === 'undefined' || btJScriptGlobals.appDefaultFlags.enableGoogleAnalytics;\n  if (typeof BTGoogleAnalytics != 'undefined' && typeof BTGoogleAnalytics.Initialize == 'function' && enableGA) {\n    BTGoogleAnalytics.Initialize();\n  }\n});"},"./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/ColorPickerDropDown.js":function(e,n){e.exports="window.ColorPickerDropDown = function () {\n  var colors = [];\n  var defaultOptions = {\n    selected: null\n  };\n  function onColorChange(ev) {\n    // Set the background color for this element.\n    var color = $(this).val();\n    $(this).css('background-color', color);\n  }\n  return {\n    initializeColors: function initializeColors(colorJsonString) {\n      colors = JSON.parse(colorJsonString);\n      //Trigger any initialization code waiting for color picker\n      $('head').trigger(\"ColorPicker.AfterColorInit\");\n    },\n    initializeDropDown: function initializeDropDown(id, options) {\n      options = $.extend({}, defaultOptions, options);\n      var $elem = $('#' + id);\n\n      // Fill the color picker options.\n      for (var i = 0; i < colors.length; i++) {\n        var color = colors[i];\n        var $opt = $('<option></option>').val(color.value).css('background-color', color.value).text(color.name);\n        $elem.append($opt);\n      }\n\n      // If there is a selected value passed in via the options, set the selected value now.\n      if (options.selected !== null) {\n        $elem.val(options.selected);\n      }\n\n      // Set the CSS class on the color picker so that it can be styled consistently.\n      $elem.addClass('colorPicker');\n\n      // Hook up the color picker event handlers, and initialize the color picker to the correct state.\n      $elem.change(onColorChange);\n      $elem.trigger('change');\n    },\n    setValue: function setValue(id, value) {\n      var $elem = $(id);\n      $elem.val(value);\n      $elem.trigger('change');\n    },\n    getColorDefinitions: function getColorDefinitions() {\n      return colors;\n    },\n    // Compare two CSS colors, regardless of what the browser uses for its internal color format.\n    compareColors: function compareColors(left, right) {\n      // Adapted from http://stackoverflow.com/a/11943970/645511\n      // When reading CSS colors using jQuery's .css(), the return value is in the format the browser uses internally.\n      // But the formats used by each browser can be different. For example, IE uses '#rrggbb'.\n      // But Chrome will return a string in the format of 'rgba(r, g, b, a)'. \n      // This method allows us to compare colors without having to worry about the browser's internal format.\n\n      // Create a dummy element to assign colors to.\n      var $dummy = $('<div/>');\n\n      // Set the color to the left color value, and read it back.\n      $dummy.css('color', left);\n      var adjustedLeft = $dummy.css('color');\n\n      // Set the color to the right color value, and read it back.\n      $dummy.css('color', right);\n      var adjustedRight = $dummy.css('color');\n\n      // Both colors are now adjusted to use the browser's internal format,\n      // so we can compare them directly.\n      return adjustedLeft === adjustedRight;\n    }\n  };\n}();"},"./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/JobsiteSlider.js":function(e,n){e.exports='window.JobsiteSlider = function () {\n  var eventListeners = [];\n  return {\n    // this was initially setup to also pass in data if the picker was being collapsed, but no place uses this information, so i removed it\n    callEventListeners: function callEventListeners() {\n      return eventListeners.forEach(function (listener) {\n        return listener();\n      });\n    },\n    // This handles events for when pages want to know when the jobpicker is being collapsed or expanded\n    subscribeToNotifications: function subscribeToNotifications(eventHandler) {\n      if (typeof eventHandler === "function") {\n        eventListeners.push(eventHandler);\n      }\n    }\n  };\n}();'},"./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/React/ReactDialogHandler.js":function(e,n){e.exports='/*\r\n * React url\'s need to have the portal type in the URL, this function will automatically add /app/ and portal type to the url\r\n * You should call this on every react link\r\n * @param url the url path to the react page (WITHOUT /app/)\r\n * @example addPortalTypeToURL("/warranty/123")\r\n **/\nfunction addPortalTypeToURL(url) {\n  var portalType = "";\n  if (btJScriptGlobals.loginTypeInt === Global.Enums.BTLoginTypes.OWNER) {\n    portalType = "/Owner";\n  } else if (btJScriptGlobals.loginTypeInt === Global.Enums.BTLoginTypes.SUBS) {\n    portalType = "/Subs";\n  } else if (btJScriptGlobals.loginTypeInt === Global.Enums.BTLoginTypes.BTADMIN) {\n    portalType = "/Admin";\n  }\n  return "/app".concat(portalType).concat(url);\n}\n\n/**\r\n * Given an entity URL, appends linked RFI submodal and fromRfi QSP (if rfiId / fromRfi are provided). Returns the URL with RFI information added\r\n */\nfunction appendRfiInfoToUrl(baseUrl, jobId, rfiId, fromRfi) {\n  var fromRFIQS = "";\n  if (fromRfi === true) {\n    fromRFIQS = appendQueryParam(fromRFIQS, "fromRFI", "true");\n  }\n  var rfiPath = "";\n  if (rfiId !== undefined) {\n    rfiPath = "/RFI/".concat(rfiId, "/").concat(jobId);\n  }\n  return "".concat(baseUrl).concat(rfiPath).concat(fromRFIQS);\n}\n\n/**\r\n * Given an entity URL, appends linked bid submodal and fromBid QSP (if bidId / fromBid are provided). Returns the URL with bid information added\r\n */\nfunction appendBidInfoToUrl(baseUrl, jobId, bidId, fromBid) {\n  var fromBidQS = "";\n  if (fromBid === true) {\n    fromBidQS = appendQueryParam(fromBidQS, "fromBid", "true");\n  }\n  var bidPath = "";\n  if (bidId !== undefined) {\n    bidPath = "/Bid/".concat(bidId, "/").concat(jobId);\n  }\n  return "".concat(baseUrl).concat(bidPath).concat(fromBidQS);\n}\n\n/**\r\n * Given entity ID and job ID, logs an error in non-prod envs if entity ID is nonzero but job ID is zero.\r\n */\nfunction assertJobIdProvidedForExistingEntity(entityId, jobId) {\n  if (!btJScriptGlobals.isProduction) {\n    var entityExists = entityId > 0;\n    var jobIdProvided = jobId > 0;\n    if (entityExists && !jobIdProvided) {\n      //When viewing an existing entity, we should always be passing a nonzero job ID, so that we can eventually remove job ID from state.\n      console.error("Job ID incorrectly provided for existing entity. Please update this call to ReactDialogHandler.js");\n    }\n  }\n}\n\n/**\r\n * If current page has a job picker, returns the selected job ID. Else, returns 0\r\n */\nfunction getSelectedJobIdOrZero() {\n  var jobPickerId = window.AsyncJobPickerHelper.getSelectedJobId();\n  return jobPickerId || 0;\n}\n\n/**\r\n * Appends new segments to the base URL for each parameter that is not undefined nor null.\r\n * Parameters will be appended in the order of the array passed in.\r\n * @param {string} baseUrl\r\n * @param {Array} paramValues\r\n */\nfunction appendOptionalUrlParams(baseUrl, paramValues) {\n  paramValues = paramValues.filter(function (param) {\n    return typeof param !== "undefined" && param !== null;\n  });\n  if (paramValues.length > 0) {\n    return "".concat(baseUrl).concat(baseUrl.endsWith("/") ? "" : "/").concat(paramValues.join("/"));\n  }\n  return baseUrl;\n}\n\n/**\r\n * Given a base URL and a query param\'s key / value, returns a URL with the param added, unless that param has value undefined. Uses \'?\' or \'&\' as appropriate\r\n * @param {any} baseUrl\r\n * @param {any} paramKey\r\n * @param {any} paramValue\r\n */\nfunction appendQueryParam(baseUrl, paramKey, paramValue) {\n  if (typeof paramValue !== "undefined") {\n    var param = "".concat(paramKey, "=").concat(paramValue);\n    if (baseUrl.includes("?")) {\n      return "".concat(baseUrl, "&").concat(param);\n    } else {\n      return "".concat(baseUrl, "?").concat(param);\n    }\n  } else {\n    return baseUrl;\n  }\n}\n\n/**\r\n * Removes the prepended characters from document instance ids.\r\n * Needed when passing in values from pages that prepend "d" to the document instance ids.\r\n * @param {number[]} documentInstanceIds\r\n */\nfunction removeDocumentPrependedCharacters(documentInstanceIds) {\n  return documentInstanceIds.replace(/d/g, "");\n}\n\n/**\r\n * Removes the prepended characters from folder ids.\r\n * Needed when passing in values from pages that prepend "f" to the folder ids.\r\n * @param {number[]} folderIds\r\n */\nfunction removeDocumentFolderPrependedCharacters(folderIds) {\n  return folderIds.replace(/f/g, "");\n}\n\n/**\r\n * Provides singular and plural names for the different media types.\r\n */\nvar MediaTypeNames = new Map([[Global.Enums.Documents.MediaTypes.Document, {\n  singular: \'Document\',\n  plural: \'Documents\'\n}], [Global.Enums.Documents.MediaTypes.Photo, {\n  singular: \'Photo\',\n  plural: \'Photos\'\n}], [Global.Enums.Documents.MediaTypes.Video, {\n  singular: \'Video\',\n  plural: \'Videos\'\n}]]);\nwindow.ReactDialogHandler = {\n  Bid: {\n    GetPrintLink: function GetPrintLink(id) {\n      return addPortalTypeToURL("/Bid/Print?id=".concat(id));\n    },\n    OpenPrintWindow: function OpenPrintWindow(id) {\n      var link = window.ReactDialogHandler.Bid.GetPrintLink(id);\n      window.open(link, \'_bids\', \'width=800,height=600,left=200,top=200,resizable=yes,scrollbars=yes\');\n    },\n    GetDetailsLink: function GetDetailsLink(id, jobId) {\n      var openedFrom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Global.Enums.Bids.OpenedFrom.Nothing;\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      var builderId = parseInt(window.btJScriptGlobals.getBuilderId);\n      assertJobIdProvidedForExistingEntity(id, jobId);\n      var url = "/Bid/".concat(id, "/").concat(jobId, "/").concat(openedFrom, "/").concat(builderId);\n      return addPortalTypeToURL(url);\n    },\n    OpenDetailsWindow: function OpenDetailsWindow(id, jobId, openedFrom, closeCallback) {\n      var link = window.ReactDialogHandler.Bid.GetDetailsLink(id, jobId, openedFrom);\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Bid Request".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "1050px",\n        height: "800px",\n        src: link,\n        closeCallback: closeCallback\n      });\n    }\n  },\n  BidPackage: {\n    GetPrintLink: function GetPrintLink(ids) {\n      return addPortalTypeToURL("/BidPackage/Print?ids=".concat(ids));\n    },\n    OpenPrintWindow: function OpenPrintWindow(ids) {\n      var link = window.ReactDialogHandler.BidPackage.GetPrintLink(ids);\n      window.open(link, \'_bidPackages\', \'width=800,height=600,left=200,top=200,resizable=yes,scrollbars=yes\');\n    },\n    GetDetailsLink: function GetDetailsLink(id, jobId, rfiId, fromRfi, bidId, isTemplateMode, initialTab) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      assertJobIdProvidedForExistingEntity(id, jobId);\n      var url = "/BidPackage/".concat(id, "/").concat(jobId);\n      url = appendRfiInfoToUrl(url, jobId, rfiId, fromRfi);\n      url = appendBidInfoToUrl(url, jobId, bidId, undefined);\n      url = appendQueryParam(url, "isTemplateMode", isTemplateMode);\n      url = appendQueryParam(url, "initialTab", initialTab);\n      return addPortalTypeToURL(url);\n    },\n    OpenDetailsWindow: function OpenDetailsWindow(id, jobId, rfiId, fromRfi, bidId, isTemplateMode, initialTab, closeCallback) {\n      var link = window.ReactDialogHandler.BidPackage.GetDetailsLink(id, jobId, rfiId, fromRfi, bidId, isTemplateMode, initialTab);\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Bid Package".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "1400px",\n        height: "1000px",\n        src: link,\n        closeCallback: closeCallback\n      });\n    }\n  },\n  ChangeOrder: {\n    GetDetailsLink: function GetDetailsLink(id, jobId, rfiId, fromRfi, bidId, fromBid) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      assertJobIdProvidedForExistingEntity(id, jobId);\n      var baseUrl = "/ChangeOrder/".concat(id, "/").concat(jobId);\n      var baseUrlWithRfi = appendRfiInfoToUrl(baseUrl, jobId, rfiId, fromRfi);\n      var baseUrlWithRfiAndBid = appendBidInfoToUrl(baseUrlWithRfi, jobId, bidId, fromBid);\n      return addPortalTypeToURL(baseUrlWithRfiAndBid);\n    },\n    OpenDetailsWindow: function OpenDetailsWindow(id, jobId, rfiId, fromRfi, bidId, fromBid, closeCallback) {\n      var link = window.ReactDialogHandler.ChangeOrder.GetDetailsLink(id, jobId, rfiId, fromRfi, bidId, fromBid);\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Change Order".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "1500px",\n        height: "1000px",\n        src: link,\n        closeCallback: closeCallback\n      });\n    },\n    GetPrintLink: function GetPrintLink(coIds) {\n      return addPortalTypeToURL("/ChangeOrder/Print?ids=".concat(coIds));\n    },\n    OpenPrintWindow: function OpenPrintWindow(coIds, sortExp, sortDir) {\n      var link = window.ReactDialogHandler.ChangeOrder.GetPrintLink(coIds);\n      if (sortExp !== null && sortExp !== undefined) {\n        link += "&sortExp=".concat(sortExp);\n      }\n      if (sortDir) {\n        link += "&sortDir=".concat(sortDir);\n      }\n      window.open(link, \'_changeOrders\', \'width=800,height=600,left=200,top=200,resizable=yes,scrollbars=yes\');\n    },\n    GetChangeOrderPaymentDetailsLink: function GetChangeOrderPaymentDetailsLink(invoiceId) {\n      return addPortalTypeToURL("/Payments/".concat(invoiceId, "/ChangeOrderPayment"));\n    },\n    OpenChangeOrderPaymentDetailsWindow: function OpenChangeOrderPaymentDetailsWindow(invoiceId, closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Change Order Payment".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        height: \'520px\',\n        width: \'800px\',\n        src: window.ReactDialogHandler.ChangeOrder.GetChangeOrderPaymentDetailsLink(invoiceId),\n        closeCallback: closeCallback\n      });\n    },\n    GetChangeOrderApprovalSuccessLink: function GetChangeOrderApprovalSuccessLink() {\n      return addPortalTypeToURL("/ChangeOrder/ApprovalSuccess");\n    },\n    OpenChangeOrderApprovalSuccessWindow: function OpenChangeOrderApprovalSuccessWindow(closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: \'Change Order Approved\',\n        height: \'280px\',\n        width: \'500px\',\n        src: window.ReactDialogHandler.ChangeOrder.GetChangeOrderApprovalSuccessLink(),\n        closeCallback: closeCallback\n      });\n    },\n    GetOwnerRequestLink: function GetOwnerRequestLink(coId, jobId) {\n      return "/app/Owner/ChangeOrders/".concat(coId, "/").concat(jobId, "/Request");\n    },\n    OpenOwnerRequestWindow: function OpenOwnerRequestWindow(coId, jobId, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: \'Change Order Request\',\n        width: \'800px\',\n        height: \'638px\',\n        src: window.ReactDialogHandler.ChangeOrder.GetOwnerRequestLink(coId, jobId),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  Job: {\n    GetDetailsLink: function GetDetailsLink(jobId) {\n      var isNewFromTemplate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var preapprovalId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var launchAccountingLinkCustomer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n      var defaultTab = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "1";\n      var accessedFromContact = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var accessedFromLead = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var ownerInvoiceId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n      var isRiskInsurancePayment = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      var link = addPortalTypeToURL("/Job/".concat(jobId, "/").concat(isNewFromTemplate, "/").concat(launchAccountingLinkCustomer, "/").concat(preapprovalId, "/").concat(defaultTab, "/").concat(accessedFromContact, "/").concat(accessedFromLead, "/").concat(ownerInvoiceId).concat(isRiskInsurancePayment ? "/RiskInsurance/JobsiteRequestForm/".concat(jobId) : ""));\n      return link;\n    },\n    OpenDetails: function OpenDetails(jobId) {\n      var preapprovalId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var isNewFromTemplate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var launchAccountingLinkCustomer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n      var defaultTab = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n      var isRiskInsurancePayment = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var closeCallback = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : undefined;\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Job".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "1100px",\n        height: "1300px",\n        src: window.ReactDialogHandler.Job.GetDetailsLink(jobId, isNewFromTemplate, preapprovalId, launchAccountingLinkCustomer, defaultTab, false, false, null, isRiskInsurancePayment),\n        closeCallback: closeCallback\n      });\n    },\n    GetJobFromTemplateLink: function GetJobFromTemplateLink(leadId, jobType, soldLeadDate) {\n      return addPortalTypeToURL("/JobFromTemplate/".concat(leadId, "/").concat(jobType, "/").concat(soldLeadDate));\n    },\n    OpenJobFromTemplateWindow: function OpenJobFromTemplateWindow(leadId, jobType, soldLeadDate, closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: \'New Job From Template\',\n        height: \'600px\',\n        width: \'930px\',\n        src: window.ReactDialogHandler.Job.GetJobFromTemplateLink(leadId, jobType, soldLeadDate),\n        closeCallback: closeCallback\n      });\n    },\n    GetJobPriceSummaryLink: function GetJobPriceSummaryLink(jobId, printOnLoad) {\n      return addPortalTypeToURL("/JobPriceSummary/".concat(jobId, "/").concat(printOnLoad));\n    },\n    OpenJobPriceSummary: function OpenJobPriceSummary(jobId, printOnLoad) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Job Price Summary",\n        width: "765px",\n        height: "700px",\n        src: window.ReactDialogHandler.Job.GetJobPriceSummaryLink(jobId, printOnLoad)\n      });\n    },\n    GetJobPriceSummaryPrintLink: function GetJobPriceSummaryPrintLink(jobId, printOnLoad) {\n      return addPortalTypeToURL("/JobPriceSummary/Print/".concat(jobId, "/").concat(printOnLoad));\n    },\n    OpenJobPriceSummaryPrint: function OpenJobPriceSummaryPrint(jobId, printOnLoad) {\n      window.open(window.ReactDialogHandler.Job.GetJobPriceSummaryPrintLink(jobId, printOnLoad));\n    },\n    RefreshAfterClose: function RefreshAfterClose() {\n      var parent = btMaster.getParentWindow() || window;\n      parent.location.reload();\n    }\n  },\n  Selection: {\n    GetPrintLink: function GetPrintLink(jobIds, selectionIds, options) {\n      var sortParams = "";\n      if (options && options.sort !== undefined && options.sort.expression !== undefined && options.sort.direction !== undefined) {\n        var sortDirectionAsNumber = 0; // asc\n        if (options.sort.direction.toLowerCase() === "desc") {\n          sortDirectionAsNumber = 1; // desc\n        }\n\n        sortParams = "&sortColumn=".concat(options.sort.expression, "&sortDirection=").concat(sortDirectionAsNumber);\n      }\n      return addPortalTypeToURL("/Selection/Print/?ids=".concat(selectionIds).concat(sortParams, "&jobIds=").concat(jobIds));\n    },\n    OpenPrintWindow: function OpenPrintWindow(jobIds, selectionIds, options) {\n      window.open(window.ReactDialogHandler.Selection.GetPrintLink(jobIds, selectionIds, options), \'_selections\', \'width=800,height=800,left=200,top=200,resizable=yes,scrollbars=yes\');\n    },\n    GetDetailsLink: function GetDetailsLink(selectionId, jobId, lockingChoiceId) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      var lockingChoiceQS = lockingChoiceId ? "?lockingChoiceId=".concat(lockingChoiceId) : "";\n      return addPortalTypeToURL("/Selection/".concat(selectionId, "/").concat(jobId).concat(lockingChoiceQS));\n    },\n    OpenDetails: function OpenDetails(selectionId, jobId, closeCallback, lockingChoiceId) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: \'iframe\',\n        title: "Selection".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: \'1500px\',\n        height: \'auto\',\n        src: window.ReactDialogHandler.Selection.GetDetailsLink(selectionId, jobId, lockingChoiceId),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  SelectionChoice: {\n    GetDetailsLink: function GetDetailsLink(choiceId, jobId, selectionId) {\n      var link = addPortalTypeToURL("/SelectionChoice/".concat(choiceId, "/").concat(jobId));\n      if (selectionId) {\n        link += "/".concat(selectionId);\n      }\n      return link;\n    },\n    OpenDetails: function OpenDetails(choiceId, jobId, selectionId, closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: \'iframe\',\n        title: "Selection Choice".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: \'1500px\',\n        height: \'auto\',\n        src: window.ReactDialogHandler.SelectionChoice.GetDetailsLink(choiceId, jobId, selectionId),\n        closeCallback: closeCallback\n      });\n    },\n    GetDependentSelectionsLink: function GetDependentSelectionsLink(choiceId, jobId) {\n      return "/app/DependentSelections/".concat(choiceId, "/").concat(jobId);\n    },\n    OpenDependentSelections: function OpenDependentSelections(choiceId, jobId) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: \'Dependent Selections\',\n        height: \'500px\',\n        width: \'600px\',\n        src: window.ReactDialogHandler.SelectionChoice.GetDependentSelectionsLink(choiceId, jobId)\n      });\n    },\n    GetCopyChoiceFromSelectionLink: function GetCopyChoiceFromSelectionLink(targetSelectionId, jobId) {\n      return "/app/CopyChoicesFromSelection/".concat(targetSelectionId, "/").concat(jobId);\n    },\n    OpenCopyChoiceFromSelection: function OpenCopyChoiceFromSelection(targetSelectionId, jobId) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Add From Other Selection",\n        height: "500px",\n        width: "740px",\n        src: window.ReactDialogHandler.SelectionChoice.GetCopyChoiceFromSelectionLink(targetSelectionId, jobId),\n        closeCallback: function closeCallback(element, event, ui, data) {\n          if (data && data.toastMessage && data.toastType) {\n            switch (data.toastType) {\n              case "success":\n                btToastMessages.success(data.toastMessage);\n                break;\n              case "danger":\n                btToastMessages.danger(data.toastMessage);\n                break;\n            }\n          }\n        }\n      });\n    }\n  },\n  Allowance: {\n    GetPrintLink: function GetPrintLink(jobId, allowanceId) {\n      var link = "/Allowance/Print/?jobId=".concat(jobId);\n      if (allowanceId) {\n        link += "&id=".concat(allowanceId);\n      }\n      return addPortalTypeToURL(link);\n    },\n    OpenPrintWindow: function OpenPrintWindow(jobId, allowanceId) {\n      window.open(window.ReactDialogHandler.Allowance.GetPrintLink(jobId, allowanceId), \'_allowances\', \'width=800,height=800,left=200,top=200,resizable=yes,scrollbars=yes\');\n    },\n    GetDetailsLink: function GetDetailsLink(jobId, allowanceId) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      assertJobIdProvidedForExistingEntity(allowanceId, jobId);\n      return addPortalTypeToURL("/Allowance/".concat(allowanceId, "/").concat(jobId));\n    },\n    OpenDetailsWindow: function OpenDetailsWindow(jobId, allowanceId, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Allowance".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "1240px",\n        height: "600px",\n        src: window.ReactDialogHandler.Allowance.GetDetailsLink(jobId, allowanceId),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  ToDo: {\n    GetDetailsLink: function GetDetailsLink(toDoId, jobId, openedFromModal, dailyLogId, isFromRfi, refreshParentAfterSave, rfiId) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      var link = addPortalTypeToURL("/ToDo/".concat(toDoId, "/").concat(jobId, "/").concat(isFromRfi), jobId, toDoId, isFromRfi);\n      var params = [];\n      if (openedFromModal) {\n        params.push("openedFromModal=true");\n      }\n      if (dailyLogId) {\n        params.push("dailyLogId=".concat(dailyLogId));\n      }\n      if (refreshParentAfterSave) {\n        params.push("refreshParentAfterSave=true");\n      }\n      if (rfiId) {\n        link += "/RFI/".concat(rfiId, "/").concat(jobId);\n      }\n      for (var i = 0; i < params.length; i++) {\n        if (i === 0) {\n          link += "?";\n        } else {\n          link += "&";\n        }\n        link += params[i];\n      }\n      return link;\n    },\n    GetToDoAssignLink: function GetToDoAssignLink(toDoIds) {\n      return addPortalTypeToURL("/ToDo/Assign/".concat(toDoIds));\n    },\n    OpenToDoAssignDetails: function OpenToDoAssignDetails(toDoIds) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Assign To-Do\'s",\n        width: "400px",\n        height: "445px",\n        src: window.ReactDialogHandler.ToDo.GetToDoAssignLink(toDoIds)\n      });\n    },\n    OpenDetails: function OpenDetails(id, jobId, closeCallback, openedFromModal, dailyLogId, disableRFI, refreshParentAfterSave, rfiId) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "To-Do".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "950px",\n        height: "1300px",\n        src: window.ReactDialogHandler.ToDo.GetDetailsLink(id, jobId, openedFromModal, dailyLogId, disableRFI, refreshParentAfterSave, rfiId),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  Rfi: {\n    GetDetailsLink: function GetDetailsLink(rfiId, jobId, linkedId, linkedType) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      var link = addPortalTypeToURL("/Rfi/".concat(rfiId, "/").concat(jobId));\n      if (linkedId) {\n        link += "?linkedId=".concat(linkedId);\n        if (linkedType) {\n          link += "&linkedType=".concat(linkedType);\n        }\n      }\n      return link;\n    },\n    OpenDetails: function OpenDetails(id, jobId, closeCallback, linkedId, linkedType) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "RFI".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "950px",\n        height: "1300px",\n        src: "".concat(window.ReactDialogHandler.Rfi.GetDetailsLink(id, jobId, linkedId, linkedType)),\n        closeCallback: closeCallback\n      });\n    },\n    GetPrintLink: function GetPrintLink(id) {\n      return addPortalTypeToURL("/RFI/Print?id=".concat(id));\n    },\n    OpenPrintWindow: function OpenPrintWindow(id) {\n      var link = window.ReactDialogHandler.Rfi.GetPrintLink(id);\n      window.open(link, \'_rfi\', \'width=800,height=600,left=200,top=200,resizable=yes,scrollbars=yes\');\n    },\n    GetRelatedLink: function GetRelatedLink(linkedId, linkedType, builderId, jobId) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      return addPortalTypeToURL("/RelatedRfi/".concat(linkedId, "/").concat(linkedType, "/").concat(builderId, "/").concat(jobId));\n    },\n    OpenRelated: function OpenRelated(linkedId, linkedType, builderId, jobId, linkedTitle, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Related RFIs - ".concat(linkedTitle),\n        width: \'825px\',\n        height: \'500px\',\n        src: "".concat(window.ReactDialogHandler.Rfi.GetRelatedLink(linkedId, linkedType, builderId, jobId)),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  TimeClock: {\n    GetShiftDetailsLink: function GetShiftDetailsLink(id, jobId) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      var link = addPortalTypeToURL("/Shift/".concat(id, "/").concat(jobId, "/1"));\n      return link;\n    },\n    OpenShiftDetails: function OpenShiftDetails(id, jobId, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Shift".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "1200px",\n        height: "860px",\n        src: "".concat(window.ReactDialogHandler.TimeClock.GetShiftDetailsLink(id, jobId)),\n        closeCallback: closeCallback\n      });\n    },\n    GetDetailsTitle: function GetDetailsTitle(isClockIn, isMultiple) {\n      var title = "Clock ";\n      if (isClockIn === true) {\n        title = title.concat("In");\n      } else {\n        title = title.concat("Out");\n      }\n      if (isMultiple === true) {\n        title = title.concat(" Multiple");\n      }\n      return title;\n    },\n    GetDetailsLink: function GetDetailsLink(id, jobId, isClockIn, isMultiple) {\n      return addPortalTypeToURL("/ClockInClockOut/".concat(id, "/").concat(jobId, "/").concat(isClockIn, "/").concat(isMultiple));\n    },\n    OpenDetails: function OpenDetails(id, jobId, isClockIn, isMultiple, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: window.ReactDialogHandler.TimeClock.GetDetailsTitle(isClockIn, isMultiple),\n        width: "678px",\n        height: "650px",\n        src: "".concat(window.ReactDialogHandler.TimeClock.GetDetailsLink(id, jobId, isClockIn, isMultiple)),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  Warranty: {\n    GetDetailsLink: function GetDetailsLink(warrantyId, jobId, serviceId, rfiId, fromRFI) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      var serviceIdPath = "";\n      if (serviceId !== undefined) {\n        serviceIdPath = "/Service/".concat(serviceId, "/false");\n      }\n      return addPortalTypeToURL(appendRfiInfoToUrl("/Warranty/".concat(warrantyId, "/").concat(jobId).concat(serviceIdPath), jobId, rfiId, fromRFI));\n    },\n    OpenDetails: function OpenDetails(warrantyId, jobId, serviceId, rfiId, fromRFI, closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Warranty Request".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "1200px",\n        height: "1000px",\n        src: window.ReactDialogHandler.Warranty.GetDetailsLink(warrantyId, jobId, serviceId, rfiId, fromRFI),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  Survey: {\n    GetPrintLink: function GetPrintLink(surveyIds) {\n      return addPortalTypeToURL("/Survey/Print?ids=".concat(surveyIds));\n    },\n    OpenPrintWindow: function OpenPrintWindow(surveyIds) {\n      window.open(window.ReactDialogHandler.Survey.GetPrintLink(surveyIds), \'_survey\', \'width=800,height=600,left=200,top=200,resizable=yes,scrollbars=yes\');\n    },\n    GetQuestionReportPrintLink: function GetQuestionReportPrintLink() {\n      var jobId = window.AsyncJobPickerHelper.getSelectedJobId();\n      return addPortalTypeToURL("/Survey/QuestionsPrint?jobId=".concat(jobId));\n    },\n    OpenQuestionReportPrintWindow: function OpenQuestionReportPrintWindow() {\n      window.open(window.ReactDialogHandler.Survey.GetQuestionReportPrintLink(), \'_questions\', \'width=800,height=600,left=200,top=200,resizable=yes,scrollbars=yes\');\n    },\n    GetDetailsLink: function GetDetailsLink(surveyId, jobId, surveyDefinitionId) {\n      var link = addPortalTypeToURL("/Survey/".concat(surveyId, "/").concat(jobId, "/").concat(surveyDefinitionId));\n      return link;\n    },\n    OpenDetails: function OpenDetails(surveyId, jobId, surveyDefinitionId) {\n      var closeCallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Survey".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "750px",\n        height: "1300px",\n        src: window.ReactDialogHandler.Survey.GetDetailsLink(surveyId, jobId, surveyDefinitionId),\n        closeCallback: closeCallback\n      });\n    },\n    GetOwnerLink: function GetOwnerLink(surveyId) {\n      var link = addPortalTypeToURL("/Survey/".concat(surveyId));\n      return link;\n    },\n    OpenOwnerSurvey: function OpenOwnerSurvey(surveyId) {\n      var closeCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Survey".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "720px",\n        height: "1300px",\n        src: window.ReactDialogHandler.Survey.GetOwnerLink(surveyId),\n        closeCallback: closeCallback\n      });\n    },\n    RefreshAfterClose: function RefreshAfterClose() {\n      var parent = btMaster.getParentWindow() || window;\n      parent.location.reload();\n    }\n  },\n  Lead: {\n    GetDetailsLink: function GetDetailsLink(leadId, extraData) {\n      var url = "/app/Lead/".concat(leadId);\n      if (extraData) {\n        if (typeof extraData.activityId !== "undefined") {\n          var OpenTypes = Global.Enums.Leads.Activities.OpenActivityType;\n          var openType = Number(extraData.activityId) === 0 ? OpenTypes.ScheduleNew : OpenTypes.ViewActivity;\n          url = "".concat(url, "/LeadActivity/").concat(extraData.activityId, "/").concat(leadId, "/").concat(openType);\n        } else if (typeof extraData.proposalId !== "undefined") {\n          url = "".concat(url, "/LeadProposal/").concat(extraData.proposalId, "/").concat(extraData.activityId, "/false");\n        }\n        url = appendQueryParam(url, "checkoutId", extraData.checkoutId);\n        url = appendQueryParam(url, "showRelatedJob", extraData.showRelatedJob);\n        url = appendQueryParam(url, "showAddressMap", extraData.showAddressMap);\n        url = appendQueryParam(url, "selectedTab", extraData.selectedTab);\n      }\n      return url;\n    },\n    OpenDetails: function OpenDetails(leadId, extraData, closeCallback) {\n      if (closeCallback === undefined && window.DynamicGrid !== undefined) {\n        closeCallback = window.DynamicGrid.refresh;\n      }\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Lead Opportunity".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "1400px",\n        height: "740px",\n        src: window.ReactDialogHandler.Lead.GetDetailsLink(leadId, extraData),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  LeadProposal: {\n    GetTemplateDetailsLink: function GetTemplateDetailsLink(proposalId) {\n      return "/app/LeadProposalTemplate/".concat(proposalId);\n    },\n    OpenTemplateDetails: function OpenTemplateDetails(proposalId, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Lead Proposal Template",\n        width: "1300px",\n        height: "800px",\n        src: "".concat(window.ReactDialogHandler.LeadProposal.GetTemplateDetailsLink(proposalId)),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  LeadActivity: {\n    GetDetailsLink: function GetDetailsLink(leadActivityId, leadId, openActivity, activityDate) {\n      var path = "/app/LeadActivity/".concat(leadActivityId, "/").concat(leadId, "/").concat(openActivity);\n      if (activityDate) {\n        path = "".concat(path, "?activityDate=").concat(activityDate.format(\'YYYY-MM-DD\'));\n      }\n      return path;\n    },\n    OpenDetails: function OpenDetails(leadActivityId, leadId, openActivity, closeCallback, activityDate) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Lead Activity".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "850px",\n        height: "600px",\n        src: "".concat(window.ReactDialogHandler.LeadActivity.GetDetailsLink(leadActivityId, leadId, openActivity, activityDate)),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  Receipts: {\n    OpenReceiptUpload: function OpenReceiptUpload(closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Upload Receipts",\n        width: "600px",\n        height: "360px",\n        src: "/app/Receipts/Upload",\n        closeCallback: closeCallback\n      });\n    },\n    OpenReceiptDetails: function OpenReceiptDetails(id, closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Receipt".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "600px",\n        height: "360px",\n        src: "/app/Receipts/{".concat(id, "}"),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  OwnerInvoice: {\n    GetPrintLink: function GetPrintLink(jobId, invoiceId, showCustomFields, showLineItems) {\n      return addPortalTypeToURL("/OwnerInvoice/Print?jobId=".concat(jobId, "&invoiceId=").concat(invoiceId, "&showCustomFields=").concat(showCustomFields, "&showLineItems=").concat(showLineItems));\n    },\n    OpenPrintWindow: function OpenPrintWindow(jobId, invoiceId, showCustomFields, showLineItems) {\n      window.open(window.ReactDialogHandler.OwnerInvoice.GetPrintLink(jobId, invoiceId, showCustomFields, showLineItems), \'_ownerInvoice\', \'width=800,height=600,left=200,top=200,resizable=yes,scrollbars=yes\');\n    },\n    GetDetailsLink: function GetDetailsLink(invoiceId, jobId, fromRelatedItem) {\n      var payOnline = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      var url = "/OwnerInvoice/".concat(invoiceId, "/").concat(jobId, "/").concat(payOnline);\n      if (fromRelatedItem) {\n        url = appendQueryParam(url, "fromRelatedItem", fromRelatedItem);\n      }\n      return addPortalTypeToURL(url);\n    },\n    OpenDetails: function OpenDetails(invoiceId, jobId, closeCallback, fromRelatedItem) {\n      var isOwnerPortal = btJScriptGlobals.loginTypeInt === Global.Enums.BTLoginTypes.OWNER;\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "".concat(isOwnerPortal ? \'\' : \'Owner \', "Invoice").concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "1100px",\n        height: "800px",\n        src: "".concat(window.ReactDialogHandler.OwnerInvoice.GetDetailsLink(invoiceId, jobId, fromRelatedItem)),\n        closeCallback: closeCallback\n      });\n    },\n    GetOwnerMassPayLink: function GetOwnerMassPayLink() {\n      return addPortalTypeToURL(\'/OwnerMassOnlinePayment\');\n    },\n    OpenOwnerMassPay: function OpenOwnerMassPay(closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Owner Invoices List",\n        width: "1000px",\n        height: "500px",\n        src: window.ReactDialogHandler.OwnerInvoice.GetOwnerMassPayLink(),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  InvoicePayment: {\n    GetDetailsLink: function GetDetailsLink(invoicePaymentId) {\n      return addPortalTypeToURL("/InvoicePayment/".concat(invoicePaymentId));\n    },\n    OpenDetails: function OpenDetails(invoicePaymentId, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Invoice Payment".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        height: \'450px\',\n        src: window.ReactDialogHandler.InvoicePayment.GetDetailsLink(invoicePaymentId),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  DailyLog: {\n    GetPrintLink: function GetPrintLink(filters, pageNumber, pageSize) {\n      return addPortalTypeToURL("/DailyLog/Print?filters=".concat(filters, "&pn=").concat(pageNumber, "&ps=").concat(pageSize)); // Will circle back on this\n    },\n    OpenPrintWindow: function OpenPrintWindow(filters, pageNumber, pageSize) {\n      window.open(window.ReactDialogHandler.DailyLog.GetPrintLink(filters, pageNumber, pageSize), \'_dailyLogPrint\', \'width=800,height=600,left=200,top=200,resizable=yes,scrollbars=yes\');\n    },\n    GetDetailsLink: function GetDetailsLink(dailyLogId, jobId, openedFromModal, openWithMap) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      var link = addPortalTypeToURL("/DailyLog/".concat(dailyLogId, "/").concat(jobId));\n      if (openedFromModal) {\n        link += "?openedFromModal=true";\n      } else if (openWithMap) {\n        link += "?openWithMap=true";\n      }\n      return link;\n    },\n    OpenDetails: function OpenDetails(dailyLogId, jobId, closeCallback, openedFromModal, openWithMap) {\n      var modalWidth = "925px";\n      var modalHeight = "1000px";\n      if (btJScriptGlobals.loginTypeInt === Global.Enums.BTLoginTypes.OWNER) {\n        modalWidth = "685px";\n        modalHeight = "650px";\n      }\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Daily Log".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: modalWidth,\n        height: modalHeight,\n        src: window.ReactDialogHandler.DailyLog.GetDetailsLink(dailyLogId, jobId, openedFromModal, openWithMap),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  NotificationDetails: {\n    GetDetailsLink: function GetDetailsLink(notificationId, jobsiteId, dateSent, isArchive) {\n      return addPortalTypeToURL("/NotificationDetails/".concat(notificationId, "/").concat(jobsiteId, "/").concat(dateSent, "/").concat(isArchive));\n    },\n    OpenDetailsWindow: function OpenDetailsWindow(notificationId, jobsiteId, dateSent, isArchive, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Notification".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "825px",\n        height: "600px",\n        src: window.ReactDialogHandler.NotificationDetails.GetDetailsLink(notificationId, jobsiteId, dateSent, isArchive),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  Message: {\n    GetDetailsLink: function GetDetailsLink(messageId, folderId) {\n      return addPortalTypeToURL("/Messages/Message/".concat(messageId, "/").concat(folderId));\n    },\n    OpenDetails: function OpenDetails(messageId, folderId, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "View Message",\n        width: "800px",\n        height: "800px",\n        src: window.ReactDialogHandler.Message.GetDetailsLink(messageId, folderId),\n        closeCallback: closeCallback\n      });\n    },\n    ComposeMessage: function ComposeMessage(messageId, jobsiteId, closeCallback, defaultRecipientId, docInstanceIds, isDraft, paymentIds) {\n      var url = "/Messages/MessageCompose/".concat(messageId, "/").concat(jobsiteId);\n      url = appendQueryParam(url, "defaultRecipientId", defaultRecipientId);\n      url = appendQueryParam(url, "docInstanceIds", docInstanceIds && docInstanceIds.join(","));\n      url = appendQueryParam(url, "isDraft", isDraft);\n      url = appendQueryParam(url, "paymentIds", paymentIds && paymentIds.join(","));\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Compose a New Message",\n        width: "800px",\n        height: "800px",\n        src: addPortalTypeToURL(url),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  Conversation: {\n    GetDetailsLink: function GetDetailsLink(entityId, entityType, builderId, jobId) {\n      if (jobId !== undefined) {\n        return addPortalTypeToURL("/Conversation/".concat(entityId, "/").concat(entityType, "/").concat(builderId, "/").concat(jobId));\n      }\n      return addPortalTypeToURL("/Conversation/".concat(entityId, "/").concat(entityType, "/").concat(builderId));\n    },\n    OpenDetails: function OpenDetails(entityId, entityType, builderId, jobId, applyCountCallback, closeCallback) {\n      if (builderId === undefined) {\n        builderId = parseInt(window.btJScriptGlobals.getBuilderId);\n      }\n      if (entityId === 0 && entityType === 0 && jobId === undefined) {\n        jobId = window.AsyncJobPickerHelper.getSelectedJobId();\n      }\n      if (applyCountCallback) {\n        // This will add a listener for every opening of conversation details that happens without a refresh\n        window.addEventListener("message", function (event) {\n          if (event.isTrusted && typeof event.data === "string") {\n            try {\n              var message = JSON.parse(event.data);\n              if (message.type === "conversationCount".concat(entityId)) {\n                applyCountCallback(message.count);\n              }\n            } catch (e) {\n              //sometimes event.data is not valid JSON (happens when other components have a message event).\n              //if that happens, fail quietly.\n              return;\n            }\n          }\n        });\n      }\n      // This is called by some webforms codebehinds. Give the webforms modals a frame to get behind this one.\n      requestAnimationFrame(function () {\n        btMaster.btDialogs.createAndFireDialog({\n          dBoxMethod: "iframe",\n          title: "Conversation".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n          width: "800px",\n          height: "600px",\n          src: window.ReactDialogHandler.Conversation.GetDetailsLink(entityId, entityType, builderId, jobId),\n          closeCallback: closeCallback\n        });\n      });\n    }\n  },\n  SubDivision: {\n    GetDetailsLink: function GetDetailsLink(subIds) {\n      return addPortalTypeToURL("/Subcontractor/Division?subids=".concat(subIds));\n    },\n    OpenDetails: function OpenDetails(subIds) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Assign Sub Division",\n        width: "600px",\n        height: "448px",\n        src: window.ReactDialogHandler.SubDivision.GetDetailsLink(subIds)\n      });\n    }\n  },\n  Contact: {\n    GetDetailsLink: function GetDetailsLink(id, isFromSelector) {\n      return addPortalTypeToURL("/Contact/".concat(id, "/").concat(isFromSelector));\n    },\n    OpenDetailsWindow: function OpenDetailsWindow(id, isFromSelector, closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Customer Contact".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "950px",\n        height: "800px",\n        src: window.ReactDialogHandler.Contact.GetDetailsLink(id, isFromSelector),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  LienWaiver: {\n    GetDetailLink: function GetDetailLink(id, jobId) {\n      return addPortalTypeToURL("/LienWaiver/".concat(id, "/").concat(jobId));\n    },\n    OpenDetails: function OpenDetails(id, jobId, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Lien Waiver".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "800px",\n        height: "auto",\n        src: window.ReactDialogHandler.LienWaiver.GetDetailLink(id, jobId),\n        closeCallback: closeCallback\n      });\n    },\n    GetPrintLink: function GetPrintLink(ids) {\n      return addPortalTypeToURL("/LienWaiver/Print?popids=".concat(ids));\n    },\n    OpenPrintWindow: function OpenPrintWindow(ids) {\n      var link = window.ReactDialogHandler.LienWaiver.GetPrintLink(ids);\n      window.open(link, \'_lienWaiver\', \'width=800,height=600,left=200,top=200,resizable=yes,scrollbars=yes\');\n    }\n  },\n  Suspension: {\n    GetSuspensionLink: function GetSuspensionLink(builderId, adminId, editSuspension) {\n      return addPortalTypeToURL("/Suspend/".concat(builderId, "/").concat(adminId, "/").concat(editSuspension));\n    },\n    OpenSuspensionForm: function OpenSuspensionForm(builderId, adminId, editSuspension, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Suspend Customer",\n        width: "600px",\n        height: "500px",\n        src: window.ReactDialogHandler.Suspension.GetSuspensionLink(builderId, adminId, editSuspension),\n        closeCallback: closeCallback,\n        showCloseX: \'false\'\n      });\n    }\n  },\n  AdminAccountChangeRequest: {\n    GetAdminAccountChangeRequestLink: function GetAdminAccountChangeRequestLink(builderId, adminId) {\n      return addPortalTypeToURL("/AccountChangeRequest/".concat(builderId, "/").concat(adminId));\n    },\n    OpenAccountChangeRequest: function OpenAccountChangeRequest(builderId, adminId, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Account Change Request",\n        width: "600px",\n        height: "600px",\n        src: window.ReactDialogHandler.AdminAccountChangeRequest.GetAdminAccountChangeRequestLink(builderId, adminId),\n        closeCallback: closeCallback,\n        showCloseX: \'false\'\n      });\n    }\n  },\n  Cancellation: {\n    GetCancellationFormLink: function GetCancellationFormLink(builderId, subscriptionId) {\n      return addPortalTypeToURL("/Cancel/".concat(builderId, "/").concat(subscriptionId));\n    },\n    OpenCancellationForm: function OpenCancellationForm(builderId, subscriptionId) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Builder Cancellation",\n        width: "1000px",\n        height: "800px",\n        src: window.ReactDialogHandler.Cancellation.GetCancellationFormLink(builderId, subscriptionId)\n      });\n    }\n  },\n  Pricing: {\n    GetPricingConversionLink: function GetPricingConversionLink(builderId, isCustom) {\n      return addPortalTypeToURL("/Pricing/Conversion/".concat(builderId, "/").concat(isCustom));\n    },\n    OpenPricingConversionForm: function OpenPricingConversionForm(builderId, isCustom, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Upgrade Account",\n        width: "1000px",\n        height: "auto",\n        src: window.ReactDialogHandler.Pricing.GetPricingConversionLink(builderId, isCustom),\n        closeCallback: closeCallback\n      });\n    },\n    GetPackageSettingsLink: function GetPackageSettingsLink(builderId) {\n      return addPortalTypeToURL("/Pricing/PackageSettings/".concat(builderId));\n    },\n    OpenPackageSettings: function OpenPackageSettings(builderId) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Adjust Package Settings (TESTING ONLY)",\n        width: "600px",\n        height: "auto",\n        src: window.ReactDialogHandler.Pricing.GetPackageSettingsLink(builderId)\n      });\n    }\n  },\n  Subscription: {\n    GetSubscriptionDetailsLink: function GetSubscriptionDetailsLink(builderId, isAdminUser) {\n      return addPortalTypeToURL("/Subscription/".concat(builderId, "/").concat(isAdminUser));\n    },\n    OpenSubscriptionDetails: function OpenSubscriptionDetails(builderId, isAdminUser, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Upgrade Subscription",\n        width: "1000px",\n        height: "auto",\n        src: window.ReactDialogHandler.Subscription.GetSubscriptionDetailsLink(builderId, isAdminUser),\n        closeCallback: closeCallback,\n        showCloseX: \'false\'\n      });\n    }\n  },\n  PurchaseOrder: {\n    GetPaymentReviewLink: function GetPaymentReviewLink() {\n      return addPortalTypeToURL("/PurchaseOrder/PaymentReview");\n    },\n    GetPrintLink: function GetPrintLink(purchaseOrderIds) {\n      purchaseOrderIds = purchaseOrderIds.length > 1 ? purchaseOrderIds.join(\',\') : purchaseOrderIds;\n      return addPortalTypeToURL("/PurchaseOrder/Print?poid=".concat(purchaseOrderIds));\n    },\n    OpenPrintWindow: function OpenPrintWindow(purchaseOrderIds) {\n      window.open(window.ReactDialogHandler.PurchaseOrder.GetPrintLink(purchaseOrderIds), \'_purchaseOrder\', \'width=835, height=650, left=200, top=200, resizable=yes, scrollbars=yes\');\n    },\n    OpenPaymentReviewWindow: function OpenPaymentReviewWindow() {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Review Pending ".concat(window.btJScriptGlobals.btAdminFlags.billsReplacePurchaseOrderPayments ? "Bills" : " Payments"),\n        width: "900px",\n        height: "650px",\n        src: window.ReactDialogHandler.PurchaseOrder.GetPaymentReviewLink()\n      });\n    },\n    GetDetailsLink: function GetDetailsLink(purchaseOrderId, jobId, varianceChangeOrderId, rfiId, fromRFI, fromBid) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      var baseDetailsLink = "/PurchaseOrder/".concat(purchaseOrderId, "/").concat(jobId);\n      if (purchaseOrderId === 0 && varianceChangeOrderId !== undefined) {\n        baseDetailsLink = "".concat(baseDetailsLink, "/").concat(varianceChangeOrderId);\n      }\n      if (fromBid) {\n        baseDetailsLink = appendQueryParam(baseDetailsLink, "fromBid", fromBid);\n      }\n      return addPortalTypeToURL(appendRfiInfoToUrl(baseDetailsLink, jobId, rfiId, fromRFI));\n    },\n    OpenDetails: function OpenDetails(purchaseOrderId, jobId, varianceChangeOrderId, rfiId, fromRFI, closeCallback, fromBid) {\n      var isSubPortal = btJScriptGlobals.loginTypeInt === Global.Enums.BTLoginTypes.SUBS;\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Purchase Order".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: isSubPortal ? "1200px" : "1400px",\n        height: "800px",\n        src: "".concat(window.ReactDialogHandler.PurchaseOrder.GetDetailsLink(purchaseOrderId, jobId, varianceChangeOrderId, rfiId, fromRFI, fromBid)),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  PurchaseOrderPayment: {\n    GetDetailsLink: function GetDetailsLink(purchaseOrderPaymentId, jobId, isFromMakeAPayment, openToLienWaiver) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      return "/app/PurchaseOrderPayment/".concat(purchaseOrderPaymentId, "/").concat(jobId, "/").concat(isFromMakeAPayment === true).concat(openToLienWaiver === true ? \'/lienWaiver\' : \'\');\n    },\n    OpenDetails: function OpenDetails(purchaseOrderPaymentId, jobId, purchaseOrderId, isFromMakeAPayment, openToLienWaiver, closeCallback) {\n      var queryString = purchaseOrderId ? "?purchaseOrderId=".concat(purchaseOrderId) : \'\';\n      var url = "".concat(window.ReactDialogHandler.PurchaseOrderPayment.GetDetailsLink(purchaseOrderPaymentId, jobId, isFromMakeAPayment, openToLienWaiver)).concat(queryString);\n      this.OpenDetailsInternal(url, closeCallback);\n    },\n    OpenDetailsToPaymentConfirmation: function OpenDetailsToPaymentConfirmation(purchaseOrderPaymentId, jobId, preapprovalId, closeCallback, sendToAccounting, billToOwner) {\n      var queryString = "?preapproval_id=".concat(preapprovalId, "&sendToAccounting=").concat(sendToAccounting, "&billToOwner=").concat(billToOwner); // Using "preapproval_id" because that\'s what wepay uses. It\'ll just work once lists move over. Same reason it\'s a QS instead of parameter in the route\n      var url = "".concat(window.ReactDialogHandler.PurchaseOrderPayment.GetDetailsLink(purchaseOrderPaymentId, jobId, false, false)).concat(queryString);\n      this.OpenDetailsInternal(url, closeCallback);\n    },\n    OpenDetailsInternal: function OpenDetailsInternal(url, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Purchase Order Payment".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "1350px",\n        height: "700px",\n        src: url,\n        closeCallback: closeCallback\n      });\n    }\n  },\n  Bill: {\n    GetDetailsLink: function GetDetailsLink(purchaseOrderId, jobId, openToLienWaiver) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      return addPortalTypeToURL("/Bill/".concat(purchaseOrderId, "/").concat(jobId).concat(openToLienWaiver === true ? \'/lienWaiver\' : \'\'));\n    },\n    OpenDetails: function OpenDetails(purchaseOrderId, jobId, openToLienWaiver, closeCallback) {\n      this.OpenDetailsInternal(window.ReactDialogHandler.Bill.GetDetailsLink(purchaseOrderId, jobId, openToLienWaiver), closeCallback);\n    },\n    OpenDetailsToPaymentConfirmation: function OpenDetailsToPaymentConfirmation(purchaseOrderId, jobId, preapprovalId, closeCallback, sendToAccounting, billToOwner) {\n      var queryString = "?preapproval_id=".concat(preapprovalId, "&sendToAccounting=").concat(sendToAccounting, "&billToOwner=").concat(billToOwner); // Using "preapproval_id" because that\'s what wepay uses. It\'ll just work once lists move over. Same reason it\'s a QS instead of parameter in the route\n      var url = "".concat(window.ReactDialogHandler.Bill.GetDetailsLink(purchaseOrderId, jobId, false)).concat(queryString);\n      this.OpenDetailsInternal(url, closeCallback);\n    },\n    OpenDetailsInternal: function OpenDetailsInternal(url, closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Bill".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "1400px",\n        height: "800px",\n        src: url,\n        closeCallback: closeCallback\n      });\n    },\n    OpenLienWaiverReview: function OpenLienWaiverReview() {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Sign Lien Waivers",\n        width: "1000px",\n        height: "800px",\n        src: window.ReactDialogHandler.Bill.GetLienWaiverReviewLink()\n      });\n    },\n    GetLienWaiverReviewLink: function GetLienWaiverReviewLink() {\n      return addPortalTypeToURL("/LienWaiverReview");\n    }\n  },\n  PoMassPay: {\n    GetMassPayLink: function GetMassPayLink(purchaseOrderIdsStringArray, isOnlinePayment, isMultiJobSelected) {\n      var paymentType = isOnlinePayment ? "PayOnline" : "PayInFull";\n      return addPortalTypeToURL("/POMassPay/".concat(paymentType, "?massPaymentPoIds=").concat(purchaseOrderIdsStringArray, "&isMultiJobSelected=").concat(isMultiJobSelected));\n    },\n    OpenMassPay: function OpenMassPay(purchaseOrderIdsStringArray, isOnlinePayment, isMultiJobSelected, closeCallback) {\n      if (closeCallback === undefined && window.DynamicGrid !== undefined) {\n        closeCallback = window.DynamicGrid.refresh;\n      }\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Mass Payment",\n        width: "940px",\n        height: "800px",\n        src: this.GetMassPayLink(purchaseOrderIdsStringArray, isOnlinePayment, isMultiJobSelected),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  Sub: {\n    GetPaymentRequestLink: function GetPaymentRequestLink(purchaseOrderId, purchaseOrderPaymentId) {\n      return addPortalTypeToURL("/PaymentRequest/".concat(purchaseOrderId, "/").concat(purchaseOrderPaymentId));\n    },\n    OpenPaymentRequest: function OpenPaymentRequest(purchaseOrderId, purchaseOrderPaymentId, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Payment Request",\n        width: "auto",\n        height: purchaseOrderPaymentId === 0 ? "615px" : "550px",\n        // The payment from scratch has more content, so need to set height dynamically to account for this\n        src: window.ReactDialogHandler.Sub.GetPaymentRequestLink(purchaseOrderId, purchaseOrderPaymentId),\n        closeCallback: closeCallback\n      });\n    },\n    GetDetailsLink: function GetDetailsLink(id) {\n      var defaultTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      return addPortalTypeToURL("/SubVendor/".concat(id, "/").concat(defaultTab));\n    }\n  },\n  CreditMemo: {\n    GetDetailsLink: function GetDetailsLink(creditMemoId, jobId) {\n      return addPortalTypeToURL("/CreditMemos/".concat(creditMemoId, "/").concat(jobId));\n    },\n    OpenDetails: function OpenDetails(creditMemoId, jobId, closeCallback) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Credit Memo".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "930px",\n        height: "1000px",\n        src: window.ReactDialogHandler.CreditMemo.GetDetailsLink(creditMemoId, jobId),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  InternalUser: {\n    GetOpenMassInviteLink: function GetOpenMassInviteLink() {\n      return addPortalTypeToURL(\'/InternalUserQuickAdd\');\n    },\n    GetDetailsLink: function GetDetailsLink(id) {\n      return addPortalTypeToURL("/InternalUser/".concat(id));\n    },\n    OpenMassInvite: function OpenMassInvite(closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Invite Internal Users",\n        width: "930px",\n        height: "600px",\n        src: window.ReactDialogHandler.InternalUser.GetOpenMassInviteLink(),\n        closeCallback: closeCallback\n      });\n    },\n    GetUserPricingUpgradeLink: function GetUserPricingUpgradeLink(minRequired) {\n      return addPortalTypeToURL("/UserPricingUpgrade?minRequired=".concat(minRequired || 0));\n    },\n    OpenUserPricingUpgrade: function OpenUserPricingUpgrade(minRequired, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Purchase Additional Active Users",\n        width: "500px",\n        height: "500px",\n        src: window.ReactDialogHandler.InternalUser.GetUserPricingUpgradeLink(minRequired),\n        closeCallback: closeCallback\n      });\n    },\n    OpenInternalUserSettings: function OpenInternalUserSettings(id, initialTab) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Internal User".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "1200px",\n        height: "800px",\n        src: "".concat(window.ReactDialogHandler.InternalUser.GetDetailsLink(id), "?initialTab=").concat(initialTab),\n        closeCallback: function closeCallback() {\n          return window.location.replace(Global.PageUrlHandler.SummaryPageUrl.BuilderSummary);\n        }\n      });\n    }\n  },\n  Media: {\n    GetMediaMoveFolderLink: function GetMediaMoveFolderLink(folderId, jobId, mediaType, documentInstanceIds, folderIds) {\n      var url = addPortalTypeToURL("/Media/Move/".concat(folderId, "/").concat(jobId, "/").concat(mediaType));\n      url = appendQueryParam(url, "documentInstanceIds", documentInstanceIds);\n      url = appendQueryParam(url, "folderIds", folderIds);\n      return url;\n    },\n    OpenMediaMoveFolder: function OpenMediaMoveFolder(currentFolderId, jobId, mediaType, documentInstanceIds, folderIds, closeCallback) {\n      var mediaName = mediaType === Global.Enums.Documents.MediaTypes.Document ? "Files" : "Photos";\n\n      // Documents and their folders have prepended characters that we need to remove\n      if (mediaType === Global.Enums.Documents.MediaTypes.Document) {\n        documentInstanceIds = removeDocumentPrependedCharacters(documentInstanceIds);\n        folderIds = removeDocumentFolderPrependedCharacters(folderIds);\n      }\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Move ".concat(mediaName),\n        width: "525px",\n        height: "550px",\n        src: window.ReactDialogHandler.Media.GetMediaMoveFolderLink(currentFolderId, jobId, mediaType, documentInstanceIds, folderIds),\n        closeCallback: closeCallback\n      });\n    },\n    GetCopyMediaLink: function GetCopyMediaLink(jobId, mediaType, mediaIds, folderIds) {\n      return addPortalTypeToURL("/Media/Copy/".concat(jobId, "?mediaType=").concat(mediaType, "&mediaIds=").concat(mediaIds, "&folderIds=").concat(folderIds));\n    },\n    GetCopyMediaTitle: function GetCopyMediaTitle(mediaType) {\n      switch (mediaType) {\n        case Global.Enums.Documents.MediaTypes.Document:\n          return "Copy Files";\n        case Global.Enums.Documents.MediaTypes.Photo:\n          return "Copy Photos";\n        case Global.Enums.Documents.MediaTypes.Video:\n          return "Copy Videos";\n      }\n    },\n    OpenCopyMedia: function OpenCopyMedia(jobId, mediaType, mediaIds, folderIds, closeCallback) {\n      // Documents and their folders have prepended characters that we need to remove\n      if (mediaType === Global.Enums.Documents.MediaTypes.Document) {\n        mediaIds = removeDocumentPrependedCharacters(mediaIds);\n        folderIds = removeDocumentFolderPrependedCharacters(folderIds);\n      }\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: window.ReactDialogHandler.Media.GetCopyMediaTitle(mediaType),\n        width: "500px",\n        height: "550px",\n        src: window.ReactDialogHandler.Media.GetCopyMediaLink(jobId, mediaType, mediaIds, folderIds),\n        closeCallback: closeCallback\n      });\n    },\n    GetMediaViewingPermissionsLink: function GetMediaViewingPermissionsLink(folderId, jobId, documentInstanceIds, mediaType, viewingPermissionAction) {\n      return addPortalTypeToURL("/Media/ViewingPermissions/".concat(folderId, "/").concat(jobId, "?mediaType=").concat(mediaType, "&docIds=").concat(documentInstanceIds, "&viewingPermissionAction=").concat(viewingPermissionAction));\n    },\n    OpenMediaViewingPermissions: function OpenMediaViewingPermissions(folderId, jobId, documentInstanceIds, mediaType, viewingPermissionAction, closeCallback) {\n      if (mediaType === Global.Enums.Documents.MediaTypes.Document) {\n        documentInstanceIds = documentInstanceIds.replace(/d/g, "");\n      }\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Update Viewing Permissions",\n        width: "525px",\n        height: "450px",\n        src: window.ReactDialogHandler.Media.GetMediaViewingPermissionsLink(folderId, jobId, documentInstanceIds, mediaType, viewingPermissionAction),\n        closeCallback: closeCallback\n      });\n    },\n    GetMediaFolderPropertiesLink: function GetMediaFolderPropertiesLink(folderId, jobId, parentFolderId, mediaType) {\n      return addPortalTypeToURL("/Media/FolderProperties/".concat(folderId, "/").concat(jobId, "?mediaType=").concat(mediaType, "&parentFolderId=").concat(parentFolderId));\n    },\n    OpenMediaFolderProperties: function OpenMediaFolderProperties(folderId, jobId, parentFolderId, mediaType) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Folder Properties",\n        width: "700px",\n        height: "800px",\n        src: window.ReactDialogHandler.Media.GetMediaFolderPropertiesLink(folderId, jobId, parentFolderId, mediaType),\n        closeCallback: function closeCallback() {\n          window.location.reload(true);\n        }\n      });\n    },\n    GetMediaPropertiesLink: function GetMediaPropertiesLink(documentInstanceId, jobId, mediaType, folderId, templateType, templateDocumentInstanceId) {\n      return addPortalTypeToURL("/Media/Properties/".concat(documentInstanceId, "/").concat(jobId, "/").concat(mediaType, "/").concat(folderId, "/").concat(templateType, "/").concat(templateDocumentInstanceId));\n    },\n    OpenMediaProperties: function OpenMediaProperties(documentInstanceId, jobId, mediaType, folderId, templateType, templateDocumentInstanceId, closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "".concat(MediaTypeNames.get(mediaType).singular, " Properties"),\n        width: "1000px",\n        height: "800px",\n        src: window.ReactDialogHandler.Media.GetMediaPropertiesLink(documentInstanceId, jobId, mediaType, folderId, templateType, templateDocumentInstanceId),\n        closeCallback: closeCallback\n      });\n    },\n    GetMediaSearchLink: function GetMediaSearchLink(folderId, jobId, mediaType) {\n      return addPortalTypeToURL("/Media/Search/".concat(folderId, "/").concat(jobId, "/").concat(mediaType));\n    },\n    OpenMediaSearch: function OpenMediaSearch(folderId, jobId, mediaType, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Media Search",\n        width: "800px",\n        height: "600px",\n        src: window.ReactDialogHandler.Media.GetMediaSearchLink(folderId, jobId, mediaType),\n        closeCallback: closeCallback\n      });\n    },\n    GetFolderViewingPermissions: function GetFolderViewingPermissions(folderIds, jobId, mediaType) {\n      var selectedJob = AsyncJobPickerHelper.GetSelectedJob();\n      var ownerName = selectedJob.jobName;\n      if (selectedJob.ownerName !== \'\') {\n        ownerName = selectedJob.ownerName;\n      }\n      return addPortalTypeToURL("/Media/FolderViewingPermissions/".concat(jobId, "/").concat(mediaType, "?folderIds=").concat(folderIds, "&ownerName=").concat(ownerName));\n    },\n    OpenFolderViewingPermissions: function OpenFolderViewingPermissions(folderIds, jobId, mediaType, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Mass Update Folder Permissions",\n        width: "400px",\n        height: "300px",\n        src: window.ReactDialogHandler.Media.GetFolderViewingPermissions(folderIds.join(","), jobId, mediaType),\n        closeCallback: closeCallback\n      });\n    },\n    GetFolderEmailInfo: function GetFolderEmailInfo(folderId, jobId, mediaType) {\n      return addPortalTypeToURL("/Media/FolderEmailInfo/".concat(folderId, "/").concat(jobId, "/").concat(mediaType));\n    },\n    OpenFolderEmailInfo: function OpenFolderEmailInfo(folderId, jobId, mediaType, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Email Documents into Buildertrend",\n        width: "650px",\n        height: "600px",\n        src: window.ReactDialogHandler.Media.GetFolderEmailInfo(folderId, jobId, mediaType),\n        closeCallback: closeCallback\n      });\n    },\n    GetReplaceLink: function GetReplaceLink(documentInstanceId, isFromMediaPage, mediaType, includeThisDoc, linkedByAnnotationGroup) {\n      var replaceLink = "/Media/Replace/".concat(documentInstanceId, "/").concat(isFromMediaPage, "/").concat(mediaType);\n      return addPortalTypeToURL(appendOptionalUrlParams(replaceLink, [includeThisDoc, linkedByAnnotationGroup]));\n    },\n    OpenReplace: function OpenReplace(documentInstanceId, isFromMediaPage, mediaType, closeCallback, includeThisDoc, linkedByAnnotationGroup) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "".concat(MediaTypeNames.get(mediaType).singular, " Replace"),\n        width: "550px",\n        height: "500px",\n        src: window.ReactDialogHandler.Media.GetReplaceLink(documentInstanceId, isFromMediaPage, mediaType, includeThisDoc, linkedByAnnotationGroup),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  Photo: {\n    GetPhotoPreviewLink: function GetPhotoPreviewLink(documentInstanceId, jobId) {\n      return addPortalTypeToURL("/Photo/Preview/".concat(documentInstanceId, "/").concat(jobId));\n    },\n    OpenPhotoPreview: function OpenPhotoPreview(documentInstanceId, jobId, photoList) {\n      var isSpecialFolder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var jobIds = [];\n      var docInstanceIds = [];\n      photoList.forEach(function (item) {\n        docInstanceIds.push(isSpecialFolder ? item.docId() : item.id());\n        jobIds.push(item.jobId());\n      });\n      if (photoList.length) {\n        window.sessionStorage.setItem("bt-numberArray-photoPreviewListOfDocInstanceIds", JSON.stringify(docInstanceIds));\n        window.sessionStorage.setItem("bt-numberArray-photoPreviewListOfJobIds", JSON.stringify(jobIds));\n      }\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Photo Preview",\n        width: "1150px",\n        height: "800px",\n        cssClass: "photo-preview-modal",\n        src: window.ReactDialogHandler.Photo.GetPhotoPreviewLink(documentInstanceId, jobId)\n      });\n    }\n  },\n  ImportWizard: {\n    GetWizardLink: function GetWizardLink(builderId, importType) {\n      return addPortalTypeToURL("/ImportWizard?builderId=".concat(builderId, "&importType=").concat(importType));\n    },\n    OpenWizard: function OpenWizard(builderId, importType, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Import Wizard",\n        width: "1200px",\n        height: "1000px",\n        src: window.ReactDialogHandler.ImportWizard.GetWizardLink(builderId, importType),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  TemplateImport: {\n    GetDetailsLink: function GetDetailsLink(jobId, tabId) {\n      return "/app/TemplateImport/".concat(jobId, "/").concat(tabId);\n    },\n    OpenDetails: function OpenDetails(tabId, closeCallback) {\n      var jobId = getSelectedJobIdOrZero();\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Import Data From Template",\n        width: "740px",\n        height: "800px",\n        src: window.ReactDialogHandler.TemplateImport.GetDetailsLink(jobId, tabId),\n        closeCallback: closeCallback === undefined ? this.RefreshAfterClose : closeCallback\n      });\n    },\n    RefreshAfterClose: function RefreshAfterClose() {\n      var parent = btMaster.getParentWindow() || window;\n      parent.location.reload();\n    }\n  },\n  CostCatalog: {\n    GetCostItemDetailsLink: function GetCostItemDetailsLink(costItemId, costCodeId) {\n      var path = "/app/CostCatalog/CostItem/".concat(costItemId);\n      if (costCodeId > 0) {\n        path = "".concat(path, "?costCodeId=").concat(costCodeId);\n      }\n      return path;\n    },\n    OpenCostItemDetails: function OpenCostItemDetails(costItemId, costCodeId, closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: \'iframe\',\n        width: \'1150px\',\n        height: \'550px\',\n        src: window.ReactDialogHandler.CostCatalog.GetCostItemDetailsLink(costItemId, costCodeId),\n        title: "Cost Item".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        showCloseX: \'true\',\n        showLoadingSpinner: \'true\',\n        closeCallback: closeCallback\n      });\n    },\n    GetCostItemsListLink: function GetCostItemsListLink(costCodeId) {\n      return "/app/CostCatalog/CostCode/".concat(costCodeId);\n    },\n    OpenCostItemsList: function OpenCostItemsList(costCodeId) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: \'iframe\',\n        width: \'1200px\',\n        height: \'800px\',\n        src: window.ReactDialogHandler.CostCatalog.GetCostItemsListLink(costCodeId),\n        title: \'Cost Item List\',\n        showCloseX: \'true\',\n        showLoadingSpinner: \'true\'\n      });\n    },\n    GetCostGroupDetailsLink: function GetCostGroupDetailsLink(costGroupId) {\n      return "/app/CostCatalog/CostGroup/".concat(costGroupId);\n    },\n    OpenCostGroupDetails: function OpenCostGroupDetails(costGroupId, closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: \'iframe\',\n        width: \'1225px\',\n        height: \'700px\',\n        src: window.ReactDialogHandler.CostCatalog.GetCostGroupDetailsLink(costGroupId),\n        title: \'Cost Group Editor\',\n        showCloseX: \'true\',\n        showLoadingSpinner: \'true\',\n        closeCallback: closeCallback\n      });\n    }\n  },\n  CostCode: {\n    GetCostCodeExportToAccountingLink: function GetCostCodeExportToAccountingLink(costCodeIds, checkExpenseAccount, serviceItemsOnly, doRefresh) {\n      return addPortalTypeToURL("/ManageAccounting/".concat(checkExpenseAccount, "/").concat(serviceItemsOnly, "/").concat(doRefresh, "/?costCodeIds=").concat(costCodeIds));\n    },\n    OpenCostCodesExportToAccounting: function OpenCostCodesExportToAccounting(costCodeIds, checkExpenseAccount, serviceItemsOnly, doRefresh, closeCallback) {\n      var title = \'Link Cost Code\';\n      if (closeCallback == null) {\n        title = \'Manage Cost Codes\';\n        closeCallback = function closeCallback() {};\n      }\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: \'iframe\',\n        width: \'664px\',\n        height: \'800px\',\n        src: window.ReactDialogHandler.CostCode.GetCostCodeExportToAccountingLink(costCodeIds, checkExpenseAccount, serviceItemsOnly, doRefresh),\n        title: title,\n        showCloseX: \'true\',\n        showLoadingSpinner: \'true\',\n        closeCallback: closeCallback\n      });\n    },\n    GetCostCodeImportFromAccountingLink: function GetCostCodeImportFromAccountingLink() {\n      return addPortalTypeToURL("/AccountingImport");\n    },\n    OpenCostCodesImportFromAccounting: function OpenCostCodesImportFromAccounting(callback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: \'iframe\',\n        width: \'600px\',\n        height: \'800px\',\n        src: window.ReactDialogHandler.CostCode.GetCostCodeImportFromAccountingLink(),\n        title: "Import Cost Codes",\n        showCloseX: \'true\',\n        showLoadingSpinner: \'true\',\n        closeCallback: callback\n      });\n    },\n    GetCostCodeEditorLink: function GetCostCodeEditorLink(costType, costCodeId) {\n      return addPortalTypeToURL("/CostCode/Code/".concat(costType, "/").concat(costCodeId));\n    },\n    OpenCostCodeEditor: function OpenCostCodeEditor(costType, costCodeId, title, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: title,\n        width: "650px",\n        height: "560px",\n        showCloseX: \'true\',\n        showLoadingSpinner: \'true\',\n        usesPostBacks: false,\n        src: window.ReactDialogHandler.CostCode.GetCostCodeEditorLink(costType, costCodeId),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  SubscriptionManager: {\n    GetSettingsLink: function GetSettingsLink(fromSettings, fromFrozenBuilder) {\n      return addPortalTypeToURL("/Settings/Subscription/".concat(fromSettings, "/").concat(fromFrozenBuilder));\n    },\n    OpenDetails: function OpenDetails() {\n      var fromSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var fromFrozenBuilder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var showClose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Manage Subscription",\n        width: "1250px",\n        height: "800px",\n        showCloseX: showClose,\n        src: window.ReactDialogHandler.SubscriptionManager.GetSettingsLink(fromSettings, fromFrozenBuilder)\n      });\n    }\n  },\n  CurrentModal: {\n    CloseModal: function CloseModal(data) {\n      var eventMessage = {\n        type: "closeModal",\n        data: data\n      };\n      console.info("Attempting to CloseModal", eventMessage);\n      window.parent.postMessage(JSON.stringify(eventMessage), \'*\');\n    },\n    CloseModalAndReload: function CloseModalAndReload(data) {\n      var eventMessage = {\n        type: "closeModalAndReload",\n        data: data\n      };\n      console.info("Attempting to CloseModalAndReload", eventMessage);\n      window.parent.postMessage(JSON.stringify(eventMessage), \'*\');\n    },\n    SetModalTitle: function SetModalTitle(title) {\n      var eventMessage = {\n        type: "setModalTitle",\n        data: title\n      };\n      console.info("Attempting to SetModalTitle", eventMessage);\n      window.parent.postMessage(JSON.stringify(eventMessage), \'*\');\n    },\n    /**\r\n     * @param width specify the width of the modal, use null to keep the width the same\r\n     * @param height specify the height of the modal, use null to keep the height the same\r\n     */\n    SetModalSize: function SetModalSize(width, height) {\n      var eventMessage = {\n        type: "setModalSize",\n        data: {\n          width: width,\n          height: height\n        }\n      };\n      console.info("Attempting to SetModalSize", eventMessage);\n      window.parent.postMessage(JSON.stringify(eventMessage), \'*\');\n    }\n  },\n  Estimate: {\n    BidMappingLink: function BidMappingLink(jobId, lineItemIds) {\n      return addPortalTypeToURL("/Estimate/BidMapping/".concat(jobId, "?ids=").concat(lineItemIds));\n    },\n    BidMapping: function BidMapping(jobId, lineItemIds) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Map To New Bid Package",\n        width: "800px",\n        height: "800px",\n        src: window.ReactDialogHandler.Estimate.BidMappingLink(jobId, lineItemIds)\n      });\n    }\n  },\n  LinkJobToAccounting: {\n    GetWizardLink: function GetWizardLink(jobId, supportsJobsiteIntegrationTypes, ownerInvoiceID) {\n      var URL = "/app/LinkJobToAccounting/".concat(jobId, "?supportsJobsiteIntegrationTypes=").concat(supportsJobsiteIntegrationTypes);\n      if (ownerInvoiceID) {\n        URL += "&ownerInvoiceID=".concat(ownerInvoiceID);\n      }\n      return URL;\n    },\n    OpenWizard: function OpenWizard(jobId, supportsJobsiteIntegrationTypes, title, closeCallback, divID, ownerInvoiceID) {\n      btMaster.btDialogs.fireDialogWithID(divID, {\n        dBoxMethod: "iframe",\n        title: title,\n        width: "650px",\n        height: "470px",\n        closeCallback: closeCallback,\n        src: window.ReactDialogHandler.LinkJobToAccounting.GetWizardLink(jobId, supportsJobsiteIntegrationTypes, ownerInvoiceID)\n      });\n    }\n  },\n  LinkEntityToAccounting: {\n    GetLinkEntityToAccountingLink: function GetLinkEntityToAccountingLink(idType, entityID) {\n      var URL = "/app/LinkEntityToAccounting/".concat(idType);\n      if (entityID) {\n        URL += "/".concat(entityID);\n      }\n      return URL;\n    },\n    GetLinkEntityToAccountingModalHeight: function GetLinkEntityToAccountingModalHeight(idType) {\n      switch (idType) {\n        case Global.Enums.Accounting.IDTypes.BillAPAccountID:\n        case Global.Enums.Accounting.IDTypes.InvoiceARAccountID:\n        case Global.Enums.Accounting.IDTypes.InvoiceItemID:\n          return \'525px\';\n        default:\n          return \'470px\';\n      }\n    },\n    OpenLinkEntityToAccounting: function OpenLinkEntityToAccounting(idType, entityID, title, closeCallback) {\n      var modalWidth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \'610px\';\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        closeCallback: closeCallback,\n        dBoxMethod: \'iframe\',\n        width: modalWidth,\n        height: window.ReactDialogHandler.LinkEntityToAccounting.GetLinkEntityToAccountingModalHeight(idType),\n        src: window.ReactDialogHandler.LinkEntityToAccounting.GetLinkEntityToAccountingLink(idType, entityID),\n        title: title,\n        showCloseX: true,\n        showLoadingSpinner: true,\n        usesPostBacks: false,\n        closeOnEscape: false,\n        unloadOnClose: true,\n        cssClass: \'\',\n        overlayClass: \'\'\n      });\n    }\n  },\n  Schedule: {\n    GetDetailsLink: function GetDetailsLink(scheduleItemId, jobId, extraData, viewConflicts) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      var url = addPortalTypeToURL("/Schedule/".concat(scheduleItemId, "/").concat(jobId));\n      if (extraData) {\n        if (extraData.rfiId) {\n          // Select the messaging tab (8) and open the RFI\n          url += "/RFI/".concat(extraData.rfiId, "/").concat(jobId);\n          url = appendQueryParam(url, "initialTab", 8);\n        } else {\n          url = appendQueryParam(url, "title", extraData.title);\n          url = appendQueryParam(url, "displayColor", extraData.displayColor);\n          url = appendQueryParam(url, "assignedUserIds", extraData.assignedUserIds);\n          url = appendQueryParam(url, "startDate", extraData.startDate);\n          url = appendQueryParam(url, "endDate", extraData.endDate);\n          url = appendQueryParam(url, "initialTab", extraData.initialTab);\n          url = appendQueryParam(url, "disableRFI", extraData.disableRFI);\n        }\n      }\n      if (viewConflicts) {\n        // Open with conflicts tab selected\n        url = appendQueryParam(url, "initialTab", 7);\n      }\n      return url;\n    },\n    OpenDetails: function OpenDetails(scheduleItemId, jobId, closeCallback, extraData, viewConflicts) {\n      if (!closeCallback) {\n        closeCallback = function closeCallback() {};\n      }\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Schedule Item".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "1000px",\n        height: "1000px",\n        src: window.ReactDialogHandler.Schedule.GetDetailsLink(scheduleItemId, jobId, extraData, viewConflicts),\n        closeCallback: closeCallback\n      });\n    },\n    GetPhaseDetailsLink: function GetPhaseDetailsLink(phaseId) {\n      return addPortalTypeToURL("/PhaseDetails/".concat(phaseId));\n    },\n    OpenPhaseDetails: function OpenPhaseDetails(phaseId, closeCallback) {\n      if (!closeCallback) {\n        closeCallback = function closeCallback() {};\n      }\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Phase".concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "400px",\n        height: "275px",\n        src: window.ReactDialogHandler.Schedule.GetPhaseDetailsLink(phaseId),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  AddPerformingUsersToJob: {\n    /**\r\n     * @param {Number} jobId\r\n     * @param {Number[]} subs\r\n     * @param {Number[]} internalUsers\r\n     * @param {Number[]} scheduleIds\r\n     * @param {Number} openedFromEntity See Global.Core.Enums.Jobs.JobPermissionWizardOpenedFromEnums\r\n     * @param {Boolean} canSelectUsers Determine whether users are selectable on the "Add Users" step\r\n     */\n    getLink: function getLink(jobId, subs, internalUsers, scheduleIds, openedFromEntity, canSelectUsers) {\n      var url = "/app/AddPerformingUsersToJob?jobId=".concat(jobId, "&openedFrom=").concat(openedFromEntity, "&canSelectUsers=").concat(canSelectUsers);\n      var strSubs = subs.join(",");\n      if (strSubs) {\n        url += "&subs=".concat(strSubs);\n      }\n      var strInternalUsers = internalUsers.join(",");\n      if (strInternalUsers) {\n        url += "&internalUsers=".concat(strInternalUsers);\n      }\n      var strScheduleIds = scheduleIds.join(",");\n      if (strScheduleIds) {\n        url += "&scheduleIds=".concat(strScheduleIds);\n      }\n      return url;\n    },\n    openModal: function openModal(jobId, subs, internalUsers, scheduleIds, openedFromEntity, canSelectUsers) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Jobsite Viewing Permission Wizard",\n        width: "700px",\n        height: "350px",\n        src: window.ReactDialogHandler.AddPerformingUsersToJob.getLink(jobId, subs, internalUsers, scheduleIds, openedFromEntity, canSelectUsers)\n      });\n    }\n  },\n  PoMapping: {\n    /**\r\n     * Helper function for the openModal() function on ChangeOrder, Selection, Bid, and Estimate\r\n     * @param {any} src\r\n     * @param {any} toExistingPO\r\n     */\n    openPoMappingModal: function openPoMappingModal(src, toExistingPO) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: toExistingPO ? "Add to Existing Purchase Order" : "Create Purchase Orders",\n        width: "1280px",\n        height: "1000px",\n        src: src\n      });\n    },\n    ChangeOrder: {\n      /**\r\n       * Get a link to the CO to PO mapping page.\r\n       * @param {Number[]} changeOrderIds A list of change order ids.\r\n       * @param {Number} jobId A job id.\r\n       * @param {Boolean} toExistingPO If true, the change order will map to an existing purchase order, otherwise it will map to a new purchase order.\r\n       */\n      getLink: function getLink(changeOrderIds, jobId, toExistingPO) {\n        return "/app/POMapping/ChangeOrder?ids=".concat(changeOrderIds.join(","), "&jobId=").concat(jobId, "&toExistingPo=").concat(toExistingPO);\n      },\n      /**\r\n       * Open the modal for mapping change orders to purchase orders.\r\n       * @param {Number[]} changeOrderIds A list of change order ids.\r\n       * @param {Number} jobId A job id.\r\n       * @param {Boolean} toExistingPO If true, the change order will map to an existing purchase order, otherwise it will map to a new purchase order.\r\n       */\n      openModal: function openModal(changeOrderIds, jobId, toExistingPO) {\n        window.ReactDialogHandler.PoMapping.openPoMappingModal(window.ReactDialogHandler.PoMapping.ChangeOrder.getLink(changeOrderIds, jobId, toExistingPO), toExistingPO);\n      }\n    },\n    Selection: {\n      /**\r\n       * Get a link to the selection to PO mapping page.\r\n       * @param {Number[]} selectionIds A list of selection ids.\r\n       * @param {Number} jobId A job id.\r\n       * @param {Boolean} toExistingPO If true, the selection will map to an existing purchase order, otherwise it will map to a new purchase order.\r\n       */\n      getLink: function getLink(selectionIds, jobId, toExistingPO) {\n        return "/app/POMapping/Selection?ids=".concat(selectionIds.join(","), "&jobId=").concat(jobId, "&toExistingPo=").concat(toExistingPO);\n      },\n      /**\r\n       * Open the modal for mapping selections to purchase orders.\r\n       * @param {Number[]} selectionIds A list of selection ids.\r\n       * @param {Number} jobId A job id.\r\n       * @param {Boolean} toExistingPO If true, the selection will map to an existing purchase order, otherwise it will map to a new purchase order.\r\n       */\n      openModal: function openModal(selectionIds, jobId, toExistingPO) {\n        window.ReactDialogHandler.PoMapping.openPoMappingModal(window.ReactDialogHandler.PoMapping.Selection.getLink(selectionIds, jobId, toExistingPO), toExistingPO);\n      }\n    },\n    SelectionChoice: {\n      /**\r\n       * Get a link to the selection choice to PO mapping page.\r\n       * @param {Number[]} selectionChoiceIds A list of selection choice ids.\r\n       * @param {Number} jobId A job id.\r\n       * @param {Boolean} toExistingPO If true, the selection choice will map to an existing purchase order, otherwise it will map to a new purchase order.\r\n       */\n      getLink: function getLink(selectionChoiceIds, jobId, toExistingPO) {\n        return "/app/POMapping/SelectionChoice?ids=".concat(selectionChoiceIds.join(","), "&jobId=").concat(jobId, "&toExistingPo=").concat(toExistingPO);\n      },\n      /**\r\n       * Open the modal for mapping selection choices to purchase orders.\r\n       * @param {Number[]} selectionChoiceIds A list of selection choice ids.\r\n       * @param {Number} jobId A job id.\r\n       * @param {Boolean} toExistingPO If true, the selection choice will map to an existing purchase order, otherwise it will map to a new purchase order.\r\n       */\n      openModal: function openModal(selectionChoiceIds, jobId, toExistingPO) {\n        window.ReactDialogHandler.PoMapping.openPoMappingModal(window.ReactDialogHandler.PoMapping.SelectionChoice.getLink(selectionChoiceIds, jobId, toExistingPO), toExistingPO);\n      }\n    },\n    Bid: {\n      /**\r\n       * Get a link to the bids to PO mapping page.\r\n       * @param {Number[]} bidIds A list of bid ids.\r\n       * @param {Number} jobId A job id.\r\n       * @param {Boolean} toExistingPO If true, the bid will map to an existing purchase order, otherwise it will map to a new purchase order.\r\n       */\n      getLink: function getLink(bidIds, jobId, toExistingPO) {\n        return "/app/POMapping/Bid?ids=".concat(bidIds.join(","), "&jobId=").concat(jobId, "&toExistingPo=").concat(toExistingPO);\n      },\n      /**\r\n       * Open the modal for mapping bids to purchase orders.\r\n       * @param {Number[]} bidIds A list of bid ids.\r\n       * @param {Number} jobId A job id.\r\n       * @param {Boolean} toExistingPO If true, the bid will map to an existing purchase order, otherwise it will map to a new purchase order.\r\n       */\n      openModal: function openModal(bidIds, jobId, toExistingPO) {\n        window.ReactDialogHandler.PoMapping.openPoMappingModal(window.ReactDialogHandler.PoMapping.Bid.getLink(bidIds, jobId, toExistingPO), toExistingPO);\n      }\n    },\n    Estimate: {\n      /**\r\n       * Get a link to the estimate to PO mapping page.\r\n       * @param {Number[]} estimateIds A list of estimate ids.\r\n       * @param {Number} jobId A job id.\r\n       * @param {Boolean} toExistingPO If true, the estimate will map to an existing purchase order, otherwise it will map to a new purchase order.\r\n       * @param {Boolean} isProposed True if not revised costs worksheet and if the proposal is not pending.\r\n       */\n      getLink: function getLink(estimateIds, jobId, toExistingPO, isProposed) {\n        var ids = estimateIds;\n        if (Array.isArray(estimateIds)) {\n          ids = estimateIds.join(",");\n        }\n        return "/app/POMapping/Estimate?ids=".concat(ids, "&jobId=").concat(jobId, "&toExistingPo=").concat(toExistingPO, "&isProposed=").concat(isProposed);\n      },\n      /**\r\n       * Open the modal for mapping estimates to purchase orders.\r\n       * @param {Number[]} estimateIds A list of estimate ids.\r\n       * @param {Number} jobId A job id.\r\n       * @param {Boolean} toExistingPO If true, the estimate will map to an existing purchase order, otherwise it will map to a new purchase order.\r\n       * @param {Boolean} isProposed True if not revised costs worksheet and if the proposal is not pending.\r\n       */\n      openModal: function openModal(estimateIds, jobId, toExistingPO, isProposed) {\n        window.ReactDialogHandler.PoMapping.openPoMappingModal(window.ReactDialogHandler.PoMapping.Estimate.getLink(estimateIds, jobId, toExistingPO, isProposed), toExistingPO);\n      }\n    }\n  },\n  Reminder: {\n    GetDetailsLink: function GetDetailsLink() {\n      return addPortalTypeToURL("/Details/DailyReminder");\n    },\n    OpenDetails: function OpenDetails(closeCallback) {\n      if (closeCallback === undefined) {\n        closeCallback = function closeCallback() {};\n      }\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Reminders Sent Today",\n        width: "1460px",\n        height: "800px",\n        src: window.ReactDialogHandler.Reminder.GetDetailsLink(),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  BuilderRiskInsurance: {\n    GetSettingsLink: function GetSettingsLink(settingsLayout, preapprovalId, autoOpenForm) {\n      return "/app/Settings/BuilderRiskInsurance/".concat(settingsLayout, "/").concat(preapprovalId, "/").concat(autoOpenForm);\n    },\n    OpenSettings: function OpenSettings(settingsLayout, preapprovalId, autoOpenForm, closeCallback) {\n      if (closeCallback === undefined) {\n        closeCallback = function closeCallback() {};\n      }\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Builders Risk Insurance",\n        width: "1250px",\n        height: "800px",\n        src: window.ReactDialogHandler.BuilderRiskInsurance.GetSettingsLink(settingsLayout, preapprovalId, autoOpenForm),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  ErrorPage: {\n    GetNoAccessLink: function GetNoAccessLink(reason) {\n      return "/app/Error/NoAccess/".concat(reason);\n    },\n    OpenNoAccess: function OpenNoAccess(reason, closeCallback) {\n      if (closeCallback === undefined) {\n        closeCallback = function closeCallback() {};\n      }\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Feature Unavailable",\n        width: "560px",\n        height: "360px",\n        src: window.ReactDialogHandler.ErrorPage.GetNoAccessLink(reason),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  Settings: {\n    GetSettingsLink: function GetSettingsLink() {\n      return "/app/Settings";\n    },\n    GetQuickBooksSyncLink: function GetQuickBooksSyncLink() {\n      return "/app/QuickBooksSyncSchedule";\n    },\n    GetAccountingSettingsLink: function GetAccountingSettingsLink() {\n      return "/app/Settings/Accounting";\n    },\n    GetOnlinePaymentsSettingsLink: function GetOnlinePaymentsSettingsLink() {\n      return "/app/OnlinePaymentSettings";\n    },\n    OpenSettings: function OpenSettings(closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        width: "1250px",\n        height: "800px",\n        src: window.ReactDialogHandler.Settings.GetSettingsLink(),\n        title: "Builder Setup & Configuration",\n        closeCallback: closeCallback\n      });\n    },\n    OpenAccountingSettings: function OpenAccountingSettings(closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        width: "1250px",\n        height: "800px",\n        src: window.ReactDialogHandler.Settings.GetAccountingSettingsLink(),\n        title: "Accounting Setup",\n        closeCallback: closeCallback\n      });\n    },\n    OpenQuickBooksSyncSchedule: function OpenQuickBooksSyncSchedule(closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        width: "600px",\n        height: "375px",\n        src: window.ReactDialogHandler.Settings.GetQuickBooksSyncLink(),\n        title: "Web Connector Sync Info",\n        closeCallback: closeCallback\n      });\n    },\n    OpenOnlinePaymentsSettings: function OpenOnlinePaymentsSettings() {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        width: "1250px",\n        height: "800px",\n        src: window.ReactDialogHandler.Settings.GetOnlinePaymentsSettingsLink(),\n        title: "Online Payments Setup"\n      });\n    },\n    RefreshAfterClose: function RefreshAfterClose() {\n      QSHandler.RemoveQueryStringParam("openAccountingSetup");\n      QSHandler.RemoveQueryStringParam("reconnectAccounting");\n      var parent = btMaster.getParentWindow() || window;\n      parent.location.reload();\n    }\n  },\n  AdminSignupCodeDetails: {\n    GetDetailsLink: function GetDetailsLink(signupCodeID, billingCycle, isWebsiteOnly, isCustom, accountType) {\n      return addPortalTypeToURL("/SignupCodeDetails/".concat(signupCodeID, "/").concat(billingCycle, "/").concat(isWebsiteOnly, "/").concat(isCustom, "/").concat(accountType));\n    },\n    OpenDetails: function OpenDetails(signupCodeID, billingCycle, isWebsiteOnly, isCustom, accountType, closeCallback) {\n      if (closeCallback === undefined) {\n        closeCallback = function closeCallback() {};\n      }\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "".concat(isCustom ? "Custom Price " : "", "Signup Code").concat(window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? "" : " Details"),\n        width: "1200px",\n        height: "1000px",\n        src: window.ReactDialogHandler.AdminSignupCodeDetails.GetDetailsLink(signupCodeID, billingCycle, isWebsiteOnly, isCustom, accountType),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  Document: {\n    GetUnreadLink: function GetUnreadLink() {\n      return addPortalTypeToURL("/Document/Unread");\n    },\n    OpenUnread: function OpenUnread(closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Unread Documents",\n        height: "1000px",\n        width: "1000px",\n        src: window.ReactDialogHandler.Document.GetUnreadLink(),\n        closeCallback: closeCallback\n      });\n    },\n    GetSeamlessEditLink: function GetSeamlessEditLink() {\n      return addPortalTypeToURL("/Document/SeamlessEditDownload");\n    },\n    OpenSeamlessEdit: function OpenSeamlessEdit(closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Seamless Edit Download",\n        width: "944px",\n        height: "577px",\n        src: window.ReactDialogHandler.Document.GetSeamlessEditLink(),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  ExcludeFromChurn: {\n    GetExcludeFromChurnLink: function GetExcludeFromChurnLink(builderId) {\n      return addPortalTypeToURL("/ExcludeFromChurn/".concat(builderId));\n    },\n    OpenExcludeFromChurn: function OpenExcludeFromChurn(builderId, closeCallback) {\n      if (closeCallback === undefined) {\n        closeCallback = function closeCallback() {};\n      }\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Exclude from Churn",\n        width: "1000px",\n        height: "auto",\n        src: window.ReactDialogHandler.ExcludeFromChurn.GetExcludeFromChurnLink(builderId),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  BuilderAccountPricingUpdate: {\n    GetBuilderAccountPricingUpdateLink: function GetBuilderAccountPricingUpdateLink(builderId) {\n      return addPortalTypeToURL("/BuilderAccountPricingUpdate/".concat(builderId));\n    },\n    OpenAccountPricingUpdate: function OpenAccountPricingUpdate(builderId, isCustomPricing, isWebsiteOnly, closeCallback) {\n      btMaster.btDialogs.fireDialogWithID("divBasePopupWithIFrame", {\n        dBoxMethod: "iframe",\n        title: "Account Pricing Update",\n        width: "600px",\n        height: isCustomPricing && !isWebsiteOnly ? "610px" : "470px",\n        src: window.ReactDialogHandler.BuilderAccountPricingUpdate.GetBuilderAccountPricingUpdateLink(builderId),\n        closeCallback: closeCallback,\n        showCloseX: \'false\'\n      });\n    }\n  },\n  Template: {\n    GetTemplateDetailsLink: function GetTemplateDetailsLink(jobId) {\n      if (jobId === undefined) {\n        jobId = getSelectedJobIdOrZero();\n      }\n      var link = addPortalTypeToURL("/Template/".concat(jobId));\n      return link;\n    },\n    OpenTemplateDetails: function OpenTemplateDetails(jobId) {\n      var closeCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Template{window.btJScriptGlobals.btAdminFlags.globalUXModalUpdates ? \\"\\" : \\" Details\\"}",\n        width: "1100px",\n        height: "1300px",\n        src: window.ReactDialogHandler.Template.GetTemplateDetailsLink(jobId),\n        closeCallback: closeCallback\n      });\n    },\n    GetTemplateFromTemplateLink: function GetTemplateFromTemplateLink() {\n      return "/app/TemplateFromTemplate";\n    },\n    OpenTemplateFromTemplateWindow: function OpenTemplateFromTemplateWindow(closeCallback) {\n      if (closeCallback === undefined) {\n        closeCallback = function closeCallback() {};\n      }\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        width: "1250px",\n        height: "800px",\n        src: window.ReactDialogHandler.Template.GetTemplateFromTemplateLink(),\n        title: "Template from Template",\n        closeCallback: closeCallback\n      });\n    },\n    RefreshAfterClose: function RefreshAfterClose() {\n      var parent = btMaster.getParentWindow() || window;\n      parent.location.reload();\n    }\n  },\n  Authentication: {\n    GetOpenMultifactorAuthLink: function GetOpenMultifactorAuthLink(credentialId) {\n      return "/app/MultiFactorAuth/".concat(credentialId);\n    },\n    OpenMultifactorAuth: function OpenMultifactorAuth(credentialId) {\n      var dialogId = btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "",\n        width: "600px",\n        height: "291px",\n        cssClass: "ui-no-corner",\n        showCloseX: \'false\',\n        resizable: \'false\',\n        src: window.ReactDialogHandler.Authentication.GetOpenMultifactorAuthLink(credentialId)\n      });\n      btMaster.btDialogs.removeDialogTitleBar(dialogId);\n    }\n  },\n  ClearApi: {\n    GetClearOnlinePaymentSignupLink: function GetClearOnlinePaymentSignupLink() {\n      return addPortalTypeToURL("/OnlinePaymentSignup");\n    },\n    OpenClearOnlinePaymentSignup: function OpenClearOnlinePaymentSignup(closeCallback) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Online Payment Signup",\n        width: "400px",\n        height: "400px",\n        src: window.ReactDialogHandler.ClearApi.GetClearOnlinePaymentSignupLink(),\n        closeCallback: closeCallback\n      });\n    }\n  },\n  WePay: {\n    OpenOwnerSettingsWePayPaymentMethod: function OpenOwnerSettingsWePayPaymentMethod(jobId, external) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Owner Setup",\n        width: "900px",\n        src: "/app/Owner/Setup/".concat(jobId, "/").concat(external),\n        closeCallback: function closeCallback() {\n          return window.location.replace(Global.PageUrlHandler.SummaryPageUrl.OwnerSummaryAgenda);\n        }\n      });\n    }\n  },\n  Subs: {\n    OpenSubSettings: function OpenSubSettings(subId, initialTab, openTradeAgreement) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Sub/Vendor Setup",\n        width: "900px",\n        src: "/app/subs/Setup/".concat(subId, "/").concat(initialTab, "/").concat(openTradeAgreement),\n        closeCallback: function closeCallback() {\n          return window.location.replace(Global.PageUrlHandler.SummaryPageUrl.SubSummary);\n        }\n      });\n    }\n  },\n  Owner: {\n    OpenOwnerSettings: function OpenOwnerSettings(jobId) {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Owner Setup",\n        width: "900px",\n        src: "/app/Owner/Setup/".concat(jobId),\n        closeCallback: function closeCallback() {\n          return window.location.replace(Global.PageUrlHandler.SummaryPageUrl.OwnerSummaryAgenda);\n        }\n      });\n    }\n  },\n  Sentry: {\n    OpenLogExceptionInSentryWindow: function OpenLogExceptionInSentryWindow() {\n      btMaster.btDialogs.createAndFireDialog({\n        dBoxMethod: "iframe",\n        title: "Log Exception in Sentry",\n        width: "350px",\n        height: "475px",\n        src: addPortalTypeToURL("/LogExceptionInSentry")\n      });\n    }\n  }\n};'},"./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/ReversibleUIRemover.js":function(e,n){e.exports="window.ReversibleUIRemover = function () {\n  // Example\n  /*\r\n  var  remover  =  ReversibleUIRemover.createRemoverFor( some_jquery_ui_element );\r\n  remover.prepareForRemove(); // Give the user a visual cue that the item is about to be deleted, pending the web service call.\r\n    function  onServiceSuccess(result)  {\r\n      if  ( result.success )  {\r\n          remover.finalizeRemove(); // The web service call was successful. Remove the element from the UI. \r\n      }  else  {\r\n          remover.undoPrepare(); // The web service call was called successfully, but the service did not successfully perform its task. \r\n          // Remove the visual cue that indicated the item was being deleted.\r\n      }\r\n  }\r\n    function  onServiceError()  {\r\n      remover.undoPrepare(); // The web service could not be contacted, or an unhandled exception occurred.\r\n      // Remove the visual cue that indicated the item was being deleted.\r\n  }\r\n  // call the API service, passing the above methods to the onSuccess and onError methods.\r\n  // WebApiiHandler.{get|post|put}('url_to_API_method', requestData, onServiceSuccess, onServiceError);\r\n  // Create the ReversibleUIRemover singleton and return it.\r\n  */\n\n  return {\n    createRemoverFor: function createRemoverFor(ui) {\n      var uiToRemove = ui;\n\n      // Create the remover object.\n      return {\n        //\n        // Give the user a visual cue that the element is about to be deleted, pending the results of a web service call.\n        //\n        prepareForRemove: function prepareForRemove() {\n          $(uiToRemove).animate({\n            opacity: 0.40\n          }, 'fast');\n        },\n        //\n        // Remove the UI element from the document. Called after the web service call was successful.\n        //\n        finalizeRemove: function finalizeRemove(onComplete) {\n          $(uiToRemove).animate({\n            height: 0,\n            opacity: 0.0\n          }, 'slow', function () {\n            $(uiToRemove).remove();\n            if (typeof onComplete === 'function') {\n              onComplete(ui);\n            }\n          });\n        },\n        //\n        // Remove the visual cue indicating that the element is about to be deleted. Called after the web service call failed.\n        //\n        undoPrepare: function undoPrepare() {\n          $(uiToRemove).css({\n            opacity: 1.0\n          }).show();\n        }\n      };\n    }\n  };\n}();"},"./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/ScrollTopTab.js":function(e,n){e.exports='$(document).ready(function () {\n  $("body .scroll-top-tab").on("click", "a", function () {\n    var href = $(this).attr("href") == "#top" ? "body" : $(this).attr("href");\n    $("html, body").animate({\n      scrollTop: $(href).offset().top\n    }, "slow");\n    return false;\n  });\n});\nwindow.BTScrollTop = function () {\n  var scrollMenuLocked = true;\n  var lastScrolledTime = Date.now();\n  function scrollTop() {\n    var target = document.body;\n    var scrollTop = findScrollTop(target);\n    var item, attr, bottom, i;\n    var waypoint;\n    var el = $(".scroll-top-tab");\n    var intercomOpener = $(".intercom-lightweight-app-launcher-icon-open");\n    var intercomCollapsed = $(".intercom-app");\n    if (el.length > 0 && el.find("a").attr("href") != "#top") {\n      scrollTop = $(window).scrollTop();\n      var scrollID = el.find("a").attr("href"),\n        elementOffset = $(scrollID).offset().top,\n        distance = elementOffset - scrollTop;\n      if (distance < 0) {\n        waypoint = distance;\n      } else {\n        waypoint = undefined;\n      }\n    }\n    if (scrollTop >= 300 && lastScrolledTime + 1000 - Date.now() < 0) {\n      if (typeof waypoint === \'undefined\') {\n        // show the link\n\n        if (scrollMenuLocked) {\n          for (i = 0; i < el.length; i++) {\n            item = $(el[i]);\n            attr = item.attr(\'data-top\');\n            bottom = attr ? attr : \'8px\';\n            if (intercomOpener.length > 0 || intercomCollapsed.length > 0) {\n              // if intercom chat is on screen, adjust the back to top button to be above it\n              bottom = parseInt(bottom) + 74 + "px";\n            }\n            item.animate({\n              bottom: bottom\n            });\n          }\n        }\n        scrollMenuLocked = false;\n      }\n      lastScrolledTime = Date.now();\n    } else if (scrollTop < 300) {\n      // We don\'t care about the throttle when hiding, because if it tries to hide while hidden the user won\'t see anything happen.\n      // hide the link\n      if (waypoint || !scrollMenuLocked) {\n        for (i = 0; i < el.length; i++) {\n          item = $(el[i]);\n          bottom = item.height() + 20;\n          item.animate({\n            bottom: (-bottom).toString() + \'px\'\n          });\n        }\n      }\n      scrollMenuLocked = true;\n    }\n  }\n  function findScrollTop(target) {\n    var scrollTop = 0;\n    while (target != null) {\n      scrollTop += target.scrollTop ? target.scrollTop : 0;\n      target = target.parentNode;\n    }\n    return scrollTop;\n  }\n  return {\n    ScrollTop: scrollTop,\n    FindScrollTop: findScrollTop\n  };\n}();\n$(window).bind(\'scroll\', window.BTScrollTop.ScrollTop);'},"./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/ServiceMessage.js":function(e,n){e.exports="window.ServiceMessage = function () {\n  // Examples:\n  //\n  //     ServiceMessage.showAndFade(\"This is a test message.\");\n  //     ServiceMessage.showAndFade(\"This is a test message.\", {showCloseButton: false});\n  //     ServiceMessage.showUntilClosed(\"This is a test message.\");\n  //     ServiceMessage.show(\"This is a test message.\", {showCloseButton: true} );\n  //\n  // Defaults are set up so that a call to show() without specifying new options \n  // will have the same behavior as a call to showAndFade().\n  //\n  // If you want the message to show up in a different div than the standard one, you can pass in the selector for that div as an option:\n  //\n  //     <div id=\"SomeID\"></div>\n  //\n  //     ServiceMessage.showUntilClosed(\"This is a test message\", { messageDiv: '#SomeID' } )\n  //\n  // If you leave the option 'prepareMessageDiv' set to true, you can pass in an empty div and the appropriate CSS classes and markup will be added to the div.\n  //\n  // If instead you want to specify a pre-styled div that looks different than the normal messages, you can set 'prepareMessageDiv' to false.\n  // In that case, the expected markup must contain an element with the class .service-message-text for displaying the message, \n  // and another element with the class .service-message-close for the close button. This is an example of the markup you'd need (this is the default markup):\n  //\n  //     <div id=\"SomeID\" class=\"service-message\" style=\"display: none\">\n  //         <span class=\"service-message-text\">The comment has been deleted. The comment has been deleted.</span>\n  //         <a href=\"#\" class=\"service-message-close ui-icon ui-icon-close\">Close</a>\n  //     </div>\n  //\n  // To use the above, you'd make the call like this:\n  //\n  //     ServiceMessage.showUntilClosed(\"This is a test message\", { messageDiv: '#SomeID', prepareMessageDiv: false } )\n  //\n\n  var defaultOptions = {\n    fadeAfterMs: 3000,\n    fadeDurationMs: 1500,\n    cancelFadeOnMouseOver: true,\n    canceledFadeShowsCloseButton: true,\n    canceledFadeAfterMs: 750,\n    showCloseButton: true,\n    messageDiv: '#ServiceMessage',\n    prepareMessageDiv: true,\n    // Clear out the message div before using it, and add in the appropriate markup and styles.\n    // This allows the app to not have to worry about the correct markup unless it wants to.\n    delay: 0,\n    // Milliseconds to delay before showing the message.\n    cssClass: null // Extra CSS class(es) to add to the loading message div.\n  };\n\n  // Private functions\n  //\n\n  function centerMessage(options) {\n    // adapted from: http://stackoverflow.com/questions/210717/using-jquery-to-center-a-div-on-the-screen\n    var parentWidth = $(options.messageDiv).offsetParent().width();\n    $(options.messageDiv).css('left', Math.max(0, (parentWidth - $(options.messageDiv).outerWidth()) / 2 + $(window).scrollLeft()) + 'px');\n  }\n  function fadeOutAfter(options) {\n    setTimeout(function () {\n      closeWithFade(options);\n    }, options.fadeAfterMs);\n  }\n  function closeWithFade(options) {\n    if (options.cancelFadeOnMouseOver) {\n      $(options.messageDiv).mouseenter(options, cancelFadeOnMouseEnter);\n    }\n    $(options.messageDiv).fadeOut(options.fadeDurationMs);\n  }\n  function cancelFadeOnMouseEnter(ev) {\n    var options = ev.data;\n    $(this).off('mouseenter').off('mouseleave');\n    $(this).stop(true).animate({\n      opacity: '100'\n    });\n\n    // We may want to speed up the time until the next fade.\n    options.fadeAfterMs = options.canceledFadeAfterMs;\n    $(this).mouseleave(options, function (e) {\n      $(this).off('mouseenter');\n      if (options.canceledFadeAfterMs > 0) {\n        fadeOutAfter(options);\n      }\n    });\n    if (options.canceledFadeShowsCloseButton) {\n      showCloseButton(options);\n    }\n  }\n  function resetFade(options) {\n    // If there is any fading in progress, stop it now.\n    //\n    $(options.messageDiv).off('mouseenter').off('mouseleave');\n    $(options.messageDiv).stop(true).css({\n      opacity: '100'\n    });\n\n    // If we are supposed to fade out after this, hook it up now.\n    if (options.fadeAfterMs > 0) {\n      fadeOutAfter(options);\n    }\n  }\n  function showCloseButton(options) {\n    $(options.messageDiv).find('.service-message-close').show().click(function (ev) {\n      $(options.messageDiv).fadeOut(options.fadeDurationAfterCloseButtonMs);\n      ev.preventDefault();\n    });\n  }\n  function prepareMessageDiv(options) {\n    if (options.prepareMessageDiv) {\n      // Assign the appropriate CSS classes to the message div.\n      var classes = 'service-message';\n      if (!btMaster.isNullOrWhiteSpace(options.cssClass)) {\n        classes += ' ' + $.trim(options.cssClass);\n      }\n      $(options.messageDiv).removeClass().addClass(classes);\n\n      //if (!$(options.messageDiv).hasClass('service-message')) {\n      //\t$(options.messageDiv).addClass('service-message');\n      //}\n\n      // Set the inner markup of the parent div that is to display the message.\n      var markup = '<span class=\"service-message-text\"></span>' + '<a href=\"#\" class=\"service-message-close ui-icon ui-icon-close\"></a>';\n      $(options.messageDiv).empty().html(markup);\n    }\n  }\n\n  // Create an object that cancels the timer and closes the loading message.\n  function createLoadingMessageCloserObject(delayTimer, messageDiv) {\n    return {\n      closeLoadingMessage: function closeLoadingMessage() {\n        clearTimeout(delayTimer);\n        $(messageDiv).hide();\n      }\n    };\n  }\n\n  // Hook up the event handler that keeps the message centered in the window, even if the window size changes.\n  //\n  $(window).resize(function () {\n    centerMessage({\n      messageDiv: '#ServiceMessage'\n    });\n  });\n\n  // Create the ServiceMessage singleton and return it.\n  //\n\n  var sm = {\n    show: function show(message, options) {\n      options = $.extend({}, defaultOptions, options);\n\n      // If the div that displays the message div is empty, \n      // we need to add the appropriate markup to it.\n      prepareMessageDiv(options);\n\n      // Set the text and set up the fading.\n      $(options.messageDiv).find('.service-message-text').html(message);\n      resetFade(options);\n\n      // Show the close button and hook up the click handler, if necessary.\n      if (options.showCloseButton) {\n        showCloseButton(options);\n      } else {\n        $(options.messageDiv).find('.service-message-close').hide();\n      }\n\n      // Show the service message, either directly or after a delay, depending on the specified options.\n      var delayTimer = setTimeout(function () {\n        // Show the service message and position the service message to be centered in the window.\n        // The centering won't work correctly without showing the div first -- certain measurements will be wrong.\n        $(options.messageDiv).show();\n        centerMessage(options);\n\n        // Unset the timerId\n        delayTimer = null;\n      }, options.delay);\n\n      // Hook up the fading, if necessary.\n      if (options.fadeAfterMs > 0) {\n        fadeOutAfter(options);\n      }\n      return createLoadingMessageCloserObject(delayTimer, options.messageDiv);\n    },\n    showAndFade: function showAndFade(message, options) {\n      var opts = $.extend({}, defaultOptions, options);\n      return sm.show(message, opts);\n    },\n    showUntilClosed: function showUntilClosed(message, options) {\n      var opts = $.extend({}, defaultOptions, {\n        fadeAfterMs: 0,\n        fadeDurationMs: 750\n      }, options);\n      return sm.show(message, opts);\n    },\n    showLoadingMessage: function showLoadingMessage(message, options) {\n      var opts = $.extend({}, defaultOptions, {\n        fadeAfterMs: 0,\n        showCloseButton: false,\n        delay: 500,\n        cssClass: 'loading-message'\n      }, options);\n      return sm.show(message, opts);\n    }\n  };\n  return sm;\n}();"},"./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/WebApiHandler.js":function(e,n){e.exports="window.WebApiHandler = function () {\n  var _lastRequestTime = null;\n  var _lastRequestJson = null;\n  var initialOptions = {\n    type: 'GET',\n    url: null,\n    data: null,\n    contentType: 'application/json; charset=utf-8',\n    processdata: false,\n    dataType: 'json',\n    cache: false,\n    async: true\n  };\n  var defaultOptions = JSON.parse(JSON.stringify(initialOptions));\n  function requestToJson(type, url, data) {\n    return JSON.stringify({\n      type: type,\n      url: url,\n      data: data\n    });\n  }\n  function runAjax(type, url, data, success, fail, error, async, throttle, additionalHeaders, paymentRequired) {\n    if (Date.now() - _lastRequestTime < 350) {\n      var newRequestJson = requestToJson(type, url, data);\n      if (newRequestJson == _lastRequestJson) {\n        // prevent the exact same call from being made within 350 ms\n        console.log('rate limited.');\n        if (throttle && typeof throttle == \"function\") {\n          throttle();\n        }\n        // Return an empty promise :(\n        return $.when({\n          success: false\n        });\n      }\n    }\n    defaultOptions.headers = {};\n    defaultOptions.headers[Global.Constants.Authentication.AuthenticationConstants.PortalTypeHeader] = $('#hidPortalType').val();\n    defaultOptions.headers[Global.Constants.Builders.MasterBuilderId] = $('#hidBuilderIdMaster').val();\n    if (additionalHeaders != null) {\n      $.extend(defaultOptions.headers, additionalHeaders);\n    }\n    var onPaymentRequired;\n    if (paymentRequired) {\n      onPaymentRequired = paymentRequired;\n    } else {\n      onPaymentRequired = handleForbidden; //Without override treat payment required and unauthorized the same way\n    }\n\n    var params;\n    if (typeof url === 'string') {\n      params = {\n        type: type,\n        url: url,\n        data: data,\n        success: onAjaxSuccess,\n        error: onAjaxError,\n        async: async,\n        statusCode: {\n          402: onPaymentRequired,\n          403: handleForbidden\n        }\n      };\n    } else {\n      throw {\n        name: 'Invalid Parameter \"url\"',\n        message: 'The url parameter must be a string, and may not be null.',\n        toString: function toString() {\n          return this.name + \": \" + this.message;\n        }\n      };\n    }\n    _lastRequestTime = Date.now();\n    _lastRequestJson = requestToJson(type, url, data);\n    var request = $.extend({}, defaultOptions, params);\n    defaultOptions = JSON.parse(JSON.stringify(initialOptions));\n    return $.ajax(request);\n    function checkIsProductionAndAlert(message) {\n      if (typeof btJScriptGlobals !== 'undefined' && typeof btJScriptGlobals.isProduction !== 'undefined') {\n        if (!btJScriptGlobals.isProduction) {\n          alert('An error has occurred.\\n' + message);\n        }\n      }\n    }\n    function onAjaxSuccess(result, textStatus, jqXhr) {\n      if (!result) {\n        //bt-124613 Result is unexpectedly null for firefox users. Only throw when responseText is not undefined.\n        if (jqXhr.responseText !== \"null\") {\n          var msg = \"Text Status: \".concat(textStatus, \"; XHR Response: \").concat(JSON.stringify(jqXhr));\n          checkIsProductionAndAlert(msg);\n          throw new Error(msg);\n        }\n      } else {\n        if (result.success) {\n          if (typeof success === 'function') {\n            if (window.BTBroadcastChannel !== undefined) {\n              new window.BTBroadcastChannel(Global.Constants.BroadcastChannel.BroadcastChannelTypes.SessionEvent).postMessage({\n                type: Global.Constants.BroadcastChannel.BroadcastChannelEventTypes.Reset\n              });\n            } else {\n              localStorage['sessionStartDate'] = new Date().getTime();\n            }\n            success.call(this, result, textStatus, jqXhr);\n          }\n        } else {\n          if (typeof fail === 'function') {\n            fail.call(this, result, textStatus, jqXhr);\n          } else {\n            checkIsProductionAndAlert(result.message);\n          }\n        }\n      }\n    }\n    function getRedirectForUnauthorized() {\n      var qsDict = {};\n      if (window.top && window.top.location.pathname) {\n        qsDict['lpr'] = window.top.location.pathname;\n      }\n      return qsDict;\n    }\n    function onAjaxError(jqXHR, textStatus, errorThrown) {\n      // Jquery status on this object will be zero if the operation was cancelled in anyway.\n      // One concern is that this status will also be zero if no internet is available.\n      var statusCodesToSkip = [0];\n      statusCodesToSkip.push(403);\n      statusCodesToSkip.push(402);\n      if (statusCodesToSkip.indexOf(jqXHR.status) === -1) {\n        //Redirect to login for 401 - todo add 401 check after response codes go live\n        if (jqXHR.responseJSON && jqXHR.responseJSON.needsToRelogin) {\n          window.location.href = QSHandler.CreateQueryStringFromDictionary(Global.PageUrlHandler.MiscPageUrl.Login, getRedirectForUnauthorized());\n          return;\n        }\n        if (typeof error === 'function') {\n          var text = jqXHR.responseText || '{}';\n          if (text.indexOf('<') === 0) {\n            text = '{}';\n          }\n          var data;\n          try {\n            data = JSON.parse(text);\n          } catch (e) {\n            checkIsProductionAndAlert(errorThrown);\n          }\n          error.call(this, jqXHR, textStatus, errorThrown, data);\n        } else {\n          checkIsProductionAndAlert(errorThrown);\n        }\n      }\n    }\n    function handleForbidden(response) {\n      var currentPageUrl = window.top.location.href;\n      var redirectUrl = Global.PageUrlHandler.MiscPageUrl.Login;\n      switch (btJScriptGlobals.loginTypeInt) {\n        case Global.Enums.BTLoginTypes.Owner:\n        case Global.Enums.BTLoginTypes.FRIENDSANDFAMILY:\n          redirectUrl = Global.PageUrlHandler.SummaryPageUrl.OwnerSummaryAgenda;\n          break;\n        case Global.Enums.BTLoginTypes.SUBS:\n          redirectUrl = Global.PageUrlHandler.SummaryPageUrl.SubSummary;\n          break;\n        case Global.Enums.BTLoginTypes.BUILDER:\n          redirectUrl = Global.PageUrlHandler.SummaryPageUrl.BuilderSummary;\n          break;\n      }\n      if (currentPageUrl.toLowerCase().indexOf(redirectUrl.toLowerCase()) > -1) {\n        // do not redirect to the same page again\n        redirectUrl = Global.PageUrlHandler.MiscPageUrl.Login;\n      }\n      if (response.responseJSON) {\n        var reason = 0;\n        if (response.status === 403) {\n          reason = response.responseJSON.reason;\n        } else if (response.status === 402) {\n          reason = response.responseJSON.canUserUpgrade ? 1 : 0;\n        }\n\n        // add forbidden reason query string variable\n        redirectUrl = QSHandler.UpdateOrAddQueryStringParameter(redirectUrl, Global.Constants.SummaryGrid.QueryStringParams.ForbiddenReason, reason);\n      }\n      window.top.location.href = redirectUrl;\n    }\n  }\n\n  /**\r\n   * Use this for SELECT operations\r\n   * @param {string} url URL to make the request to\r\n   * @param {Object} data The data to send to the api (NOTE: for get requests this will automatically build a querystring and append it to the URL)\r\n   * @param {function} success The API call was successful and result.success was true\r\n   * @param {function} fail Network request came back but the json returned indicated there was a server error\r\n   * @param {function} error Request failed (network timeout, no internet, aborted, parse error)\r\n   * @param {boolean} async Deprecated: DONT USE THIS, If you pass false it will lock your tabs UI thread\r\n   * @param {function} throttle Called if your request was throttled (you made too many of the same calls quickly)\r\n   * @param {Object} additionalHeaders Any additional headers to send with the request\r\n   * @todo Delete the async param\r\n   */\n  var getFn = function getFn(url, data, success, fail, error, async, throttle, additionalHeaders, paymentRequired) {\n    return runAjax('GET', url, data, success, fail, error, async, throttle, additionalHeaders, paymentRequired);\n  };\n\n  /**\r\n   * Use this for INSERT operations\r\n   * @param {string} url URL to make the request to\r\n   * @param {Object} data The data to send to the api (NOTE: for get requests this will automatically build a querystring and append it to the URL)\r\n   * @param {function} success The API call was successful and result.success was true\r\n   * @param {function} fail Network request came back but the json returned indicated there was a server error\r\n   * @param {function} error Request failed (network timeout, no internet, aborted, parse error)\r\n   * @param {boolean} async Deprecated: DONT USE THIS, If you pass false it will lock your tabs UI thread\r\n   * @param {function} throttle Called if your request was throttled (you made too many of the same calls quickly)\r\n   * @param {Object} additionalHeaders Any additional headers to send with the request\r\n   * @todo Delete the async param\r\n   */\n  var postFn = function postFn(url, data, success, fail, error, async, throttle, additionalHeaders) {\n    return runAjax('POST', url, data, success, fail, error, async, throttle, additionalHeaders);\n  };\n\n  /**\r\n   * Use this for UPDATE operations\r\n   * @param {string} url URL to make the request to\r\n   * @param {Object} data The data to send to the api (NOTE: for get requests this will automatically build a querystring and append it to the URL)\r\n   * @param {function} success The API call was successful and result.success was true\r\n   * @param {function} fail Network request came back but the json returned indicated there was a server error\r\n   * @param {function} error Request failed (network timeout, no internet, aborted, parse error)\r\n   * @param {boolean} async Deprecated: DONT USE THIS, If you pass false it will lock your tabs UI thread\r\n   * @param {function} throttle Called if your request was throttled (you made too many of the same calls quickly)\r\n   * @param {Object} additionalHeaders Any additional headers to send with the request\r\n   * @todo Delete the async param\r\n   */\n  var putFn = function putFn(url, data, success, fail, error, async, throttle, additionalHeaders) {\n    return runAjax('PUT', url, data, success, fail, error, async, throttle, additionalHeaders);\n  };\n\n  /**\r\n   * Use this for DELETE operations\r\n   * NOTE: 'delete' is a reserved word in JavaScript, but reserved words can be used as property names.\r\n   * They CANNOT be used as identifiers, but this is not an identifier, so this should be fine.\r\n   * Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Reserved_Words\r\n   * @param {string} url URL to make the request to\r\n   * @param {Object} data The data to send to the api (NOTE: for get requests this will automatically build a querystring and append it to the URL)\r\n   * @param {function} success The API call was successful and result.success was true\r\n   * @param {function} fail Network request came back but the json returned indicated there was a server error\r\n   * @param {function} error Request failed (network timeout, no internet, aborted, parse error)\r\n   * @param {boolean} async Deprecated: DONT USE THIS, If you pass false it will lock your tabs UI thread\r\n   * @param {function} throttle Called if your request was throttled (you made too many of the same calls quickly)\r\n   * @param {Object} additionalHeaders Any additional headers to send with the request\r\n   * @todo Delete the async param\r\n   */\n  var deleteFn = function deleteFn(url, data, success, fail, error, async, throttle, additionalHeaders) {\n    return runAjax('DELETE', url, data, success, fail, error, async, throttle, additionalHeaders);\n  };\n  return {\n    get: getFn,\n    post: postFn,\n    put: putFn,\n    delete: deleteFn,\n    putAsStringData: function putAsStringData(url, data, success, fail, error, async, throttle, additionalHeaders) {\n      var dataString = typeof data === \"string\" ? data : JSON.stringify(data);\n      return runAjax('PUT', url, dataString, success, fail, error, async, throttle, additionalHeaders);\n    },\n    setOptions: function setOptions(opts) {\n      $.extend(defaultOptions, opts);\n      return this;\n    },\n    serviceFailAlert: function serviceFailAlert() {\n      alert('Service call failed');\n    },\n    getFileViaService: function getFileViaService(url, data, responseHeaderString, defaultFileName, onSuccessCallback, onErrorCallback) {\n      var resp = $.ajax({\n        type: \"get\",\n        url: url,\n        data: data,\n        headers: {\n          PortalType: $('#hidPortalType').val(),\n          masterPageBuilderId: $('#hidBuilderIdMaster').val()\n        },\n        xhrFields: {\n          responseType: 'blob'\n        },\n        success: function success(data) {\n          var a = document.createElement('a');\n          var url = window.URL.createObjectURL(data);\n          a.href = url;\n          a.download = resp.getResponseHeader(responseHeaderString).split('filename=')[1] || defaultFileName;\n          document.body.appendChild(a);\n          a.click();\n          a.remove();\n          window.URL.revokeObjectURL(url);\n          if (onSuccessCallback) {\n            onSuccessCallback();\n          }\n        },\n        error: function error(e) {\n          btMaster.btAlert('There was an error getting your data. Please try again.');\n          if (onErrorCallback) {\n            onErrorCallback();\n          }\n        }\n      });\n    }\n  };\n}();"},"./node_modules/script-loader/node_modules/raw-loader/index.js!./node_modules/babel-loader/lib/index.js!./node_modules/eslint-loader/index.js!./jscript/textAreaMaxLength.js":function(e,n){e.exports="window.textCounter = function (field, countfield, maxlimit) {\n  if (field.value.length > maxlimit) {\n    field.value = field.value.substring(0, maxlimit);\n  } else {\n    countfield.value = maxlimit - field.value.length;\n  }\n};\nwindow.getPreviewQString = function () {\n  var qs = '?';\n  qs += 'title=' + escape(document.getElementById('txtTemplateTitle').value);\n  qs += '&use=' + document.getElementById('chkUseTemplate').checked;\n  qs += '&colorID=' + document.getElementById('lstTemplateColor').value;\n  qs += '&subID=' + document.getElementById('lstTemplateSub').value;\n  qs += '&designID=' + document.getElementById('lstTemplateDesign').value;\n  //qs += 'title=' + document.getElementById('txtTemplateTitle').value;\n  return qs;\n};"},0:function(e,n){},1:function(e,n){},jquery:function(e,n){e.exports=jQuery}},[["./jscript/masterPage/rootMasterWebforms.js","webpackruntime","vendor","commons"]]]);
//# sourceMappingURL=maps/rootMasterWebforms.4717d82e3811beea2839.map.js